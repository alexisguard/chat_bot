
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Workspace
 * 
 */
export type Workspace = $Result.DefaultSelection<Prisma.$WorkspacePayload>
/**
 * Model WorkspaceUser
 * 
 */
export type WorkspaceUser = $Result.DefaultSelection<Prisma.$WorkspaceUserPayload>
/**
 * Model Invitation
 * 
 */
export type Invitation = $Result.DefaultSelection<Prisma.$InvitationPayload>
/**
 * Model BusinessRiskReportTask
 * 
 */
export type BusinessRiskReportTask = $Result.DefaultSelection<Prisma.$BusinessRiskReportTaskPayload>
/**
 * Model Entity
 * 
 */
export type Entity = $Result.DefaultSelection<Prisma.$EntityPayload>
/**
 * Model Observation
 * 
 */
export type Observation = $Result.DefaultSelection<Prisma.$ObservationPayload>
/**
 * Model Reference
 * 
 */
export type Reference = $Result.DefaultSelection<Prisma.$ReferencePayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model DocumentPage
 * 
 */
export type DocumentPage = $Result.DefaultSelection<Prisma.$DocumentPagePayload>
/**
 * Model Folder
 * 
 */
export type Folder = $Result.DefaultSelection<Prisma.$FolderPayload>
/**
 * Model DocumentAnalyserTask
 * 
 */
export type DocumentAnalyserTask = $Result.DefaultSelection<Prisma.$DocumentAnalyserTaskPayload>
/**
 * Model ChatAgentTask
 * 
 */
export type ChatAgentTask = $Result.DefaultSelection<Prisma.$ChatAgentTaskPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model MessageAction
 * 
 */
export type MessageAction = $Result.DefaultSelection<Prisma.$MessageActionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const WorkspaceRole: {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  OWNER: 'OWNER'
};

export type WorkspaceRole = (typeof WorkspaceRole)[keyof typeof WorkspaceRole]


export const BusinessRiskReportTaskStatus: {
  DRAFT: 'DRAFT',
  GENERATING: 'GENERATING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type BusinessRiskReportTaskStatus = (typeof BusinessRiskReportTaskStatus)[keyof typeof BusinessRiskReportTaskStatus]


export const EntityType: {
  PERSON: 'PERSON',
  BUSINESS: 'BUSINESS',
  ORGANIZATION: 'ORGANIZATION'
};

export type EntityType = (typeof EntityType)[keyof typeof EntityType]


export const ProjectStatus: {
  DRAFT: 'DRAFT',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const DocumentPreprocessStatus: {
  DRAFT: 'DRAFT',
  PREPROCESSING: 'PREPROCESSING',
  COMPLETED: 'COMPLETED'
};

export type DocumentPreprocessStatus = (typeof DocumentPreprocessStatus)[keyof typeof DocumentPreprocessStatus]


export const DocumentAnalyserTaskStatus: {
  DRAFT: 'DRAFT',
  GENERATING: 'GENERATING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type DocumentAnalyserTaskStatus = (typeof DocumentAnalyserTaskStatus)[keyof typeof DocumentAnalyserTaskStatus]


export const MessageSender: {
  USER: 'USER',
  BOT: 'BOT'
};

export type MessageSender = (typeof MessageSender)[keyof typeof MessageSender]


export const MessageActionType: {
  OPEN_DOCUMENT: 'OPEN_DOCUMENT',
  OPEN_URL: 'OPEN_URL'
};

export type MessageActionType = (typeof MessageActionType)[keyof typeof MessageActionType]

}

export type WorkspaceRole = $Enums.WorkspaceRole

export const WorkspaceRole: typeof $Enums.WorkspaceRole

export type BusinessRiskReportTaskStatus = $Enums.BusinessRiskReportTaskStatus

export const BusinessRiskReportTaskStatus: typeof $Enums.BusinessRiskReportTaskStatus

export type EntityType = $Enums.EntityType

export const EntityType: typeof $Enums.EntityType

export type ProjectStatus = $Enums.ProjectStatus

export const ProjectStatus: typeof $Enums.ProjectStatus

export type DocumentPreprocessStatus = $Enums.DocumentPreprocessStatus

export const DocumentPreprocessStatus: typeof $Enums.DocumentPreprocessStatus

export type DocumentAnalyserTaskStatus = $Enums.DocumentAnalyserTaskStatus

export const DocumentAnalyserTaskStatus: typeof $Enums.DocumentAnalyserTaskStatus

export type MessageSender = $Enums.MessageSender

export const MessageSender: typeof $Enums.MessageSender

export type MessageActionType = $Enums.MessageActionType

export const MessageActionType: typeof $Enums.MessageActionType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.workspace`: Exposes CRUD operations for the **Workspace** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workspaces
    * const workspaces = await prisma.workspace.findMany()
    * ```
    */
  get workspace(): Prisma.WorkspaceDelegate<ExtArgs>;

  /**
   * `prisma.workspaceUser`: Exposes CRUD operations for the **WorkspaceUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceUsers
    * const workspaceUsers = await prisma.workspaceUser.findMany()
    * ```
    */
  get workspaceUser(): Prisma.WorkspaceUserDelegate<ExtArgs>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitation.findMany()
    * ```
    */
  get invitation(): Prisma.InvitationDelegate<ExtArgs>;

  /**
   * `prisma.businessRiskReportTask`: Exposes CRUD operations for the **BusinessRiskReportTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessRiskReportTasks
    * const businessRiskReportTasks = await prisma.businessRiskReportTask.findMany()
    * ```
    */
  get businessRiskReportTask(): Prisma.BusinessRiskReportTaskDelegate<ExtArgs>;

  /**
   * `prisma.entity`: Exposes CRUD operations for the **Entity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entities
    * const entities = await prisma.entity.findMany()
    * ```
    */
  get entity(): Prisma.EntityDelegate<ExtArgs>;

  /**
   * `prisma.observation`: Exposes CRUD operations for the **Observation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Observations
    * const observations = await prisma.observation.findMany()
    * ```
    */
  get observation(): Prisma.ObservationDelegate<ExtArgs>;

  /**
   * `prisma.reference`: Exposes CRUD operations for the **Reference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more References
    * const references = await prisma.reference.findMany()
    * ```
    */
  get reference(): Prisma.ReferenceDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.documentPage`: Exposes CRUD operations for the **DocumentPage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentPages
    * const documentPages = await prisma.documentPage.findMany()
    * ```
    */
  get documentPage(): Prisma.DocumentPageDelegate<ExtArgs>;

  /**
   * `prisma.folder`: Exposes CRUD operations for the **Folder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Folders
    * const folders = await prisma.folder.findMany()
    * ```
    */
  get folder(): Prisma.FolderDelegate<ExtArgs>;

  /**
   * `prisma.documentAnalyserTask`: Exposes CRUD operations for the **DocumentAnalyserTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentAnalyserTasks
    * const documentAnalyserTasks = await prisma.documentAnalyserTask.findMany()
    * ```
    */
  get documentAnalyserTask(): Prisma.DocumentAnalyserTaskDelegate<ExtArgs>;

  /**
   * `prisma.chatAgentTask`: Exposes CRUD operations for the **ChatAgentTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatAgentTasks
    * const chatAgentTasks = await prisma.chatAgentTask.findMany()
    * ```
    */
  get chatAgentTask(): Prisma.ChatAgentTaskDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.messageAction`: Exposes CRUD operations for the **MessageAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageActions
    * const messageActions = await prisma.messageAction.findMany()
    * ```
    */
  get messageAction(): Prisma.MessageActionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Workspace: 'Workspace',
    WorkspaceUser: 'WorkspaceUser',
    Invitation: 'Invitation',
    BusinessRiskReportTask: 'BusinessRiskReportTask',
    Entity: 'Entity',
    Observation: 'Observation',
    Reference: 'Reference',
    Project: 'Project',
    Document: 'Document',
    DocumentPage: 'DocumentPage',
    Folder: 'Folder',
    DocumentAnalyserTask: 'DocumentAnalyserTask',
    ChatAgentTask: 'ChatAgentTask',
    Message: 'Message',
    MessageAction: 'MessageAction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "workspace" | "workspaceUser" | "invitation" | "businessRiskReportTask" | "entity" | "observation" | "reference" | "project" | "document" | "documentPage" | "folder" | "documentAnalyserTask" | "chatAgentTask" | "message" | "messageAction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Workspace: {
        payload: Prisma.$WorkspacePayload<ExtArgs>
        fields: Prisma.WorkspaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findFirst: {
            args: Prisma.WorkspaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findMany: {
            args: Prisma.WorkspaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          create: {
            args: Prisma.WorkspaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          createMany: {
            args: Prisma.WorkspaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          delete: {
            args: Prisma.WorkspaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          update: {
            args: Prisma.WorkspaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkspaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          aggregate: {
            args: Prisma.WorkspaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspace>
          }
          groupBy: {
            args: Prisma.WorkspaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceUser: {
        payload: Prisma.$WorkspaceUserPayload<ExtArgs>
        fields: Prisma.WorkspaceUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>
          }
          findFirst: {
            args: Prisma.WorkspaceUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>
          }
          findMany: {
            args: Prisma.WorkspaceUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>[]
          }
          create: {
            args: Prisma.WorkspaceUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>
          }
          createMany: {
            args: Prisma.WorkspaceUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>[]
          }
          delete: {
            args: Prisma.WorkspaceUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>
          }
          update: {
            args: Prisma.WorkspaceUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkspaceUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUserPayload>
          }
          aggregate: {
            args: Prisma.WorkspaceUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceUser>
          }
          groupBy: {
            args: Prisma.WorkspaceUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceUserCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceUserCountAggregateOutputType> | number
          }
        }
      }
      Invitation: {
        payload: Prisma.$InvitationPayload<ExtArgs>
        fields: Prisma.InvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findFirst: {
            args: Prisma.InvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findMany: {
            args: Prisma.InvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          create: {
            args: Prisma.InvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          createMany: {
            args: Prisma.InvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          delete: {
            args: Prisma.InvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          update: {
            args: Prisma.InvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          deleteMany: {
            args: Prisma.InvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          aggregate: {
            args: Prisma.InvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvitation>
          }
          groupBy: {
            args: Prisma.InvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationCountArgs<ExtArgs>
            result: $Utils.Optional<InvitationCountAggregateOutputType> | number
          }
        }
      }
      BusinessRiskReportTask: {
        payload: Prisma.$BusinessRiskReportTaskPayload<ExtArgs>
        fields: Prisma.BusinessRiskReportTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessRiskReportTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessRiskReportTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>
          }
          findFirst: {
            args: Prisma.BusinessRiskReportTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessRiskReportTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>
          }
          findMany: {
            args: Prisma.BusinessRiskReportTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>[]
          }
          create: {
            args: Prisma.BusinessRiskReportTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>
          }
          createMany: {
            args: Prisma.BusinessRiskReportTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessRiskReportTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>[]
          }
          delete: {
            args: Prisma.BusinessRiskReportTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>
          }
          update: {
            args: Prisma.BusinessRiskReportTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>
          }
          deleteMany: {
            args: Prisma.BusinessRiskReportTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessRiskReportTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BusinessRiskReportTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRiskReportTaskPayload>
          }
          aggregate: {
            args: Prisma.BusinessRiskReportTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusinessRiskReportTask>
          }
          groupBy: {
            args: Prisma.BusinessRiskReportTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessRiskReportTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessRiskReportTaskCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessRiskReportTaskCountAggregateOutputType> | number
          }
        }
      }
      Entity: {
        payload: Prisma.$EntityPayload<ExtArgs>
        fields: Prisma.EntityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          findFirst: {
            args: Prisma.EntityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          findMany: {
            args: Prisma.EntityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>[]
          }
          create: {
            args: Prisma.EntityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          createMany: {
            args: Prisma.EntityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EntityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>[]
          }
          delete: {
            args: Prisma.EntityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          update: {
            args: Prisma.EntityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          deleteMany: {
            args: Prisma.EntityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EntityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EntityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          aggregate: {
            args: Prisma.EntityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEntity>
          }
          groupBy: {
            args: Prisma.EntityGroupByArgs<ExtArgs>
            result: $Utils.Optional<EntityGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntityCountArgs<ExtArgs>
            result: $Utils.Optional<EntityCountAggregateOutputType> | number
          }
        }
      }
      Observation: {
        payload: Prisma.$ObservationPayload<ExtArgs>
        fields: Prisma.ObservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ObservationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ObservationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          findFirst: {
            args: Prisma.ObservationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ObservationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          findMany: {
            args: Prisma.ObservationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>[]
          }
          create: {
            args: Prisma.ObservationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          createMany: {
            args: Prisma.ObservationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ObservationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>[]
          }
          delete: {
            args: Prisma.ObservationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          update: {
            args: Prisma.ObservationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          deleteMany: {
            args: Prisma.ObservationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ObservationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ObservationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          aggregate: {
            args: Prisma.ObservationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateObservation>
          }
          groupBy: {
            args: Prisma.ObservationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ObservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ObservationCountArgs<ExtArgs>
            result: $Utils.Optional<ObservationCountAggregateOutputType> | number
          }
        }
      }
      Reference: {
        payload: Prisma.$ReferencePayload<ExtArgs>
        fields: Prisma.ReferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          findFirst: {
            args: Prisma.ReferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          findMany: {
            args: Prisma.ReferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>[]
          }
          create: {
            args: Prisma.ReferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          createMany: {
            args: Prisma.ReferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>[]
          }
          delete: {
            args: Prisma.ReferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          update: {
            args: Prisma.ReferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          deleteMany: {
            args: Prisma.ReferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          aggregate: {
            args: Prisma.ReferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReference>
          }
          groupBy: {
            args: Prisma.ReferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferenceCountArgs<ExtArgs>
            result: $Utils.Optional<ReferenceCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      DocumentPage: {
        payload: Prisma.$DocumentPagePayload<ExtArgs>
        fields: Prisma.DocumentPageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentPageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentPageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>
          }
          findFirst: {
            args: Prisma.DocumentPageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentPageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>
          }
          findMany: {
            args: Prisma.DocumentPageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>[]
          }
          create: {
            args: Prisma.DocumentPageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>
          }
          createMany: {
            args: Prisma.DocumentPageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentPageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>[]
          }
          delete: {
            args: Prisma.DocumentPageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>
          }
          update: {
            args: Prisma.DocumentPageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>
          }
          deleteMany: {
            args: Prisma.DocumentPageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentPageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentPageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPagePayload>
          }
          aggregate: {
            args: Prisma.DocumentPageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentPage>
          }
          groupBy: {
            args: Prisma.DocumentPageGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentPageGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentPageCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentPageCountAggregateOutputType> | number
          }
        }
      }
      Folder: {
        payload: Prisma.$FolderPayload<ExtArgs>
        fields: Prisma.FolderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FolderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FolderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findFirst: {
            args: Prisma.FolderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FolderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findMany: {
            args: Prisma.FolderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          create: {
            args: Prisma.FolderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          createMany: {
            args: Prisma.FolderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FolderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          delete: {
            args: Prisma.FolderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          update: {
            args: Prisma.FolderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          deleteMany: {
            args: Prisma.FolderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FolderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FolderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          aggregate: {
            args: Prisma.FolderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFolder>
          }
          groupBy: {
            args: Prisma.FolderGroupByArgs<ExtArgs>
            result: $Utils.Optional<FolderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FolderCountArgs<ExtArgs>
            result: $Utils.Optional<FolderCountAggregateOutputType> | number
          }
        }
      }
      DocumentAnalyserTask: {
        payload: Prisma.$DocumentAnalyserTaskPayload<ExtArgs>
        fields: Prisma.DocumentAnalyserTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentAnalyserTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentAnalyserTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>
          }
          findFirst: {
            args: Prisma.DocumentAnalyserTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentAnalyserTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>
          }
          findMany: {
            args: Prisma.DocumentAnalyserTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>[]
          }
          create: {
            args: Prisma.DocumentAnalyserTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>
          }
          createMany: {
            args: Prisma.DocumentAnalyserTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentAnalyserTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>[]
          }
          delete: {
            args: Prisma.DocumentAnalyserTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>
          }
          update: {
            args: Prisma.DocumentAnalyserTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>
          }
          deleteMany: {
            args: Prisma.DocumentAnalyserTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentAnalyserTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentAnalyserTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAnalyserTaskPayload>
          }
          aggregate: {
            args: Prisma.DocumentAnalyserTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentAnalyserTask>
          }
          groupBy: {
            args: Prisma.DocumentAnalyserTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentAnalyserTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentAnalyserTaskCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentAnalyserTaskCountAggregateOutputType> | number
          }
        }
      }
      ChatAgentTask: {
        payload: Prisma.$ChatAgentTaskPayload<ExtArgs>
        fields: Prisma.ChatAgentTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatAgentTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatAgentTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>
          }
          findFirst: {
            args: Prisma.ChatAgentTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatAgentTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>
          }
          findMany: {
            args: Prisma.ChatAgentTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>[]
          }
          create: {
            args: Prisma.ChatAgentTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>
          }
          createMany: {
            args: Prisma.ChatAgentTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatAgentTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>[]
          }
          delete: {
            args: Prisma.ChatAgentTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>
          }
          update: {
            args: Prisma.ChatAgentTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>
          }
          deleteMany: {
            args: Prisma.ChatAgentTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatAgentTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatAgentTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatAgentTaskPayload>
          }
          aggregate: {
            args: Prisma.ChatAgentTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatAgentTask>
          }
          groupBy: {
            args: Prisma.ChatAgentTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatAgentTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatAgentTaskCountArgs<ExtArgs>
            result: $Utils.Optional<ChatAgentTaskCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      MessageAction: {
        payload: Prisma.$MessageActionPayload<ExtArgs>
        fields: Prisma.MessageActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>
          }
          findFirst: {
            args: Prisma.MessageActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>
          }
          findMany: {
            args: Prisma.MessageActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>[]
          }
          create: {
            args: Prisma.MessageActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>
          }
          createMany: {
            args: Prisma.MessageActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>[]
          }
          delete: {
            args: Prisma.MessageActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>
          }
          update: {
            args: Prisma.MessageActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>
          }
          deleteMany: {
            args: Prisma.MessageActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageActionPayload>
          }
          aggregate: {
            args: Prisma.MessageActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageAction>
          }
          groupBy: {
            args: Prisma.MessageActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageActionCountArgs<ExtArgs>
            result: $Utils.Optional<MessageActionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    businessRiskReportTasks: number
    ChatAgentTask: number
    Document: number
    Folder: number
    workspaceUsers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTasks?: boolean | UserCountOutputTypeCountBusinessRiskReportTasksArgs
    ChatAgentTask?: boolean | UserCountOutputTypeCountChatAgentTaskArgs
    Document?: boolean | UserCountOutputTypeCountDocumentArgs
    Folder?: boolean | UserCountOutputTypeCountFolderArgs
    workspaceUsers?: boolean | UserCountOutputTypeCountWorkspaceUsersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBusinessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatAgentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatAgentTaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFolderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkspaceUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceUserWhereInput
  }


  /**
   * Count Type WorkspaceCountOutputType
   */

  export type WorkspaceCountOutputType = {
    businessRiskReportTasks: number
    chatAgentTask: number
    documents: number
    documentAnalyserTask: number
    entities: number
    invitations: number
    projects: number
    users: number
    workspaceUsers: number
  }

  export type WorkspaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTasks?: boolean | WorkspaceCountOutputTypeCountBusinessRiskReportTasksArgs
    chatAgentTask?: boolean | WorkspaceCountOutputTypeCountChatAgentTaskArgs
    documents?: boolean | WorkspaceCountOutputTypeCountDocumentsArgs
    documentAnalyserTask?: boolean | WorkspaceCountOutputTypeCountDocumentAnalyserTaskArgs
    entities?: boolean | WorkspaceCountOutputTypeCountEntitiesArgs
    invitations?: boolean | WorkspaceCountOutputTypeCountInvitationsArgs
    projects?: boolean | WorkspaceCountOutputTypeCountProjectsArgs
    users?: boolean | WorkspaceCountOutputTypeCountUsersArgs
    workspaceUsers?: boolean | WorkspaceCountOutputTypeCountWorkspaceUsersArgs
  }

  // Custom InputTypes
  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceCountOutputType
     */
    select?: WorkspaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountBusinessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountChatAgentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatAgentTaskWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountDocumentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountEntitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountWorkspaceUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceUserWhereInput
  }


  /**
   * Count Type BusinessRiskReportTaskCountOutputType
   */

  export type BusinessRiskReportTaskCountOutputType = {
    observations: number
    references: number
    relatedEntities: number
  }

  export type BusinessRiskReportTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    observations?: boolean | BusinessRiskReportTaskCountOutputTypeCountObservationsArgs
    references?: boolean | BusinessRiskReportTaskCountOutputTypeCountReferencesArgs
    relatedEntities?: boolean | BusinessRiskReportTaskCountOutputTypeCountRelatedEntitiesArgs
  }

  // Custom InputTypes
  /**
   * BusinessRiskReportTaskCountOutputType without action
   */
  export type BusinessRiskReportTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTaskCountOutputType
     */
    select?: BusinessRiskReportTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BusinessRiskReportTaskCountOutputType without action
   */
  export type BusinessRiskReportTaskCountOutputTypeCountObservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
  }

  /**
   * BusinessRiskReportTaskCountOutputType without action
   */
  export type BusinessRiskReportTaskCountOutputTypeCountReferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferenceWhereInput
  }

  /**
   * BusinessRiskReportTaskCountOutputType without action
   */
  export type BusinessRiskReportTaskCountOutputTypeCountRelatedEntitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
  }


  /**
   * Count Type EntityCountOutputType
   */

  export type EntityCountOutputType = {
    mainBusinessRiskReportTasks: number
    documents: number
    relatedBusinessRiskReportTasks: number
  }

  export type EntityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mainBusinessRiskReportTasks?: boolean | EntityCountOutputTypeCountMainBusinessRiskReportTasksArgs
    documents?: boolean | EntityCountOutputTypeCountDocumentsArgs
    relatedBusinessRiskReportTasks?: boolean | EntityCountOutputTypeCountRelatedBusinessRiskReportTasksArgs
  }

  // Custom InputTypes
  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityCountOutputType
     */
    select?: EntityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeCountMainBusinessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeCountRelatedBusinessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRiskReportTaskWhereInput
  }


  /**
   * Count Type ObservationCountOutputType
   */

  export type ObservationCountOutputType = {
    references: number
  }

  export type ObservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    references?: boolean | ObservationCountOutputTypeCountReferencesArgs
  }

  // Custom InputTypes
  /**
   * ObservationCountOutputType without action
   */
  export type ObservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObservationCountOutputType
     */
    select?: ObservationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ObservationCountOutputType without action
   */
  export type ObservationCountOutputTypeCountReferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferenceWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    businessRiskReportTasks: number
    chatAgent: number
    documents: number
    documentAnalyserTask: number
    entities: number
    folders: number
    observations: number
    references: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTasks?: boolean | ProjectCountOutputTypeCountBusinessRiskReportTasksArgs
    chatAgent?: boolean | ProjectCountOutputTypeCountChatAgentArgs
    documents?: boolean | ProjectCountOutputTypeCountDocumentsArgs
    documentAnalyserTask?: boolean | ProjectCountOutputTypeCountDocumentAnalyserTaskArgs
    entities?: boolean | ProjectCountOutputTypeCountEntitiesArgs
    folders?: boolean | ProjectCountOutputTypeCountFoldersArgs
    observations?: boolean | ProjectCountOutputTypeCountObservationsArgs
    references?: boolean | ProjectCountOutputTypeCountReferencesArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountBusinessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountChatAgentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatAgentTaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDocumentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountEntitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountFoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountObservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountReferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferenceWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    DocumentPage: number
    entity: number
    entities: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DocumentPage?: boolean | DocumentCountOutputTypeCountDocumentPageArgs
    entity?: boolean | DocumentCountOutputTypeCountEntityArgs
    entities?: boolean | DocumentCountOutputTypeCountEntitiesArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountDocumentPageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentPageWhereInput
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountEntityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountEntitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
  }


  /**
   * Count Type FolderCountOutputType
   */

  export type FolderCountOutputType = {
    documents: number
    subfolders: number
  }

  export type FolderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | FolderCountOutputTypeCountDocumentsArgs
    subfolders?: boolean | FolderCountOutputTypeCountSubfoldersArgs
  }

  // Custom InputTypes
  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FolderCountOutputType
     */
    select?: FolderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountSubfoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }


  /**
   * Count Type DocumentAnalyserTaskCountOutputType
   */

  export type DocumentAnalyserTaskCountOutputType = {
    inputDocuments: number
    entities: number
    observations: number
    references: number
  }

  export type DocumentAnalyserTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inputDocuments?: boolean | DocumentAnalyserTaskCountOutputTypeCountInputDocumentsArgs
    entities?: boolean | DocumentAnalyserTaskCountOutputTypeCountEntitiesArgs
    observations?: boolean | DocumentAnalyserTaskCountOutputTypeCountObservationsArgs
    references?: boolean | DocumentAnalyserTaskCountOutputTypeCountReferencesArgs
  }

  // Custom InputTypes
  /**
   * DocumentAnalyserTaskCountOutputType without action
   */
  export type DocumentAnalyserTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTaskCountOutputType
     */
    select?: DocumentAnalyserTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentAnalyserTaskCountOutputType without action
   */
  export type DocumentAnalyserTaskCountOutputTypeCountInputDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * DocumentAnalyserTaskCountOutputType without action
   */
  export type DocumentAnalyserTaskCountOutputTypeCountEntitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
  }

  /**
   * DocumentAnalyserTaskCountOutputType without action
   */
  export type DocumentAnalyserTaskCountOutputTypeCountObservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
  }

  /**
   * DocumentAnalyserTaskCountOutputType without action
   */
  export type DocumentAnalyserTaskCountOutputTypeCountReferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferenceWhereInput
  }


  /**
   * Count Type ChatAgentTaskCountOutputType
   */

  export type ChatAgentTaskCountOutputType = {
    contextDocuments: number
    messages: number
  }

  export type ChatAgentTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contextDocuments?: boolean | ChatAgentTaskCountOutputTypeCountContextDocumentsArgs
    messages?: boolean | ChatAgentTaskCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatAgentTaskCountOutputType without action
   */
  export type ChatAgentTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTaskCountOutputType
     */
    select?: ChatAgentTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatAgentTaskCountOutputType without action
   */
  export type ChatAgentTaskCountOutputTypeCountContextDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ChatAgentTaskCountOutputType without action
   */
  export type ChatAgentTaskCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    messageActions: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messageActions?: boolean | MessageCountOutputTypeCountMessageActionsArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountMessageActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageActionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    activeWorkspaceId: string | null
    profileImage: string | null
    hasVerifiedEmail: boolean | null
    verificationToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    activeWorkspaceId: string | null
    profileImage: string | null
    hasVerifiedEmail: boolean | null
    verificationToken: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    updatedAt: number
    activeWorkspaceId: number
    profileImage: number
    hasVerifiedEmail: number
    verificationToken: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    activeWorkspaceId?: true
    profileImage?: true
    hasVerifiedEmail?: true
    verificationToken?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    activeWorkspaceId?: true
    profileImage?: true
    hasVerifiedEmail?: true
    verificationToken?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    activeWorkspaceId?: true
    profileImage?: true
    hasVerifiedEmail?: true
    verificationToken?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    password: string
    createdAt: Date
    updatedAt: Date
    activeWorkspaceId: string | null
    profileImage: string | null
    hasVerifiedEmail: boolean
    verificationToken: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activeWorkspaceId?: boolean
    profileImage?: boolean
    hasVerifiedEmail?: boolean
    verificationToken?: boolean
    businessRiskReportTasks?: boolean | User$businessRiskReportTasksArgs<ExtArgs>
    ChatAgentTask?: boolean | User$ChatAgentTaskArgs<ExtArgs>
    Document?: boolean | User$DocumentArgs<ExtArgs>
    Folder?: boolean | User$FolderArgs<ExtArgs>
    activeWorkspace?: boolean | User$activeWorkspaceArgs<ExtArgs>
    workspaceUsers?: boolean | User$workspaceUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activeWorkspaceId?: boolean
    profileImage?: boolean
    hasVerifiedEmail?: boolean
    verificationToken?: boolean
    activeWorkspace?: boolean | User$activeWorkspaceArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activeWorkspaceId?: boolean
    profileImage?: boolean
    hasVerifiedEmail?: boolean
    verificationToken?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTasks?: boolean | User$businessRiskReportTasksArgs<ExtArgs>
    ChatAgentTask?: boolean | User$ChatAgentTaskArgs<ExtArgs>
    Document?: boolean | User$DocumentArgs<ExtArgs>
    Folder?: boolean | User$FolderArgs<ExtArgs>
    activeWorkspace?: boolean | User$activeWorkspaceArgs<ExtArgs>
    workspaceUsers?: boolean | User$workspaceUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activeWorkspace?: boolean | User$activeWorkspaceArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      businessRiskReportTasks: Prisma.$BusinessRiskReportTaskPayload<ExtArgs>[]
      ChatAgentTask: Prisma.$ChatAgentTaskPayload<ExtArgs>[]
      Document: Prisma.$DocumentPayload<ExtArgs>[]
      Folder: Prisma.$FolderPayload<ExtArgs>[]
      activeWorkspace: Prisma.$WorkspacePayload<ExtArgs> | null
      workspaceUsers: Prisma.$WorkspaceUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      password: string
      createdAt: Date
      updatedAt: Date
      activeWorkspaceId: string | null
      profileImage: string | null
      hasVerifiedEmail: boolean
      verificationToken: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businessRiskReportTasks<T extends User$businessRiskReportTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$businessRiskReportTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findMany"> | Null>
    ChatAgentTask<T extends User$ChatAgentTaskArgs<ExtArgs> = {}>(args?: Subset<T, User$ChatAgentTaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findMany"> | Null>
    Document<T extends User$DocumentArgs<ExtArgs> = {}>(args?: Subset<T, User$DocumentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    Folder<T extends User$FolderArgs<ExtArgs> = {}>(args?: Subset<T, User$FolderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany"> | Null>
    activeWorkspace<T extends User$activeWorkspaceArgs<ExtArgs> = {}>(args?: Subset<T, User$activeWorkspaceArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    workspaceUsers<T extends User$workspaceUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$workspaceUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly activeWorkspaceId: FieldRef<"User", 'String'>
    readonly profileImage: FieldRef<"User", 'String'>
    readonly hasVerifiedEmail: FieldRef<"User", 'Boolean'>
    readonly verificationToken: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.businessRiskReportTasks
   */
  export type User$businessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    where?: BusinessRiskReportTaskWhereInput
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * User.ChatAgentTask
   */
  export type User$ChatAgentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    where?: ChatAgentTaskWhereInput
    orderBy?: ChatAgentTaskOrderByWithRelationInput | ChatAgentTaskOrderByWithRelationInput[]
    cursor?: ChatAgentTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatAgentTaskScalarFieldEnum | ChatAgentTaskScalarFieldEnum[]
  }

  /**
   * User.Document
   */
  export type User$DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.Folder
   */
  export type User$FolderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * User.activeWorkspace
   */
  export type User$activeWorkspaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    where?: WorkspaceWhereInput
  }

  /**
   * User.workspaceUsers
   */
  export type User$workspaceUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    where?: WorkspaceUserWhereInput
    orderBy?: WorkspaceUserOrderByWithRelationInput | WorkspaceUserOrderByWithRelationInput[]
    cursor?: WorkspaceUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceUserScalarFieldEnum | WorkspaceUserScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Workspace
   */

  export type AggregateWorkspace = {
    _count: WorkspaceCountAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  export type WorkspaceMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    language: string | null
  }

  export type WorkspaceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    language: string | null
  }

  export type WorkspaceCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    language: number
    _all: number
  }


  export type WorkspaceMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    language?: true
  }

  export type WorkspaceMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    language?: true
  }

  export type WorkspaceCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    language?: true
    _all?: true
  }

  export type WorkspaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspace to aggregate.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workspaces
    **/
    _count?: true | WorkspaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceMaxAggregateInputType
  }

  export type GetWorkspaceAggregateType<T extends WorkspaceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspace[P]>
      : GetScalarType<T[P], AggregateWorkspace[P]>
  }




  export type WorkspaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceWhereInput
    orderBy?: WorkspaceOrderByWithAggregationInput | WorkspaceOrderByWithAggregationInput[]
    by: WorkspaceScalarFieldEnum[] | WorkspaceScalarFieldEnum
    having?: WorkspaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceCountAggregateInputType | true
    _min?: WorkspaceMinAggregateInputType
    _max?: WorkspaceMaxAggregateInputType
  }

  export type WorkspaceGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    language: string | null
    _count: WorkspaceCountAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  type GetWorkspaceGroupByPayload<T extends WorkspaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    language?: boolean
    businessRiskReportTasks?: boolean | Workspace$businessRiskReportTasksArgs<ExtArgs>
    chatAgentTask?: boolean | Workspace$chatAgentTaskArgs<ExtArgs>
    documents?: boolean | Workspace$documentsArgs<ExtArgs>
    documentAnalyserTask?: boolean | Workspace$documentAnalyserTaskArgs<ExtArgs>
    entities?: boolean | Workspace$entitiesArgs<ExtArgs>
    invitations?: boolean | Workspace$invitationsArgs<ExtArgs>
    projects?: boolean | Workspace$projectsArgs<ExtArgs>
    users?: boolean | Workspace$usersArgs<ExtArgs>
    workspaceUsers?: boolean | Workspace$workspaceUsersArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    language?: boolean
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    language?: boolean
  }

  export type WorkspaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTasks?: boolean | Workspace$businessRiskReportTasksArgs<ExtArgs>
    chatAgentTask?: boolean | Workspace$chatAgentTaskArgs<ExtArgs>
    documents?: boolean | Workspace$documentsArgs<ExtArgs>
    documentAnalyserTask?: boolean | Workspace$documentAnalyserTaskArgs<ExtArgs>
    entities?: boolean | Workspace$entitiesArgs<ExtArgs>
    invitations?: boolean | Workspace$invitationsArgs<ExtArgs>
    projects?: boolean | Workspace$projectsArgs<ExtArgs>
    users?: boolean | Workspace$usersArgs<ExtArgs>
    workspaceUsers?: boolean | Workspace$workspaceUsersArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkspaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkspacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workspace"
    objects: {
      businessRiskReportTasks: Prisma.$BusinessRiskReportTaskPayload<ExtArgs>[]
      chatAgentTask: Prisma.$ChatAgentTaskPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      documentAnalyserTask: Prisma.$DocumentAnalyserTaskPayload<ExtArgs>[]
      entities: Prisma.$EntityPayload<ExtArgs>[]
      invitations: Prisma.$InvitationPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      workspaceUsers: Prisma.$WorkspaceUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      language: string | null
    }, ExtArgs["result"]["workspace"]>
    composites: {}
  }

  type WorkspaceGetPayload<S extends boolean | null | undefined | WorkspaceDefaultArgs> = $Result.GetResult<Prisma.$WorkspacePayload, S>

  type WorkspaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkspaceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkspaceCountAggregateInputType | true
    }

  export interface WorkspaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workspace'], meta: { name: 'Workspace' } }
    /**
     * Find zero or one Workspace that matches the filter.
     * @param {WorkspaceFindUniqueArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceFindUniqueArgs>(args: SelectSubset<T, WorkspaceFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Workspace that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkspaceFindUniqueOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Workspace that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceFindFirstArgs>(args?: SelectSubset<T, WorkspaceFindFirstArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Workspace that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Workspaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workspaces
     * const workspaces = await prisma.workspace.findMany()
     * 
     * // Get first 10 Workspaces
     * const workspaces = await prisma.workspace.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceWithIdOnly = await prisma.workspace.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceFindManyArgs>(args?: SelectSubset<T, WorkspaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Workspace.
     * @param {WorkspaceCreateArgs} args - Arguments to create a Workspace.
     * @example
     * // Create one Workspace
     * const Workspace = await prisma.workspace.create({
     *   data: {
     *     // ... data to create a Workspace
     *   }
     * })
     * 
     */
    create<T extends WorkspaceCreateArgs>(args: SelectSubset<T, WorkspaceCreateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Workspaces.
     * @param {WorkspaceCreateManyArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceCreateManyArgs>(args?: SelectSubset<T, WorkspaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workspaces and returns the data saved in the database.
     * @param {WorkspaceCreateManyAndReturnArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Workspace.
     * @param {WorkspaceDeleteArgs} args - Arguments to delete one Workspace.
     * @example
     * // Delete one Workspace
     * const Workspace = await prisma.workspace.delete({
     *   where: {
     *     // ... filter to delete one Workspace
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceDeleteArgs>(args: SelectSubset<T, WorkspaceDeleteArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Workspace.
     * @param {WorkspaceUpdateArgs} args - Arguments to update one Workspace.
     * @example
     * // Update one Workspace
     * const workspace = await prisma.workspace.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceUpdateArgs>(args: SelectSubset<T, WorkspaceUpdateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Workspaces.
     * @param {WorkspaceDeleteManyArgs} args - Arguments to filter Workspaces to delete.
     * @example
     * // Delete a few Workspaces
     * const { count } = await prisma.workspace.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceDeleteManyArgs>(args?: SelectSubset<T, WorkspaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceUpdateManyArgs>(args: SelectSubset<T, WorkspaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workspace.
     * @param {WorkspaceUpsertArgs} args - Arguments to update or create a Workspace.
     * @example
     * // Update or create a Workspace
     * const workspace = await prisma.workspace.upsert({
     *   create: {
     *     // ... data to create a Workspace
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workspace we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceUpsertArgs>(args: SelectSubset<T, WorkspaceUpsertArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceCountArgs} args - Arguments to filter Workspaces to count.
     * @example
     * // Count the number of Workspaces
     * const count = await prisma.workspace.count({
     *   where: {
     *     // ... the filter for the Workspaces we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceCountArgs>(
      args?: Subset<T, WorkspaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceAggregateArgs>(args: Subset<T, WorkspaceAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceAggregateType<T>>

    /**
     * Group by Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workspace model
   */
  readonly fields: WorkspaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workspace.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businessRiskReportTasks<T extends Workspace$businessRiskReportTasksArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$businessRiskReportTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findMany"> | Null>
    chatAgentTask<T extends Workspace$chatAgentTaskArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$chatAgentTaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Workspace$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    documentAnalyserTask<T extends Workspace$documentAnalyserTaskArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$documentAnalyserTaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findMany"> | Null>
    entities<T extends Workspace$entitiesArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$entitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany"> | Null>
    invitations<T extends Workspace$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany"> | Null>
    projects<T extends Workspace$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends Workspace$usersArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    workspaceUsers<T extends Workspace$workspaceUsersArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$workspaceUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workspace model
   */ 
  interface WorkspaceFieldRefs {
    readonly id: FieldRef<"Workspace", 'String'>
    readonly name: FieldRef<"Workspace", 'String'>
    readonly createdAt: FieldRef<"Workspace", 'DateTime'>
    readonly updatedAt: FieldRef<"Workspace", 'DateTime'>
    readonly language: FieldRef<"Workspace", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Workspace findUnique
   */
  export type WorkspaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findUniqueOrThrow
   */
  export type WorkspaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findFirst
   */
  export type WorkspaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findFirstOrThrow
   */
  export type WorkspaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findMany
   */
  export type WorkspaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspaces to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace create
   */
  export type WorkspaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Workspace.
     */
    data: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
  }

  /**
   * Workspace createMany
   */
  export type WorkspaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workspace createManyAndReturn
   */
  export type WorkspaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workspace update
   */
  export type WorkspaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Workspace.
     */
    data: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
    /**
     * Choose, which Workspace to update.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace updateMany
   */
  export type WorkspaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workspaces.
     */
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyInput>
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput
  }

  /**
   * Workspace upsert
   */
  export type WorkspaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Workspace to update in case it exists.
     */
    where: WorkspaceWhereUniqueInput
    /**
     * In case the Workspace found by the `where` argument doesn't exist, create a new Workspace with this data.
     */
    create: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
    /**
     * In case the Workspace was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
  }

  /**
   * Workspace delete
   */
  export type WorkspaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter which Workspace to delete.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace deleteMany
   */
  export type WorkspaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspaces to delete
     */
    where?: WorkspaceWhereInput
  }

  /**
   * Workspace.businessRiskReportTasks
   */
  export type Workspace$businessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    where?: BusinessRiskReportTaskWhereInput
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * Workspace.chatAgentTask
   */
  export type Workspace$chatAgentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    where?: ChatAgentTaskWhereInput
    orderBy?: ChatAgentTaskOrderByWithRelationInput | ChatAgentTaskOrderByWithRelationInput[]
    cursor?: ChatAgentTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatAgentTaskScalarFieldEnum | ChatAgentTaskScalarFieldEnum[]
  }

  /**
   * Workspace.documents
   */
  export type Workspace$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Workspace.documentAnalyserTask
   */
  export type Workspace$documentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    where?: DocumentAnalyserTaskWhereInput
    orderBy?: DocumentAnalyserTaskOrderByWithRelationInput | DocumentAnalyserTaskOrderByWithRelationInput[]
    cursor?: DocumentAnalyserTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentAnalyserTaskScalarFieldEnum | DocumentAnalyserTaskScalarFieldEnum[]
  }

  /**
   * Workspace.entities
   */
  export type Workspace$entitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    cursor?: EntityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Workspace.invitations
   */
  export type Workspace$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Workspace.projects
   */
  export type Workspace$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Workspace.users
   */
  export type Workspace$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Workspace.workspaceUsers
   */
  export type Workspace$workspaceUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    where?: WorkspaceUserWhereInput
    orderBy?: WorkspaceUserOrderByWithRelationInput | WorkspaceUserOrderByWithRelationInput[]
    cursor?: WorkspaceUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceUserScalarFieldEnum | WorkspaceUserScalarFieldEnum[]
  }

  /**
   * Workspace without action
   */
  export type WorkspaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
  }


  /**
   * Model WorkspaceUser
   */

  export type AggregateWorkspaceUser = {
    _count: WorkspaceUserCountAggregateOutputType | null
    _min: WorkspaceUserMinAggregateOutputType | null
    _max: WorkspaceUserMaxAggregateOutputType | null
  }

  export type WorkspaceUserMinAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    userId: string | null
    role: $Enums.WorkspaceRole | null
  }

  export type WorkspaceUserMaxAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    userId: string | null
    role: $Enums.WorkspaceRole | null
  }

  export type WorkspaceUserCountAggregateOutputType = {
    id: number
    workspaceId: number
    userId: number
    role: number
    _all: number
  }


  export type WorkspaceUserMinAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    role?: true
  }

  export type WorkspaceUserMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    role?: true
  }

  export type WorkspaceUserCountAggregateInputType = {
    id?: true
    workspaceId?: true
    userId?: true
    role?: true
    _all?: true
  }

  export type WorkspaceUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceUser to aggregate.
     */
    where?: WorkspaceUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsers to fetch.
     */
    orderBy?: WorkspaceUserOrderByWithRelationInput | WorkspaceUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceUsers
    **/
    _count?: true | WorkspaceUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceUserMaxAggregateInputType
  }

  export type GetWorkspaceUserAggregateType<T extends WorkspaceUserAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceUser[P]>
      : GetScalarType<T[P], AggregateWorkspaceUser[P]>
  }




  export type WorkspaceUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceUserWhereInput
    orderBy?: WorkspaceUserOrderByWithAggregationInput | WorkspaceUserOrderByWithAggregationInput[]
    by: WorkspaceUserScalarFieldEnum[] | WorkspaceUserScalarFieldEnum
    having?: WorkspaceUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceUserCountAggregateInputType | true
    _min?: WorkspaceUserMinAggregateInputType
    _max?: WorkspaceUserMaxAggregateInputType
  }

  export type WorkspaceUserGroupByOutputType = {
    id: string
    workspaceId: string
    userId: string
    role: $Enums.WorkspaceRole
    _count: WorkspaceUserCountAggregateOutputType | null
    _min: WorkspaceUserMinAggregateOutputType | null
    _max: WorkspaceUserMaxAggregateOutputType | null
  }

  type GetWorkspaceUserGroupByPayload<T extends WorkspaceUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceUserGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceUserGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    userId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceUser"]>

  export type WorkspaceUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    userId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceUser"]>

  export type WorkspaceUserSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    userId?: boolean
    role?: boolean
  }

  export type WorkspaceUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspaceUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $WorkspaceUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      workspace: Prisma.$WorkspacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workspaceId: string
      userId: string
      role: $Enums.WorkspaceRole
    }, ExtArgs["result"]["workspaceUser"]>
    composites: {}
  }

  type WorkspaceUserGetPayload<S extends boolean | null | undefined | WorkspaceUserDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceUserPayload, S>

  type WorkspaceUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkspaceUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkspaceUserCountAggregateInputType | true
    }

  export interface WorkspaceUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceUser'], meta: { name: 'WorkspaceUser' } }
    /**
     * Find zero or one WorkspaceUser that matches the filter.
     * @param {WorkspaceUserFindUniqueArgs} args - Arguments to find a WorkspaceUser
     * @example
     * // Get one WorkspaceUser
     * const workspaceUser = await prisma.workspaceUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceUserFindUniqueArgs>(args: SelectSubset<T, WorkspaceUserFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkspaceUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkspaceUserFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceUser
     * @example
     * // Get one WorkspaceUser
     * const workspaceUser = await prisma.workspaceUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceUserFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkspaceUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUserFindFirstArgs} args - Arguments to find a WorkspaceUser
     * @example
     * // Get one WorkspaceUser
     * const workspaceUser = await prisma.workspaceUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceUserFindFirstArgs>(args?: SelectSubset<T, WorkspaceUserFindFirstArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkspaceUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUserFindFirstOrThrowArgs} args - Arguments to find a WorkspaceUser
     * @example
     * // Get one WorkspaceUser
     * const workspaceUser = await prisma.workspaceUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceUserFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkspaceUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceUsers
     * const workspaceUsers = await prisma.workspaceUser.findMany()
     * 
     * // Get first 10 WorkspaceUsers
     * const workspaceUsers = await prisma.workspaceUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceUserWithIdOnly = await prisma.workspaceUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceUserFindManyArgs>(args?: SelectSubset<T, WorkspaceUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkspaceUser.
     * @param {WorkspaceUserCreateArgs} args - Arguments to create a WorkspaceUser.
     * @example
     * // Create one WorkspaceUser
     * const WorkspaceUser = await prisma.workspaceUser.create({
     *   data: {
     *     // ... data to create a WorkspaceUser
     *   }
     * })
     * 
     */
    create<T extends WorkspaceUserCreateArgs>(args: SelectSubset<T, WorkspaceUserCreateArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkspaceUsers.
     * @param {WorkspaceUserCreateManyArgs} args - Arguments to create many WorkspaceUsers.
     * @example
     * // Create many WorkspaceUsers
     * const workspaceUser = await prisma.workspaceUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceUserCreateManyArgs>(args?: SelectSubset<T, WorkspaceUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceUsers and returns the data saved in the database.
     * @param {WorkspaceUserCreateManyAndReturnArgs} args - Arguments to create many WorkspaceUsers.
     * @example
     * // Create many WorkspaceUsers
     * const workspaceUser = await prisma.workspaceUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceUsers and only return the `id`
     * const workspaceUserWithIdOnly = await prisma.workspaceUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceUserCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkspaceUser.
     * @param {WorkspaceUserDeleteArgs} args - Arguments to delete one WorkspaceUser.
     * @example
     * // Delete one WorkspaceUser
     * const WorkspaceUser = await prisma.workspaceUser.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceUser
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceUserDeleteArgs>(args: SelectSubset<T, WorkspaceUserDeleteArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkspaceUser.
     * @param {WorkspaceUserUpdateArgs} args - Arguments to update one WorkspaceUser.
     * @example
     * // Update one WorkspaceUser
     * const workspaceUser = await prisma.workspaceUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceUserUpdateArgs>(args: SelectSubset<T, WorkspaceUserUpdateArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkspaceUsers.
     * @param {WorkspaceUserDeleteManyArgs} args - Arguments to filter WorkspaceUsers to delete.
     * @example
     * // Delete a few WorkspaceUsers
     * const { count } = await prisma.workspaceUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceUserDeleteManyArgs>(args?: SelectSubset<T, WorkspaceUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceUsers
     * const workspaceUser = await prisma.workspaceUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceUserUpdateManyArgs>(args: SelectSubset<T, WorkspaceUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkspaceUser.
     * @param {WorkspaceUserUpsertArgs} args - Arguments to update or create a WorkspaceUser.
     * @example
     * // Update or create a WorkspaceUser
     * const workspaceUser = await prisma.workspaceUser.upsert({
     *   create: {
     *     // ... data to create a WorkspaceUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceUser we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceUserUpsertArgs>(args: SelectSubset<T, WorkspaceUserUpsertArgs<ExtArgs>>): Prisma__WorkspaceUserClient<$Result.GetResult<Prisma.$WorkspaceUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkspaceUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUserCountArgs} args - Arguments to filter WorkspaceUsers to count.
     * @example
     * // Count the number of WorkspaceUsers
     * const count = await prisma.workspaceUser.count({
     *   where: {
     *     // ... the filter for the WorkspaceUsers we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceUserCountArgs>(
      args?: Subset<T, WorkspaceUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceUserAggregateArgs>(args: Subset<T, WorkspaceUserAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceUserAggregateType<T>>

    /**
     * Group by WorkspaceUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceUserGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceUser model
   */
  readonly fields: WorkspaceUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceUser model
   */ 
  interface WorkspaceUserFieldRefs {
    readonly id: FieldRef<"WorkspaceUser", 'String'>
    readonly workspaceId: FieldRef<"WorkspaceUser", 'String'>
    readonly userId: FieldRef<"WorkspaceUser", 'String'>
    readonly role: FieldRef<"WorkspaceUser", 'WorkspaceRole'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceUser findUnique
   */
  export type WorkspaceUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUser to fetch.
     */
    where: WorkspaceUserWhereUniqueInput
  }

  /**
   * WorkspaceUser findUniqueOrThrow
   */
  export type WorkspaceUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUser to fetch.
     */
    where: WorkspaceUserWhereUniqueInput
  }

  /**
   * WorkspaceUser findFirst
   */
  export type WorkspaceUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUser to fetch.
     */
    where?: WorkspaceUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsers to fetch.
     */
    orderBy?: WorkspaceUserOrderByWithRelationInput | WorkspaceUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceUsers.
     */
    cursor?: WorkspaceUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceUsers.
     */
    distinct?: WorkspaceUserScalarFieldEnum | WorkspaceUserScalarFieldEnum[]
  }

  /**
   * WorkspaceUser findFirstOrThrow
   */
  export type WorkspaceUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUser to fetch.
     */
    where?: WorkspaceUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsers to fetch.
     */
    orderBy?: WorkspaceUserOrderByWithRelationInput | WorkspaceUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceUsers.
     */
    cursor?: WorkspaceUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceUsers.
     */
    distinct?: WorkspaceUserScalarFieldEnum | WorkspaceUserScalarFieldEnum[]
  }

  /**
   * WorkspaceUser findMany
   */
  export type WorkspaceUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceUsers to fetch.
     */
    where?: WorkspaceUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUsers to fetch.
     */
    orderBy?: WorkspaceUserOrderByWithRelationInput | WorkspaceUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceUsers.
     */
    cursor?: WorkspaceUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUsers.
     */
    skip?: number
    distinct?: WorkspaceUserScalarFieldEnum | WorkspaceUserScalarFieldEnum[]
  }

  /**
   * WorkspaceUser create
   */
  export type WorkspaceUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceUser.
     */
    data: XOR<WorkspaceUserCreateInput, WorkspaceUserUncheckedCreateInput>
  }

  /**
   * WorkspaceUser createMany
   */
  export type WorkspaceUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceUsers.
     */
    data: WorkspaceUserCreateManyInput | WorkspaceUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspaceUser createManyAndReturn
   */
  export type WorkspaceUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkspaceUsers.
     */
    data: WorkspaceUserCreateManyInput | WorkspaceUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceUser update
   */
  export type WorkspaceUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceUser.
     */
    data: XOR<WorkspaceUserUpdateInput, WorkspaceUserUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceUser to update.
     */
    where: WorkspaceUserWhereUniqueInput
  }

  /**
   * WorkspaceUser updateMany
   */
  export type WorkspaceUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceUsers.
     */
    data: XOR<WorkspaceUserUpdateManyMutationInput, WorkspaceUserUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceUsers to update
     */
    where?: WorkspaceUserWhereInput
  }

  /**
   * WorkspaceUser upsert
   */
  export type WorkspaceUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceUser to update in case it exists.
     */
    where: WorkspaceUserWhereUniqueInput
    /**
     * In case the WorkspaceUser found by the `where` argument doesn't exist, create a new WorkspaceUser with this data.
     */
    create: XOR<WorkspaceUserCreateInput, WorkspaceUserUncheckedCreateInput>
    /**
     * In case the WorkspaceUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUserUpdateInput, WorkspaceUserUncheckedUpdateInput>
  }

  /**
   * WorkspaceUser delete
   */
  export type WorkspaceUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceUser to delete.
     */
    where: WorkspaceUserWhereUniqueInput
  }

  /**
   * WorkspaceUser deleteMany
   */
  export type WorkspaceUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceUsers to delete
     */
    where?: WorkspaceUserWhereInput
  }

  /**
   * WorkspaceUser without action
   */
  export type WorkspaceUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUser
     */
    select?: WorkspaceUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceUserInclude<ExtArgs> | null
  }


  /**
   * Model Invitation
   */

  export type AggregateInvitation = {
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  export type InvitationMinAggregateOutputType = {
    id: string | null
    email: string | null
    workspaceId: string | null
    role: $Enums.WorkspaceRole | null
    token: string | null
    createdAt: Date | null
    expiresAt: Date | null
    accepted: boolean | null
  }

  export type InvitationMaxAggregateOutputType = {
    id: string | null
    email: string | null
    workspaceId: string | null
    role: $Enums.WorkspaceRole | null
    token: string | null
    createdAt: Date | null
    expiresAt: Date | null
    accepted: boolean | null
  }

  export type InvitationCountAggregateOutputType = {
    id: number
    email: number
    workspaceId: number
    role: number
    token: number
    createdAt: number
    expiresAt: number
    accepted: number
    _all: number
  }


  export type InvitationMinAggregateInputType = {
    id?: true
    email?: true
    workspaceId?: true
    role?: true
    token?: true
    createdAt?: true
    expiresAt?: true
    accepted?: true
  }

  export type InvitationMaxAggregateInputType = {
    id?: true
    email?: true
    workspaceId?: true
    role?: true
    token?: true
    createdAt?: true
    expiresAt?: true
    accepted?: true
  }

  export type InvitationCountAggregateInputType = {
    id?: true
    email?: true
    workspaceId?: true
    role?: true
    token?: true
    createdAt?: true
    expiresAt?: true
    accepted?: true
    _all?: true
  }

  export type InvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitation to aggregate.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMaxAggregateInputType
  }

  export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
      : GetScalarType<T[P], AggregateInvitation[P]>
  }




  export type InvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithAggregationInput | InvitationOrderByWithAggregationInput[]
    by: InvitationScalarFieldEnum[] | InvitationScalarFieldEnum
    having?: InvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationCountAggregateInputType | true
    _min?: InvitationMinAggregateInputType
    _max?: InvitationMaxAggregateInputType
  }

  export type InvitationGroupByOutputType = {
    id: string
    email: string
    workspaceId: string
    role: $Enums.WorkspaceRole
    token: string
    createdAt: Date
    expiresAt: Date
    accepted: boolean
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationGroupByOutputType[P]>
        }
      >
    >


  export type InvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    workspaceId?: boolean
    role?: boolean
    token?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    accepted?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    workspaceId?: boolean
    role?: boolean
    token?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    accepted?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectScalar = {
    id?: boolean
    email?: boolean
    workspaceId?: boolean
    role?: boolean
    token?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    accepted?: boolean
  }

  export type InvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $InvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invitation"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      workspaceId: string
      role: $Enums.WorkspaceRole
      token: string
      createdAt: Date
      expiresAt: Date
      accepted: boolean
    }, ExtArgs["result"]["invitation"]>
    composites: {}
  }

  type InvitationGetPayload<S extends boolean | null | undefined | InvitationDefaultArgs> = $Result.GetResult<Prisma.$InvitationPayload, S>

  type InvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvitationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvitationCountAggregateInputType | true
    }

  export interface InvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitation'], meta: { name: 'Invitation' } }
    /**
     * Find zero or one Invitation that matches the filter.
     * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationFindUniqueArgs>(args: SelectSubset<T, InvitationFindUniqueArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Invitation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InvitationFindUniqueOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Invitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationFindFirstArgs>(args?: SelectSubset<T, InvitationFindFirstArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Invitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitation.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationWithIdOnly = await prisma.invitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvitationFindManyArgs>(args?: SelectSubset<T, InvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Invitation.
     * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
     * @example
     * // Create one Invitation
     * const Invitation = await prisma.invitation.create({
     *   data: {
     *     // ... data to create a Invitation
     *   }
     * })
     * 
     */
    create<T extends InvitationCreateArgs>(args: SelectSubset<T, InvitationCreateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Invitations.
     * @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvitationCreateManyArgs>(args?: SelectSubset<T, InvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invitations and returns the data saved in the database.
     * @param {InvitationCreateManyAndReturnArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, InvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Invitation.
     * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
     * @example
     * // Delete one Invitation
     * const Invitation = await prisma.invitation.delete({
     *   where: {
     *     // ... filter to delete one Invitation
     *   }
     * })
     * 
     */
    delete<T extends InvitationDeleteArgs>(args: SelectSubset<T, InvitationDeleteArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Invitation.
     * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
     * @example
     * // Update one Invitation
     * const invitation = await prisma.invitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvitationUpdateArgs>(args: SelectSubset<T, InvitationUpdateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvitationDeleteManyArgs>(args?: SelectSubset<T, InvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvitationUpdateManyArgs>(args: SelectSubset<T, InvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invitation.
     * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
     * @example
     * // Update or create a Invitation
     * const invitation = await prisma.invitation.upsert({
     *   create: {
     *     // ... data to create a Invitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitation we want to update
     *   }
     * })
     */
    upsert<T extends InvitationUpsertArgs>(args: SelectSubset<T, InvitationUpsertArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitation.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationCountArgs>(
      args?: Subset<T, InvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): Prisma.PrismaPromise<GetInvitationAggregateType<T>>

    /**
     * Group by Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invitation model
   */
  readonly fields: InvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invitation model
   */ 
  interface InvitationFieldRefs {
    readonly id: FieldRef<"Invitation", 'String'>
    readonly email: FieldRef<"Invitation", 'String'>
    readonly workspaceId: FieldRef<"Invitation", 'String'>
    readonly role: FieldRef<"Invitation", 'WorkspaceRole'>
    readonly token: FieldRef<"Invitation", 'String'>
    readonly createdAt: FieldRef<"Invitation", 'DateTime'>
    readonly expiresAt: FieldRef<"Invitation", 'DateTime'>
    readonly accepted: FieldRef<"Invitation", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Invitation findUnique
   */
  export type InvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findUniqueOrThrow
   */
  export type InvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findFirst
   */
  export type InvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findFirstOrThrow
   */
  export type InvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findMany
   */
  export type InvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation create
   */
  export type InvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a Invitation.
     */
    data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
  }

  /**
   * Invitation createMany
   */
  export type InvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invitation createManyAndReturn
   */
  export type InvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation update
   */
  export type InvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a Invitation.
     */
    data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    /**
     * Choose, which Invitation to update.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation updateMany
   */
  export type InvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
  }

  /**
   * Invitation upsert
   */
  export type InvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the Invitation to update in case it exists.
     */
    where: InvitationWhereUniqueInput
    /**
     * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
     */
    create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    /**
     * In case the Invitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
  }

  /**
   * Invitation delete
   */
  export type InvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter which Invitation to delete.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation deleteMany
   */
  export type InvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to delete
     */
    where?: InvitationWhereInput
  }

  /**
   * Invitation without action
   */
  export type InvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
  }


  /**
   * Model BusinessRiskReportTask
   */

  export type AggregateBusinessRiskReportTask = {
    _count: BusinessRiskReportTaskCountAggregateOutputType | null
    _avg: BusinessRiskReportTaskAvgAggregateOutputType | null
    _sum: BusinessRiskReportTaskSumAggregateOutputType | null
    _min: BusinessRiskReportTaskMinAggregateOutputType | null
    _max: BusinessRiskReportTaskMaxAggregateOutputType | null
  }

  export type BusinessRiskReportTaskAvgAggregateOutputType = {
    displayId: number | null
  }

  export type BusinessRiskReportTaskSumAggregateOutputType = {
    displayId: number | null
  }

  export type BusinessRiskReportTaskMinAggregateOutputType = {
    id: string | null
    reportName: string | null
    generalDescription: string | null
    natureOfBusiness: string | null
    geography: string | null
    riskOverview: string | null
    inputUrl: string | null
    createdById: string | null
    workspaceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: $Enums.BusinessRiskReportTaskStatus | null
    mainEntityId: string | null
    displayId: number | null
    projectId: string | null
  }

  export type BusinessRiskReportTaskMaxAggregateOutputType = {
    id: string | null
    reportName: string | null
    generalDescription: string | null
    natureOfBusiness: string | null
    geography: string | null
    riskOverview: string | null
    inputUrl: string | null
    createdById: string | null
    workspaceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: $Enums.BusinessRiskReportTaskStatus | null
    mainEntityId: string | null
    displayId: number | null
    projectId: string | null
  }

  export type BusinessRiskReportTaskCountAggregateOutputType = {
    id: number
    reportName: number
    generalDescription: number
    natureOfBusiness: number
    geography: number
    riskOverview: number
    nextSteps: number
    inputUrl: number
    createdById: number
    workspaceId: number
    createdAt: number
    updatedAt: number
    status: number
    mainEntityId: number
    displayId: number
    projectId: number
    _all: number
  }


  export type BusinessRiskReportTaskAvgAggregateInputType = {
    displayId?: true
  }

  export type BusinessRiskReportTaskSumAggregateInputType = {
    displayId?: true
  }

  export type BusinessRiskReportTaskMinAggregateInputType = {
    id?: true
    reportName?: true
    generalDescription?: true
    natureOfBusiness?: true
    geography?: true
    riskOverview?: true
    inputUrl?: true
    createdById?: true
    workspaceId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    mainEntityId?: true
    displayId?: true
    projectId?: true
  }

  export type BusinessRiskReportTaskMaxAggregateInputType = {
    id?: true
    reportName?: true
    generalDescription?: true
    natureOfBusiness?: true
    geography?: true
    riskOverview?: true
    inputUrl?: true
    createdById?: true
    workspaceId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    mainEntityId?: true
    displayId?: true
    projectId?: true
  }

  export type BusinessRiskReportTaskCountAggregateInputType = {
    id?: true
    reportName?: true
    generalDescription?: true
    natureOfBusiness?: true
    geography?: true
    riskOverview?: true
    nextSteps?: true
    inputUrl?: true
    createdById?: true
    workspaceId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    mainEntityId?: true
    displayId?: true
    projectId?: true
    _all?: true
  }

  export type BusinessRiskReportTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessRiskReportTask to aggregate.
     */
    where?: BusinessRiskReportTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRiskReportTasks to fetch.
     */
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRiskReportTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRiskReportTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessRiskReportTasks
    **/
    _count?: true | BusinessRiskReportTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BusinessRiskReportTaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BusinessRiskReportTaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessRiskReportTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessRiskReportTaskMaxAggregateInputType
  }

  export type GetBusinessRiskReportTaskAggregateType<T extends BusinessRiskReportTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessRiskReportTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessRiskReportTask[P]>
      : GetScalarType<T[P], AggregateBusinessRiskReportTask[P]>
  }




  export type BusinessRiskReportTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRiskReportTaskWhereInput
    orderBy?: BusinessRiskReportTaskOrderByWithAggregationInput | BusinessRiskReportTaskOrderByWithAggregationInput[]
    by: BusinessRiskReportTaskScalarFieldEnum[] | BusinessRiskReportTaskScalarFieldEnum
    having?: BusinessRiskReportTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessRiskReportTaskCountAggregateInputType | true
    _avg?: BusinessRiskReportTaskAvgAggregateInputType
    _sum?: BusinessRiskReportTaskSumAggregateInputType
    _min?: BusinessRiskReportTaskMinAggregateInputType
    _max?: BusinessRiskReportTaskMaxAggregateInputType
  }

  export type BusinessRiskReportTaskGroupByOutputType = {
    id: string
    reportName: string | null
    generalDescription: string | null
    natureOfBusiness: string | null
    geography: string | null
    riskOverview: string | null
    nextSteps: string[]
    inputUrl: string | null
    createdById: string
    workspaceId: string
    createdAt: Date
    updatedAt: Date
    status: $Enums.BusinessRiskReportTaskStatus
    mainEntityId: string | null
    displayId: number
    projectId: string | null
    _count: BusinessRiskReportTaskCountAggregateOutputType | null
    _avg: BusinessRiskReportTaskAvgAggregateOutputType | null
    _sum: BusinessRiskReportTaskSumAggregateOutputType | null
    _min: BusinessRiskReportTaskMinAggregateOutputType | null
    _max: BusinessRiskReportTaskMaxAggregateOutputType | null
  }

  type GetBusinessRiskReportTaskGroupByPayload<T extends BusinessRiskReportTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessRiskReportTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessRiskReportTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessRiskReportTaskGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessRiskReportTaskGroupByOutputType[P]>
        }
      >
    >


  export type BusinessRiskReportTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportName?: boolean
    generalDescription?: boolean
    natureOfBusiness?: boolean
    geography?: boolean
    riskOverview?: boolean
    nextSteps?: boolean
    inputUrl?: boolean
    createdById?: boolean
    workspaceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    mainEntityId?: boolean
    displayId?: boolean
    projectId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    mainEntity?: boolean | BusinessRiskReportTask$mainEntityArgs<ExtArgs>
    project?: boolean | BusinessRiskReportTask$projectArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    observations?: boolean | BusinessRiskReportTask$observationsArgs<ExtArgs>
    references?: boolean | BusinessRiskReportTask$referencesArgs<ExtArgs>
    relatedEntities?: boolean | BusinessRiskReportTask$relatedEntitiesArgs<ExtArgs>
    _count?: boolean | BusinessRiskReportTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessRiskReportTask"]>

  export type BusinessRiskReportTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportName?: boolean
    generalDescription?: boolean
    natureOfBusiness?: boolean
    geography?: boolean
    riskOverview?: boolean
    nextSteps?: boolean
    inputUrl?: boolean
    createdById?: boolean
    workspaceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    mainEntityId?: boolean
    displayId?: boolean
    projectId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    mainEntity?: boolean | BusinessRiskReportTask$mainEntityArgs<ExtArgs>
    project?: boolean | BusinessRiskReportTask$projectArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessRiskReportTask"]>

  export type BusinessRiskReportTaskSelectScalar = {
    id?: boolean
    reportName?: boolean
    generalDescription?: boolean
    natureOfBusiness?: boolean
    geography?: boolean
    riskOverview?: boolean
    nextSteps?: boolean
    inputUrl?: boolean
    createdById?: boolean
    workspaceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    mainEntityId?: boolean
    displayId?: boolean
    projectId?: boolean
  }

  export type BusinessRiskReportTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    mainEntity?: boolean | BusinessRiskReportTask$mainEntityArgs<ExtArgs>
    project?: boolean | BusinessRiskReportTask$projectArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    observations?: boolean | BusinessRiskReportTask$observationsArgs<ExtArgs>
    references?: boolean | BusinessRiskReportTask$referencesArgs<ExtArgs>
    relatedEntities?: boolean | BusinessRiskReportTask$relatedEntitiesArgs<ExtArgs>
    _count?: boolean | BusinessRiskReportTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BusinessRiskReportTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    mainEntity?: boolean | BusinessRiskReportTask$mainEntityArgs<ExtArgs>
    project?: boolean | BusinessRiskReportTask$projectArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $BusinessRiskReportTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessRiskReportTask"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      mainEntity: Prisma.$EntityPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs> | null
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      observations: Prisma.$ObservationPayload<ExtArgs>[]
      references: Prisma.$ReferencePayload<ExtArgs>[]
      relatedEntities: Prisma.$EntityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportName: string | null
      generalDescription: string | null
      natureOfBusiness: string | null
      geography: string | null
      riskOverview: string | null
      nextSteps: string[]
      inputUrl: string | null
      createdById: string
      workspaceId: string
      createdAt: Date
      updatedAt: Date
      status: $Enums.BusinessRiskReportTaskStatus
      mainEntityId: string | null
      displayId: number
      projectId: string | null
    }, ExtArgs["result"]["businessRiskReportTask"]>
    composites: {}
  }

  type BusinessRiskReportTaskGetPayload<S extends boolean | null | undefined | BusinessRiskReportTaskDefaultArgs> = $Result.GetResult<Prisma.$BusinessRiskReportTaskPayload, S>

  type BusinessRiskReportTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BusinessRiskReportTaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BusinessRiskReportTaskCountAggregateInputType | true
    }

  export interface BusinessRiskReportTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessRiskReportTask'], meta: { name: 'BusinessRiskReportTask' } }
    /**
     * Find zero or one BusinessRiskReportTask that matches the filter.
     * @param {BusinessRiskReportTaskFindUniqueArgs} args - Arguments to find a BusinessRiskReportTask
     * @example
     * // Get one BusinessRiskReportTask
     * const businessRiskReportTask = await prisma.businessRiskReportTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessRiskReportTaskFindUniqueArgs>(args: SelectSubset<T, BusinessRiskReportTaskFindUniqueArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BusinessRiskReportTask that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BusinessRiskReportTaskFindUniqueOrThrowArgs} args - Arguments to find a BusinessRiskReportTask
     * @example
     * // Get one BusinessRiskReportTask
     * const businessRiskReportTask = await prisma.businessRiskReportTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessRiskReportTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessRiskReportTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BusinessRiskReportTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRiskReportTaskFindFirstArgs} args - Arguments to find a BusinessRiskReportTask
     * @example
     * // Get one BusinessRiskReportTask
     * const businessRiskReportTask = await prisma.businessRiskReportTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessRiskReportTaskFindFirstArgs>(args?: SelectSubset<T, BusinessRiskReportTaskFindFirstArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BusinessRiskReportTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRiskReportTaskFindFirstOrThrowArgs} args - Arguments to find a BusinessRiskReportTask
     * @example
     * // Get one BusinessRiskReportTask
     * const businessRiskReportTask = await prisma.businessRiskReportTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessRiskReportTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessRiskReportTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BusinessRiskReportTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRiskReportTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessRiskReportTasks
     * const businessRiskReportTasks = await prisma.businessRiskReportTask.findMany()
     * 
     * // Get first 10 BusinessRiskReportTasks
     * const businessRiskReportTasks = await prisma.businessRiskReportTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessRiskReportTaskWithIdOnly = await prisma.businessRiskReportTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessRiskReportTaskFindManyArgs>(args?: SelectSubset<T, BusinessRiskReportTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BusinessRiskReportTask.
     * @param {BusinessRiskReportTaskCreateArgs} args - Arguments to create a BusinessRiskReportTask.
     * @example
     * // Create one BusinessRiskReportTask
     * const BusinessRiskReportTask = await prisma.businessRiskReportTask.create({
     *   data: {
     *     // ... data to create a BusinessRiskReportTask
     *   }
     * })
     * 
     */
    create<T extends BusinessRiskReportTaskCreateArgs>(args: SelectSubset<T, BusinessRiskReportTaskCreateArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BusinessRiskReportTasks.
     * @param {BusinessRiskReportTaskCreateManyArgs} args - Arguments to create many BusinessRiskReportTasks.
     * @example
     * // Create many BusinessRiskReportTasks
     * const businessRiskReportTask = await prisma.businessRiskReportTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessRiskReportTaskCreateManyArgs>(args?: SelectSubset<T, BusinessRiskReportTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessRiskReportTasks and returns the data saved in the database.
     * @param {BusinessRiskReportTaskCreateManyAndReturnArgs} args - Arguments to create many BusinessRiskReportTasks.
     * @example
     * // Create many BusinessRiskReportTasks
     * const businessRiskReportTask = await prisma.businessRiskReportTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessRiskReportTasks and only return the `id`
     * const businessRiskReportTaskWithIdOnly = await prisma.businessRiskReportTask.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessRiskReportTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessRiskReportTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BusinessRiskReportTask.
     * @param {BusinessRiskReportTaskDeleteArgs} args - Arguments to delete one BusinessRiskReportTask.
     * @example
     * // Delete one BusinessRiskReportTask
     * const BusinessRiskReportTask = await prisma.businessRiskReportTask.delete({
     *   where: {
     *     // ... filter to delete one BusinessRiskReportTask
     *   }
     * })
     * 
     */
    delete<T extends BusinessRiskReportTaskDeleteArgs>(args: SelectSubset<T, BusinessRiskReportTaskDeleteArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BusinessRiskReportTask.
     * @param {BusinessRiskReportTaskUpdateArgs} args - Arguments to update one BusinessRiskReportTask.
     * @example
     * // Update one BusinessRiskReportTask
     * const businessRiskReportTask = await prisma.businessRiskReportTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessRiskReportTaskUpdateArgs>(args: SelectSubset<T, BusinessRiskReportTaskUpdateArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BusinessRiskReportTasks.
     * @param {BusinessRiskReportTaskDeleteManyArgs} args - Arguments to filter BusinessRiskReportTasks to delete.
     * @example
     * // Delete a few BusinessRiskReportTasks
     * const { count } = await prisma.businessRiskReportTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessRiskReportTaskDeleteManyArgs>(args?: SelectSubset<T, BusinessRiskReportTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessRiskReportTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRiskReportTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessRiskReportTasks
     * const businessRiskReportTask = await prisma.businessRiskReportTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessRiskReportTaskUpdateManyArgs>(args: SelectSubset<T, BusinessRiskReportTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BusinessRiskReportTask.
     * @param {BusinessRiskReportTaskUpsertArgs} args - Arguments to update or create a BusinessRiskReportTask.
     * @example
     * // Update or create a BusinessRiskReportTask
     * const businessRiskReportTask = await prisma.businessRiskReportTask.upsert({
     *   create: {
     *     // ... data to create a BusinessRiskReportTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessRiskReportTask we want to update
     *   }
     * })
     */
    upsert<T extends BusinessRiskReportTaskUpsertArgs>(args: SelectSubset<T, BusinessRiskReportTaskUpsertArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BusinessRiskReportTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRiskReportTaskCountArgs} args - Arguments to filter BusinessRiskReportTasks to count.
     * @example
     * // Count the number of BusinessRiskReportTasks
     * const count = await prisma.businessRiskReportTask.count({
     *   where: {
     *     // ... the filter for the BusinessRiskReportTasks we want to count
     *   }
     * })
    **/
    count<T extends BusinessRiskReportTaskCountArgs>(
      args?: Subset<T, BusinessRiskReportTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessRiskReportTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessRiskReportTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRiskReportTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessRiskReportTaskAggregateArgs>(args: Subset<T, BusinessRiskReportTaskAggregateArgs>): Prisma.PrismaPromise<GetBusinessRiskReportTaskAggregateType<T>>

    /**
     * Group by BusinessRiskReportTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRiskReportTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessRiskReportTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessRiskReportTaskGroupByArgs['orderBy'] }
        : { orderBy?: BusinessRiskReportTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessRiskReportTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessRiskReportTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessRiskReportTask model
   */
  readonly fields: BusinessRiskReportTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessRiskReportTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessRiskReportTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mainEntity<T extends BusinessRiskReportTask$mainEntityArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRiskReportTask$mainEntityArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends BusinessRiskReportTask$projectArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRiskReportTask$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    observations<T extends BusinessRiskReportTask$observationsArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRiskReportTask$observationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany"> | Null>
    references<T extends BusinessRiskReportTask$referencesArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRiskReportTask$referencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findMany"> | Null>
    relatedEntities<T extends BusinessRiskReportTask$relatedEntitiesArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRiskReportTask$relatedEntitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusinessRiskReportTask model
   */ 
  interface BusinessRiskReportTaskFieldRefs {
    readonly id: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly reportName: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly generalDescription: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly natureOfBusiness: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly geography: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly riskOverview: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly nextSteps: FieldRef<"BusinessRiskReportTask", 'String[]'>
    readonly inputUrl: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly createdById: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly workspaceId: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly createdAt: FieldRef<"BusinessRiskReportTask", 'DateTime'>
    readonly updatedAt: FieldRef<"BusinessRiskReportTask", 'DateTime'>
    readonly status: FieldRef<"BusinessRiskReportTask", 'BusinessRiskReportTaskStatus'>
    readonly mainEntityId: FieldRef<"BusinessRiskReportTask", 'String'>
    readonly displayId: FieldRef<"BusinessRiskReportTask", 'Int'>
    readonly projectId: FieldRef<"BusinessRiskReportTask", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BusinessRiskReportTask findUnique
   */
  export type BusinessRiskReportTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRiskReportTask to fetch.
     */
    where: BusinessRiskReportTaskWhereUniqueInput
  }

  /**
   * BusinessRiskReportTask findUniqueOrThrow
   */
  export type BusinessRiskReportTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRiskReportTask to fetch.
     */
    where: BusinessRiskReportTaskWhereUniqueInput
  }

  /**
   * BusinessRiskReportTask findFirst
   */
  export type BusinessRiskReportTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRiskReportTask to fetch.
     */
    where?: BusinessRiskReportTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRiskReportTasks to fetch.
     */
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessRiskReportTasks.
     */
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRiskReportTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRiskReportTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessRiskReportTasks.
     */
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * BusinessRiskReportTask findFirstOrThrow
   */
  export type BusinessRiskReportTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRiskReportTask to fetch.
     */
    where?: BusinessRiskReportTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRiskReportTasks to fetch.
     */
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessRiskReportTasks.
     */
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRiskReportTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRiskReportTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessRiskReportTasks.
     */
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * BusinessRiskReportTask findMany
   */
  export type BusinessRiskReportTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRiskReportTasks to fetch.
     */
    where?: BusinessRiskReportTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRiskReportTasks to fetch.
     */
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessRiskReportTasks.
     */
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRiskReportTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRiskReportTasks.
     */
    skip?: number
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * BusinessRiskReportTask create
   */
  export type BusinessRiskReportTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessRiskReportTask.
     */
    data: XOR<BusinessRiskReportTaskCreateInput, BusinessRiskReportTaskUncheckedCreateInput>
  }

  /**
   * BusinessRiskReportTask createMany
   */
  export type BusinessRiskReportTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessRiskReportTasks.
     */
    data: BusinessRiskReportTaskCreateManyInput | BusinessRiskReportTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusinessRiskReportTask createManyAndReturn
   */
  export type BusinessRiskReportTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BusinessRiskReportTasks.
     */
    data: BusinessRiskReportTaskCreateManyInput | BusinessRiskReportTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessRiskReportTask update
   */
  export type BusinessRiskReportTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessRiskReportTask.
     */
    data: XOR<BusinessRiskReportTaskUpdateInput, BusinessRiskReportTaskUncheckedUpdateInput>
    /**
     * Choose, which BusinessRiskReportTask to update.
     */
    where: BusinessRiskReportTaskWhereUniqueInput
  }

  /**
   * BusinessRiskReportTask updateMany
   */
  export type BusinessRiskReportTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessRiskReportTasks.
     */
    data: XOR<BusinessRiskReportTaskUpdateManyMutationInput, BusinessRiskReportTaskUncheckedUpdateManyInput>
    /**
     * Filter which BusinessRiskReportTasks to update
     */
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * BusinessRiskReportTask upsert
   */
  export type BusinessRiskReportTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessRiskReportTask to update in case it exists.
     */
    where: BusinessRiskReportTaskWhereUniqueInput
    /**
     * In case the BusinessRiskReportTask found by the `where` argument doesn't exist, create a new BusinessRiskReportTask with this data.
     */
    create: XOR<BusinessRiskReportTaskCreateInput, BusinessRiskReportTaskUncheckedCreateInput>
    /**
     * In case the BusinessRiskReportTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessRiskReportTaskUpdateInput, BusinessRiskReportTaskUncheckedUpdateInput>
  }

  /**
   * BusinessRiskReportTask delete
   */
  export type BusinessRiskReportTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    /**
     * Filter which BusinessRiskReportTask to delete.
     */
    where: BusinessRiskReportTaskWhereUniqueInput
  }

  /**
   * BusinessRiskReportTask deleteMany
   */
  export type BusinessRiskReportTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessRiskReportTasks to delete
     */
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * BusinessRiskReportTask.mainEntity
   */
  export type BusinessRiskReportTask$mainEntityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
  }

  /**
   * BusinessRiskReportTask.project
   */
  export type BusinessRiskReportTask$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * BusinessRiskReportTask.observations
   */
  export type BusinessRiskReportTask$observationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    cursor?: ObservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * BusinessRiskReportTask.references
   */
  export type BusinessRiskReportTask$referencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    where?: ReferenceWhereInput
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    cursor?: ReferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }

  /**
   * BusinessRiskReportTask.relatedEntities
   */
  export type BusinessRiskReportTask$relatedEntitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    cursor?: EntityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * BusinessRiskReportTask without action
   */
  export type BusinessRiskReportTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
  }


  /**
   * Model Entity
   */

  export type AggregateEntity = {
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  export type EntityMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    type: $Enums.EntityType | null
    country: string | null
    city: string | null
    state: string | null
    streetAddress: string | null
    zipCode: string | null
    phoneNumber: string | null
    email: string | null
    website: string | null
    workspaceId: string | null
    industry: string | null
    role: string | null
    DocumentAnalyserTaskId: string | null
    documentId: string | null
    projectId: string | null
  }

  export type EntityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    type: $Enums.EntityType | null
    country: string | null
    city: string | null
    state: string | null
    streetAddress: string | null
    zipCode: string | null
    phoneNumber: string | null
    email: string | null
    website: string | null
    workspaceId: string | null
    industry: string | null
    role: string | null
    DocumentAnalyserTaskId: string | null
    documentId: string | null
    projectId: string | null
  }

  export type EntityCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    type: number
    socialLinks: number
    country: number
    city: number
    state: number
    streetAddress: number
    zipCode: number
    phoneNumber: number
    email: number
    website: number
    workspaceId: number
    industry: number
    role: number
    DocumentAnalyserTaskId: number
    documentId: number
    projectId: number
    _all: number
  }


  export type EntityMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    country?: true
    city?: true
    state?: true
    streetAddress?: true
    zipCode?: true
    phoneNumber?: true
    email?: true
    website?: true
    workspaceId?: true
    industry?: true
    role?: true
    DocumentAnalyserTaskId?: true
    documentId?: true
    projectId?: true
  }

  export type EntityMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    country?: true
    city?: true
    state?: true
    streetAddress?: true
    zipCode?: true
    phoneNumber?: true
    email?: true
    website?: true
    workspaceId?: true
    industry?: true
    role?: true
    DocumentAnalyserTaskId?: true
    documentId?: true
    projectId?: true
  }

  export type EntityCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    socialLinks?: true
    country?: true
    city?: true
    state?: true
    streetAddress?: true
    zipCode?: true
    phoneNumber?: true
    email?: true
    website?: true
    workspaceId?: true
    industry?: true
    role?: true
    DocumentAnalyserTaskId?: true
    documentId?: true
    projectId?: true
    _all?: true
  }

  export type EntityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entity to aggregate.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entities
    **/
    _count?: true | EntityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntityMaxAggregateInputType
  }

  export type GetEntityAggregateType<T extends EntityAggregateArgs> = {
        [P in keyof T & keyof AggregateEntity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntity[P]>
      : GetScalarType<T[P], AggregateEntity[P]>
  }




  export type EntityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithAggregationInput | EntityOrderByWithAggregationInput[]
    by: EntityScalarFieldEnum[] | EntityScalarFieldEnum
    having?: EntityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntityCountAggregateInputType | true
    _min?: EntityMinAggregateInputType
    _max?: EntityMaxAggregateInputType
  }

  export type EntityGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    type: $Enums.EntityType
    socialLinks: string[]
    country: string | null
    city: string | null
    state: string | null
    streetAddress: string | null
    zipCode: string | null
    phoneNumber: string | null
    email: string | null
    website: string | null
    workspaceId: string | null
    industry: string | null
    role: string | null
    DocumentAnalyserTaskId: string | null
    documentId: string | null
    projectId: string | null
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  type GetEntityGroupByPayload<T extends EntityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntityGroupByOutputType[P]>
            : GetScalarType<T[P], EntityGroupByOutputType[P]>
        }
      >
    >


  export type EntitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    socialLinks?: boolean
    country?: boolean
    city?: boolean
    state?: boolean
    streetAddress?: boolean
    zipCode?: boolean
    phoneNumber?: boolean
    email?: boolean
    website?: boolean
    workspaceId?: boolean
    industry?: boolean
    role?: boolean
    DocumentAnalyserTaskId?: boolean
    documentId?: boolean
    projectId?: boolean
    mainBusinessRiskReportTasks?: boolean | Entity$mainBusinessRiskReportTasksArgs<ExtArgs>
    DocumentAnalyserTask?: boolean | Entity$DocumentAnalyserTaskArgs<ExtArgs>
    Document?: boolean | Entity$DocumentArgs<ExtArgs>
    project?: boolean | Entity$projectArgs<ExtArgs>
    workspace?: boolean | Entity$workspaceArgs<ExtArgs>
    documents?: boolean | Entity$documentsArgs<ExtArgs>
    relatedBusinessRiskReportTasks?: boolean | Entity$relatedBusinessRiskReportTasksArgs<ExtArgs>
    _count?: boolean | EntityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entity"]>

  export type EntitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    socialLinks?: boolean
    country?: boolean
    city?: boolean
    state?: boolean
    streetAddress?: boolean
    zipCode?: boolean
    phoneNumber?: boolean
    email?: boolean
    website?: boolean
    workspaceId?: boolean
    industry?: boolean
    role?: boolean
    DocumentAnalyserTaskId?: boolean
    documentId?: boolean
    projectId?: boolean
    DocumentAnalyserTask?: boolean | Entity$DocumentAnalyserTaskArgs<ExtArgs>
    Document?: boolean | Entity$DocumentArgs<ExtArgs>
    project?: boolean | Entity$projectArgs<ExtArgs>
    workspace?: boolean | Entity$workspaceArgs<ExtArgs>
  }, ExtArgs["result"]["entity"]>

  export type EntitySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    socialLinks?: boolean
    country?: boolean
    city?: boolean
    state?: boolean
    streetAddress?: boolean
    zipCode?: boolean
    phoneNumber?: boolean
    email?: boolean
    website?: boolean
    workspaceId?: boolean
    industry?: boolean
    role?: boolean
    DocumentAnalyserTaskId?: boolean
    documentId?: boolean
    projectId?: boolean
  }

  export type EntityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mainBusinessRiskReportTasks?: boolean | Entity$mainBusinessRiskReportTasksArgs<ExtArgs>
    DocumentAnalyserTask?: boolean | Entity$DocumentAnalyserTaskArgs<ExtArgs>
    Document?: boolean | Entity$DocumentArgs<ExtArgs>
    project?: boolean | Entity$projectArgs<ExtArgs>
    workspace?: boolean | Entity$workspaceArgs<ExtArgs>
    documents?: boolean | Entity$documentsArgs<ExtArgs>
    relatedBusinessRiskReportTasks?: boolean | Entity$relatedBusinessRiskReportTasksArgs<ExtArgs>
    _count?: boolean | EntityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EntityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DocumentAnalyserTask?: boolean | Entity$DocumentAnalyserTaskArgs<ExtArgs>
    Document?: boolean | Entity$DocumentArgs<ExtArgs>
    project?: boolean | Entity$projectArgs<ExtArgs>
    workspace?: boolean | Entity$workspaceArgs<ExtArgs>
  }

  export type $EntityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entity"
    objects: {
      mainBusinessRiskReportTasks: Prisma.$BusinessRiskReportTaskPayload<ExtArgs>[]
      DocumentAnalyserTask: Prisma.$DocumentAnalyserTaskPayload<ExtArgs> | null
      Document: Prisma.$DocumentPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs> | null
      workspace: Prisma.$WorkspacePayload<ExtArgs> | null
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      relatedBusinessRiskReportTasks: Prisma.$BusinessRiskReportTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      type: $Enums.EntityType
      socialLinks: string[]
      country: string | null
      city: string | null
      state: string | null
      streetAddress: string | null
      zipCode: string | null
      phoneNumber: string | null
      email: string | null
      website: string | null
      workspaceId: string | null
      industry: string | null
      role: string | null
      DocumentAnalyserTaskId: string | null
      documentId: string | null
      projectId: string | null
    }, ExtArgs["result"]["entity"]>
    composites: {}
  }

  type EntityGetPayload<S extends boolean | null | undefined | EntityDefaultArgs> = $Result.GetResult<Prisma.$EntityPayload, S>

  type EntityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EntityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EntityCountAggregateInputType | true
    }

  export interface EntityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entity'], meta: { name: 'Entity' } }
    /**
     * Find zero or one Entity that matches the filter.
     * @param {EntityFindUniqueArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EntityFindUniqueArgs>(args: SelectSubset<T, EntityFindUniqueArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Entity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EntityFindUniqueOrThrowArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EntityFindUniqueOrThrowArgs>(args: SelectSubset<T, EntityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Entity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindFirstArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EntityFindFirstArgs>(args?: SelectSubset<T, EntityFindFirstArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Entity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindFirstOrThrowArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EntityFindFirstOrThrowArgs>(args?: SelectSubset<T, EntityFindFirstOrThrowArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Entities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entities
     * const entities = await prisma.entity.findMany()
     * 
     * // Get first 10 Entities
     * const entities = await prisma.entity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entityWithIdOnly = await prisma.entity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EntityFindManyArgs>(args?: SelectSubset<T, EntityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Entity.
     * @param {EntityCreateArgs} args - Arguments to create a Entity.
     * @example
     * // Create one Entity
     * const Entity = await prisma.entity.create({
     *   data: {
     *     // ... data to create a Entity
     *   }
     * })
     * 
     */
    create<T extends EntityCreateArgs>(args: SelectSubset<T, EntityCreateArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Entities.
     * @param {EntityCreateManyArgs} args - Arguments to create many Entities.
     * @example
     * // Create many Entities
     * const entity = await prisma.entity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EntityCreateManyArgs>(args?: SelectSubset<T, EntityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Entities and returns the data saved in the database.
     * @param {EntityCreateManyAndReturnArgs} args - Arguments to create many Entities.
     * @example
     * // Create many Entities
     * const entity = await prisma.entity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Entities and only return the `id`
     * const entityWithIdOnly = await prisma.entity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EntityCreateManyAndReturnArgs>(args?: SelectSubset<T, EntityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Entity.
     * @param {EntityDeleteArgs} args - Arguments to delete one Entity.
     * @example
     * // Delete one Entity
     * const Entity = await prisma.entity.delete({
     *   where: {
     *     // ... filter to delete one Entity
     *   }
     * })
     * 
     */
    delete<T extends EntityDeleteArgs>(args: SelectSubset<T, EntityDeleteArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Entity.
     * @param {EntityUpdateArgs} args - Arguments to update one Entity.
     * @example
     * // Update one Entity
     * const entity = await prisma.entity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EntityUpdateArgs>(args: SelectSubset<T, EntityUpdateArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Entities.
     * @param {EntityDeleteManyArgs} args - Arguments to filter Entities to delete.
     * @example
     * // Delete a few Entities
     * const { count } = await prisma.entity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EntityDeleteManyArgs>(args?: SelectSubset<T, EntityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entities
     * const entity = await prisma.entity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EntityUpdateManyArgs>(args: SelectSubset<T, EntityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entity.
     * @param {EntityUpsertArgs} args - Arguments to update or create a Entity.
     * @example
     * // Update or create a Entity
     * const entity = await prisma.entity.upsert({
     *   create: {
     *     // ... data to create a Entity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entity we want to update
     *   }
     * })
     */
    upsert<T extends EntityUpsertArgs>(args: SelectSubset<T, EntityUpsertArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityCountArgs} args - Arguments to filter Entities to count.
     * @example
     * // Count the number of Entities
     * const count = await prisma.entity.count({
     *   where: {
     *     // ... the filter for the Entities we want to count
     *   }
     * })
    **/
    count<T extends EntityCountArgs>(
      args?: Subset<T, EntityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntityAggregateArgs>(args: Subset<T, EntityAggregateArgs>): Prisma.PrismaPromise<GetEntityAggregateType<T>>

    /**
     * Group by Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntityGroupByArgs['orderBy'] }
        : { orderBy?: EntityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entity model
   */
  readonly fields: EntityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mainBusinessRiskReportTasks<T extends Entity$mainBusinessRiskReportTasksArgs<ExtArgs> = {}>(args?: Subset<T, Entity$mainBusinessRiskReportTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findMany"> | Null>
    DocumentAnalyserTask<T extends Entity$DocumentAnalyserTaskArgs<ExtArgs> = {}>(args?: Subset<T, Entity$DocumentAnalyserTaskArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Document<T extends Entity$DocumentArgs<ExtArgs> = {}>(args?: Subset<T, Entity$DocumentArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends Entity$projectArgs<ExtArgs> = {}>(args?: Subset<T, Entity$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    workspace<T extends Entity$workspaceArgs<ExtArgs> = {}>(args?: Subset<T, Entity$workspaceArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    documents<T extends Entity$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Entity$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    relatedBusinessRiskReportTasks<T extends Entity$relatedBusinessRiskReportTasksArgs<ExtArgs> = {}>(args?: Subset<T, Entity$relatedBusinessRiskReportTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Entity model
   */ 
  interface EntityFieldRefs {
    readonly id: FieldRef<"Entity", 'String'>
    readonly name: FieldRef<"Entity", 'String'>
    readonly description: FieldRef<"Entity", 'String'>
    readonly createdAt: FieldRef<"Entity", 'DateTime'>
    readonly updatedAt: FieldRef<"Entity", 'DateTime'>
    readonly type: FieldRef<"Entity", 'EntityType'>
    readonly socialLinks: FieldRef<"Entity", 'String[]'>
    readonly country: FieldRef<"Entity", 'String'>
    readonly city: FieldRef<"Entity", 'String'>
    readonly state: FieldRef<"Entity", 'String'>
    readonly streetAddress: FieldRef<"Entity", 'String'>
    readonly zipCode: FieldRef<"Entity", 'String'>
    readonly phoneNumber: FieldRef<"Entity", 'String'>
    readonly email: FieldRef<"Entity", 'String'>
    readonly website: FieldRef<"Entity", 'String'>
    readonly workspaceId: FieldRef<"Entity", 'String'>
    readonly industry: FieldRef<"Entity", 'String'>
    readonly role: FieldRef<"Entity", 'String'>
    readonly DocumentAnalyserTaskId: FieldRef<"Entity", 'String'>
    readonly documentId: FieldRef<"Entity", 'String'>
    readonly projectId: FieldRef<"Entity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Entity findUnique
   */
  export type EntityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity findUniqueOrThrow
   */
  export type EntityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity findFirst
   */
  export type EntityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entities.
     */
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity findFirstOrThrow
   */
  export type EntityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entities.
     */
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity findMany
   */
  export type EntityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entities to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity create
   */
  export type EntityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The data needed to create a Entity.
     */
    data: XOR<EntityCreateInput, EntityUncheckedCreateInput>
  }

  /**
   * Entity createMany
   */
  export type EntityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entities.
     */
    data: EntityCreateManyInput | EntityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Entity createManyAndReturn
   */
  export type EntityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Entities.
     */
    data: EntityCreateManyInput | EntityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Entity update
   */
  export type EntityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The data needed to update a Entity.
     */
    data: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
    /**
     * Choose, which Entity to update.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity updateMany
   */
  export type EntityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entities.
     */
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyInput>
    /**
     * Filter which Entities to update
     */
    where?: EntityWhereInput
  }

  /**
   * Entity upsert
   */
  export type EntityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The filter to search for the Entity to update in case it exists.
     */
    where: EntityWhereUniqueInput
    /**
     * In case the Entity found by the `where` argument doesn't exist, create a new Entity with this data.
     */
    create: XOR<EntityCreateInput, EntityUncheckedCreateInput>
    /**
     * In case the Entity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
  }

  /**
   * Entity delete
   */
  export type EntityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter which Entity to delete.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity deleteMany
   */
  export type EntityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entities to delete
     */
    where?: EntityWhereInput
  }

  /**
   * Entity.mainBusinessRiskReportTasks
   */
  export type Entity$mainBusinessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    where?: BusinessRiskReportTaskWhereInput
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * Entity.DocumentAnalyserTask
   */
  export type Entity$DocumentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * Entity.Document
   */
  export type Entity$DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
  }

  /**
   * Entity.project
   */
  export type Entity$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Entity.workspace
   */
  export type Entity$workspaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    where?: WorkspaceWhereInput
  }

  /**
   * Entity.documents
   */
  export type Entity$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Entity.relatedBusinessRiskReportTasks
   */
  export type Entity$relatedBusinessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    where?: BusinessRiskReportTaskWhereInput
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * Entity without action
   */
  export type EntityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
  }


  /**
   * Model Observation
   */

  export type AggregateObservation = {
    _count: ObservationCountAggregateOutputType | null
    _avg: ObservationAvgAggregateOutputType | null
    _sum: ObservationSumAggregateOutputType | null
    _min: ObservationMinAggregateOutputType | null
    _max: ObservationMaxAggregateOutputType | null
  }

  export type ObservationAvgAggregateOutputType = {
    riskGrade: number | null
  }

  export type ObservationSumAggregateOutputType = {
    riskGrade: number | null
  }

  export type ObservationMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    riskGrade: number | null
    type: string | null
    businessRiskReportTaskId: string | null
    projectId: string | null
    documentAnalyserTaskId: string | null
  }

  export type ObservationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    riskGrade: number | null
    type: string | null
    businessRiskReportTaskId: string | null
    projectId: string | null
    documentAnalyserTaskId: string | null
  }

  export type ObservationCountAggregateOutputType = {
    id: number
    title: number
    description: number
    riskGrade: number
    type: number
    businessRiskReportTaskId: number
    projectId: number
    documentAnalyserTaskId: number
    _all: number
  }


  export type ObservationAvgAggregateInputType = {
    riskGrade?: true
  }

  export type ObservationSumAggregateInputType = {
    riskGrade?: true
  }

  export type ObservationMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    riskGrade?: true
    type?: true
    businessRiskReportTaskId?: true
    projectId?: true
    documentAnalyserTaskId?: true
  }

  export type ObservationMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    riskGrade?: true
    type?: true
    businessRiskReportTaskId?: true
    projectId?: true
    documentAnalyserTaskId?: true
  }

  export type ObservationCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    riskGrade?: true
    type?: true
    businessRiskReportTaskId?: true
    projectId?: true
    documentAnalyserTaskId?: true
    _all?: true
  }

  export type ObservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Observation to aggregate.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Observations
    **/
    _count?: true | ObservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ObservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ObservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObservationMaxAggregateInputType
  }

  export type GetObservationAggregateType<T extends ObservationAggregateArgs> = {
        [P in keyof T & keyof AggregateObservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObservation[P]>
      : GetScalarType<T[P], AggregateObservation[P]>
  }




  export type ObservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithAggregationInput | ObservationOrderByWithAggregationInput[]
    by: ObservationScalarFieldEnum[] | ObservationScalarFieldEnum
    having?: ObservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObservationCountAggregateInputType | true
    _avg?: ObservationAvgAggregateInputType
    _sum?: ObservationSumAggregateInputType
    _min?: ObservationMinAggregateInputType
    _max?: ObservationMaxAggregateInputType
  }

  export type ObservationGroupByOutputType = {
    id: string
    title: string
    description: string
    riskGrade: number
    type: string | null
    businessRiskReportTaskId: string | null
    projectId: string | null
    documentAnalyserTaskId: string | null
    _count: ObservationCountAggregateOutputType | null
    _avg: ObservationAvgAggregateOutputType | null
    _sum: ObservationSumAggregateOutputType | null
    _min: ObservationMinAggregateOutputType | null
    _max: ObservationMaxAggregateOutputType | null
  }

  type GetObservationGroupByPayload<T extends ObservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObservationGroupByOutputType[P]>
            : GetScalarType<T[P], ObservationGroupByOutputType[P]>
        }
      >
    >


  export type ObservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    riskGrade?: boolean
    type?: boolean
    businessRiskReportTaskId?: boolean
    projectId?: boolean
    documentAnalyserTaskId?: boolean
    businessRiskReportTask?: boolean | Observation$businessRiskReportTaskArgs<ExtArgs>
    documentAnalyserTask?: boolean | Observation$documentAnalyserTaskArgs<ExtArgs>
    project?: boolean | Observation$projectArgs<ExtArgs>
    references?: boolean | Observation$referencesArgs<ExtArgs>
    _count?: boolean | ObservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["observation"]>

  export type ObservationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    riskGrade?: boolean
    type?: boolean
    businessRiskReportTaskId?: boolean
    projectId?: boolean
    documentAnalyserTaskId?: boolean
    businessRiskReportTask?: boolean | Observation$businessRiskReportTaskArgs<ExtArgs>
    documentAnalyserTask?: boolean | Observation$documentAnalyserTaskArgs<ExtArgs>
    project?: boolean | Observation$projectArgs<ExtArgs>
  }, ExtArgs["result"]["observation"]>

  export type ObservationSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    riskGrade?: boolean
    type?: boolean
    businessRiskReportTaskId?: boolean
    projectId?: boolean
    documentAnalyserTaskId?: boolean
  }

  export type ObservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTask?: boolean | Observation$businessRiskReportTaskArgs<ExtArgs>
    documentAnalyserTask?: boolean | Observation$documentAnalyserTaskArgs<ExtArgs>
    project?: boolean | Observation$projectArgs<ExtArgs>
    references?: boolean | Observation$referencesArgs<ExtArgs>
    _count?: boolean | ObservationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ObservationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTask?: boolean | Observation$businessRiskReportTaskArgs<ExtArgs>
    documentAnalyserTask?: boolean | Observation$documentAnalyserTaskArgs<ExtArgs>
    project?: boolean | Observation$projectArgs<ExtArgs>
  }

  export type $ObservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Observation"
    objects: {
      businessRiskReportTask: Prisma.$BusinessRiskReportTaskPayload<ExtArgs> | null
      documentAnalyserTask: Prisma.$DocumentAnalyserTaskPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs> | null
      references: Prisma.$ReferencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      riskGrade: number
      type: string | null
      businessRiskReportTaskId: string | null
      projectId: string | null
      documentAnalyserTaskId: string | null
    }, ExtArgs["result"]["observation"]>
    composites: {}
  }

  type ObservationGetPayload<S extends boolean | null | undefined | ObservationDefaultArgs> = $Result.GetResult<Prisma.$ObservationPayload, S>

  type ObservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ObservationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ObservationCountAggregateInputType | true
    }

  export interface ObservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Observation'], meta: { name: 'Observation' } }
    /**
     * Find zero or one Observation that matches the filter.
     * @param {ObservationFindUniqueArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ObservationFindUniqueArgs>(args: SelectSubset<T, ObservationFindUniqueArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Observation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ObservationFindUniqueOrThrowArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ObservationFindUniqueOrThrowArgs>(args: SelectSubset<T, ObservationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Observation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationFindFirstArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ObservationFindFirstArgs>(args?: SelectSubset<T, ObservationFindFirstArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Observation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationFindFirstOrThrowArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ObservationFindFirstOrThrowArgs>(args?: SelectSubset<T, ObservationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Observations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Observations
     * const observations = await prisma.observation.findMany()
     * 
     * // Get first 10 Observations
     * const observations = await prisma.observation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const observationWithIdOnly = await prisma.observation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ObservationFindManyArgs>(args?: SelectSubset<T, ObservationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Observation.
     * @param {ObservationCreateArgs} args - Arguments to create a Observation.
     * @example
     * // Create one Observation
     * const Observation = await prisma.observation.create({
     *   data: {
     *     // ... data to create a Observation
     *   }
     * })
     * 
     */
    create<T extends ObservationCreateArgs>(args: SelectSubset<T, ObservationCreateArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Observations.
     * @param {ObservationCreateManyArgs} args - Arguments to create many Observations.
     * @example
     * // Create many Observations
     * const observation = await prisma.observation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ObservationCreateManyArgs>(args?: SelectSubset<T, ObservationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Observations and returns the data saved in the database.
     * @param {ObservationCreateManyAndReturnArgs} args - Arguments to create many Observations.
     * @example
     * // Create many Observations
     * const observation = await prisma.observation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Observations and only return the `id`
     * const observationWithIdOnly = await prisma.observation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ObservationCreateManyAndReturnArgs>(args?: SelectSubset<T, ObservationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Observation.
     * @param {ObservationDeleteArgs} args - Arguments to delete one Observation.
     * @example
     * // Delete one Observation
     * const Observation = await prisma.observation.delete({
     *   where: {
     *     // ... filter to delete one Observation
     *   }
     * })
     * 
     */
    delete<T extends ObservationDeleteArgs>(args: SelectSubset<T, ObservationDeleteArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Observation.
     * @param {ObservationUpdateArgs} args - Arguments to update one Observation.
     * @example
     * // Update one Observation
     * const observation = await prisma.observation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ObservationUpdateArgs>(args: SelectSubset<T, ObservationUpdateArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Observations.
     * @param {ObservationDeleteManyArgs} args - Arguments to filter Observations to delete.
     * @example
     * // Delete a few Observations
     * const { count } = await prisma.observation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ObservationDeleteManyArgs>(args?: SelectSubset<T, ObservationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Observations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Observations
     * const observation = await prisma.observation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ObservationUpdateManyArgs>(args: SelectSubset<T, ObservationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Observation.
     * @param {ObservationUpsertArgs} args - Arguments to update or create a Observation.
     * @example
     * // Update or create a Observation
     * const observation = await prisma.observation.upsert({
     *   create: {
     *     // ... data to create a Observation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Observation we want to update
     *   }
     * })
     */
    upsert<T extends ObservationUpsertArgs>(args: SelectSubset<T, ObservationUpsertArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Observations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationCountArgs} args - Arguments to filter Observations to count.
     * @example
     * // Count the number of Observations
     * const count = await prisma.observation.count({
     *   where: {
     *     // ... the filter for the Observations we want to count
     *   }
     * })
    **/
    count<T extends ObservationCountArgs>(
      args?: Subset<T, ObservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Observation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObservationAggregateArgs>(args: Subset<T, ObservationAggregateArgs>): Prisma.PrismaPromise<GetObservationAggregateType<T>>

    /**
     * Group by Observation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ObservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ObservationGroupByArgs['orderBy'] }
        : { orderBy?: ObservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ObservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Observation model
   */
  readonly fields: ObservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Observation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ObservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businessRiskReportTask<T extends Observation$businessRiskReportTaskArgs<ExtArgs> = {}>(args?: Subset<T, Observation$businessRiskReportTaskArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    documentAnalyserTask<T extends Observation$documentAnalyserTaskArgs<ExtArgs> = {}>(args?: Subset<T, Observation$documentAnalyserTaskArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends Observation$projectArgs<ExtArgs> = {}>(args?: Subset<T, Observation$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    references<T extends Observation$referencesArgs<ExtArgs> = {}>(args?: Subset<T, Observation$referencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Observation model
   */ 
  interface ObservationFieldRefs {
    readonly id: FieldRef<"Observation", 'String'>
    readonly title: FieldRef<"Observation", 'String'>
    readonly description: FieldRef<"Observation", 'String'>
    readonly riskGrade: FieldRef<"Observation", 'Int'>
    readonly type: FieldRef<"Observation", 'String'>
    readonly businessRiskReportTaskId: FieldRef<"Observation", 'String'>
    readonly projectId: FieldRef<"Observation", 'String'>
    readonly documentAnalyserTaskId: FieldRef<"Observation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Observation findUnique
   */
  export type ObservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation findUniqueOrThrow
   */
  export type ObservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation findFirst
   */
  export type ObservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Observations.
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Observations.
     */
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Observation findFirstOrThrow
   */
  export type ObservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Observations.
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Observations.
     */
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Observation findMany
   */
  export type ObservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observations to fetch.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Observations.
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Observation create
   */
  export type ObservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Observation.
     */
    data: XOR<ObservationCreateInput, ObservationUncheckedCreateInput>
  }

  /**
   * Observation createMany
   */
  export type ObservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Observations.
     */
    data: ObservationCreateManyInput | ObservationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Observation createManyAndReturn
   */
  export type ObservationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Observations.
     */
    data: ObservationCreateManyInput | ObservationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Observation update
   */
  export type ObservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Observation.
     */
    data: XOR<ObservationUpdateInput, ObservationUncheckedUpdateInput>
    /**
     * Choose, which Observation to update.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation updateMany
   */
  export type ObservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Observations.
     */
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyInput>
    /**
     * Filter which Observations to update
     */
    where?: ObservationWhereInput
  }

  /**
   * Observation upsert
   */
  export type ObservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Observation to update in case it exists.
     */
    where: ObservationWhereUniqueInput
    /**
     * In case the Observation found by the `where` argument doesn't exist, create a new Observation with this data.
     */
    create: XOR<ObservationCreateInput, ObservationUncheckedCreateInput>
    /**
     * In case the Observation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ObservationUpdateInput, ObservationUncheckedUpdateInput>
  }

  /**
   * Observation delete
   */
  export type ObservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter which Observation to delete.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation deleteMany
   */
  export type ObservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Observations to delete
     */
    where?: ObservationWhereInput
  }

  /**
   * Observation.businessRiskReportTask
   */
  export type Observation$businessRiskReportTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * Observation.documentAnalyserTask
   */
  export type Observation$documentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * Observation.project
   */
  export type Observation$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Observation.references
   */
  export type Observation$referencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    where?: ReferenceWhereInput
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    cursor?: ReferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }

  /**
   * Observation without action
   */
  export type ObservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
  }


  /**
   * Model Reference
   */

  export type AggregateReference = {
    _count: ReferenceCountAggregateOutputType | null
    _min: ReferenceMinAggregateOutputType | null
    _max: ReferenceMaxAggregateOutputType | null
  }

  export type ReferenceMinAggregateOutputType = {
    id: string | null
    url: string | null
    title: string | null
    businessRiskReportTaskId: string | null
    DocumentAnalyserTaskId: string | null
    projectId: string | null
    observationId: string | null
  }

  export type ReferenceMaxAggregateOutputType = {
    id: string | null
    url: string | null
    title: string | null
    businessRiskReportTaskId: string | null
    DocumentAnalyserTaskId: string | null
    projectId: string | null
    observationId: string | null
  }

  export type ReferenceCountAggregateOutputType = {
    id: number
    url: number
    title: number
    businessRiskReportTaskId: number
    DocumentAnalyserTaskId: number
    projectId: number
    observationId: number
    _all: number
  }


  export type ReferenceMinAggregateInputType = {
    id?: true
    url?: true
    title?: true
    businessRiskReportTaskId?: true
    DocumentAnalyserTaskId?: true
    projectId?: true
    observationId?: true
  }

  export type ReferenceMaxAggregateInputType = {
    id?: true
    url?: true
    title?: true
    businessRiskReportTaskId?: true
    DocumentAnalyserTaskId?: true
    projectId?: true
    observationId?: true
  }

  export type ReferenceCountAggregateInputType = {
    id?: true
    url?: true
    title?: true
    businessRiskReportTaskId?: true
    DocumentAnalyserTaskId?: true
    projectId?: true
    observationId?: true
    _all?: true
  }

  export type ReferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reference to aggregate.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned References
    **/
    _count?: true | ReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferenceMaxAggregateInputType
  }

  export type GetReferenceAggregateType<T extends ReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReference[P]>
      : GetScalarType<T[P], AggregateReference[P]>
  }




  export type ReferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferenceWhereInput
    orderBy?: ReferenceOrderByWithAggregationInput | ReferenceOrderByWithAggregationInput[]
    by: ReferenceScalarFieldEnum[] | ReferenceScalarFieldEnum
    having?: ReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferenceCountAggregateInputType | true
    _min?: ReferenceMinAggregateInputType
    _max?: ReferenceMaxAggregateInputType
  }

  export type ReferenceGroupByOutputType = {
    id: string
    url: string
    title: string | null
    businessRiskReportTaskId: string | null
    DocumentAnalyserTaskId: string | null
    projectId: string | null
    observationId: string | null
    _count: ReferenceCountAggregateOutputType | null
    _min: ReferenceMinAggregateOutputType | null
    _max: ReferenceMaxAggregateOutputType | null
  }

  type GetReferenceGroupByPayload<T extends ReferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], ReferenceGroupByOutputType[P]>
        }
      >
    >


  export type ReferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    title?: boolean
    businessRiskReportTaskId?: boolean
    DocumentAnalyserTaskId?: boolean
    projectId?: boolean
    observationId?: boolean
    DocumentAnalyserTask?: boolean | Reference$DocumentAnalyserTaskArgs<ExtArgs>
    businessRiskReportTask?: boolean | Reference$businessRiskReportTaskArgs<ExtArgs>
    observation?: boolean | Reference$observationArgs<ExtArgs>
    project?: boolean | Reference$projectArgs<ExtArgs>
  }, ExtArgs["result"]["reference"]>

  export type ReferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    title?: boolean
    businessRiskReportTaskId?: boolean
    DocumentAnalyserTaskId?: boolean
    projectId?: boolean
    observationId?: boolean
    DocumentAnalyserTask?: boolean | Reference$DocumentAnalyserTaskArgs<ExtArgs>
    businessRiskReportTask?: boolean | Reference$businessRiskReportTaskArgs<ExtArgs>
    observation?: boolean | Reference$observationArgs<ExtArgs>
    project?: boolean | Reference$projectArgs<ExtArgs>
  }, ExtArgs["result"]["reference"]>

  export type ReferenceSelectScalar = {
    id?: boolean
    url?: boolean
    title?: boolean
    businessRiskReportTaskId?: boolean
    DocumentAnalyserTaskId?: boolean
    projectId?: boolean
    observationId?: boolean
  }

  export type ReferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DocumentAnalyserTask?: boolean | Reference$DocumentAnalyserTaskArgs<ExtArgs>
    businessRiskReportTask?: boolean | Reference$businessRiskReportTaskArgs<ExtArgs>
    observation?: boolean | Reference$observationArgs<ExtArgs>
    project?: boolean | Reference$projectArgs<ExtArgs>
  }
  export type ReferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DocumentAnalyserTask?: boolean | Reference$DocumentAnalyserTaskArgs<ExtArgs>
    businessRiskReportTask?: boolean | Reference$businessRiskReportTaskArgs<ExtArgs>
    observation?: boolean | Reference$observationArgs<ExtArgs>
    project?: boolean | Reference$projectArgs<ExtArgs>
  }

  export type $ReferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reference"
    objects: {
      DocumentAnalyserTask: Prisma.$DocumentAnalyserTaskPayload<ExtArgs> | null
      businessRiskReportTask: Prisma.$BusinessRiskReportTaskPayload<ExtArgs> | null
      observation: Prisma.$ObservationPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      title: string | null
      businessRiskReportTaskId: string | null
      DocumentAnalyserTaskId: string | null
      projectId: string | null
      observationId: string | null
    }, ExtArgs["result"]["reference"]>
    composites: {}
  }

  type ReferenceGetPayload<S extends boolean | null | undefined | ReferenceDefaultArgs> = $Result.GetResult<Prisma.$ReferencePayload, S>

  type ReferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReferenceCountAggregateInputType | true
    }

  export interface ReferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reference'], meta: { name: 'Reference' } }
    /**
     * Find zero or one Reference that matches the filter.
     * @param {ReferenceFindUniqueArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferenceFindUniqueArgs>(args: SelectSubset<T, ReferenceFindUniqueArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reference that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReferenceFindUniqueOrThrowArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindFirstArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferenceFindFirstArgs>(args?: SelectSubset<T, ReferenceFindFirstArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindFirstOrThrowArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more References that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all References
     * const references = await prisma.reference.findMany()
     * 
     * // Get first 10 References
     * const references = await prisma.reference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referenceWithIdOnly = await prisma.reference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferenceFindManyArgs>(args?: SelectSubset<T, ReferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reference.
     * @param {ReferenceCreateArgs} args - Arguments to create a Reference.
     * @example
     * // Create one Reference
     * const Reference = await prisma.reference.create({
     *   data: {
     *     // ... data to create a Reference
     *   }
     * })
     * 
     */
    create<T extends ReferenceCreateArgs>(args: SelectSubset<T, ReferenceCreateArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many References.
     * @param {ReferenceCreateManyArgs} args - Arguments to create many References.
     * @example
     * // Create many References
     * const reference = await prisma.reference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferenceCreateManyArgs>(args?: SelectSubset<T, ReferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many References and returns the data saved in the database.
     * @param {ReferenceCreateManyAndReturnArgs} args - Arguments to create many References.
     * @example
     * // Create many References
     * const reference = await prisma.reference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many References and only return the `id`
     * const referenceWithIdOnly = await prisma.reference.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reference.
     * @param {ReferenceDeleteArgs} args - Arguments to delete one Reference.
     * @example
     * // Delete one Reference
     * const Reference = await prisma.reference.delete({
     *   where: {
     *     // ... filter to delete one Reference
     *   }
     * })
     * 
     */
    delete<T extends ReferenceDeleteArgs>(args: SelectSubset<T, ReferenceDeleteArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reference.
     * @param {ReferenceUpdateArgs} args - Arguments to update one Reference.
     * @example
     * // Update one Reference
     * const reference = await prisma.reference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferenceUpdateArgs>(args: SelectSubset<T, ReferenceUpdateArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more References.
     * @param {ReferenceDeleteManyArgs} args - Arguments to filter References to delete.
     * @example
     * // Delete a few References
     * const { count } = await prisma.reference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferenceDeleteManyArgs>(args?: SelectSubset<T, ReferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more References.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many References
     * const reference = await prisma.reference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferenceUpdateManyArgs>(args: SelectSubset<T, ReferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reference.
     * @param {ReferenceUpsertArgs} args - Arguments to update or create a Reference.
     * @example
     * // Update or create a Reference
     * const reference = await prisma.reference.upsert({
     *   create: {
     *     // ... data to create a Reference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reference we want to update
     *   }
     * })
     */
    upsert<T extends ReferenceUpsertArgs>(args: SelectSubset<T, ReferenceUpsertArgs<ExtArgs>>): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of References.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceCountArgs} args - Arguments to filter References to count.
     * @example
     * // Count the number of References
     * const count = await prisma.reference.count({
     *   where: {
     *     // ... the filter for the References we want to count
     *   }
     * })
    **/
    count<T extends ReferenceCountArgs>(
      args?: Subset<T, ReferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferenceAggregateArgs>(args: Subset<T, ReferenceAggregateArgs>): Prisma.PrismaPromise<GetReferenceAggregateType<T>>

    /**
     * Group by Reference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferenceGroupByArgs['orderBy'] }
        : { orderBy?: ReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reference model
   */
  readonly fields: ReferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    DocumentAnalyserTask<T extends Reference$DocumentAnalyserTaskArgs<ExtArgs> = {}>(args?: Subset<T, Reference$DocumentAnalyserTaskArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    businessRiskReportTask<T extends Reference$businessRiskReportTaskArgs<ExtArgs> = {}>(args?: Subset<T, Reference$businessRiskReportTaskArgs<ExtArgs>>): Prisma__BusinessRiskReportTaskClient<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    observation<T extends Reference$observationArgs<ExtArgs> = {}>(args?: Subset<T, Reference$observationArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends Reference$projectArgs<ExtArgs> = {}>(args?: Subset<T, Reference$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reference model
   */ 
  interface ReferenceFieldRefs {
    readonly id: FieldRef<"Reference", 'String'>
    readonly url: FieldRef<"Reference", 'String'>
    readonly title: FieldRef<"Reference", 'String'>
    readonly businessRiskReportTaskId: FieldRef<"Reference", 'String'>
    readonly DocumentAnalyserTaskId: FieldRef<"Reference", 'String'>
    readonly projectId: FieldRef<"Reference", 'String'>
    readonly observationId: FieldRef<"Reference", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Reference findUnique
   */
  export type ReferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where: ReferenceWhereUniqueInput
  }

  /**
   * Reference findUniqueOrThrow
   */
  export type ReferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where: ReferenceWhereUniqueInput
  }

  /**
   * Reference findFirst
   */
  export type ReferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for References.
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of References.
     */
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }

  /**
   * Reference findFirstOrThrow
   */
  export type ReferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for References.
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of References.
     */
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }

  /**
   * Reference findMany
   */
  export type ReferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which References to fetch.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing References.
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }

  /**
   * Reference create
   */
  export type ReferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Reference.
     */
    data: XOR<ReferenceCreateInput, ReferenceUncheckedCreateInput>
  }

  /**
   * Reference createMany
   */
  export type ReferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many References.
     */
    data: ReferenceCreateManyInput | ReferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reference createManyAndReturn
   */
  export type ReferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many References.
     */
    data: ReferenceCreateManyInput | ReferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reference update
   */
  export type ReferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Reference.
     */
    data: XOR<ReferenceUpdateInput, ReferenceUncheckedUpdateInput>
    /**
     * Choose, which Reference to update.
     */
    where: ReferenceWhereUniqueInput
  }

  /**
   * Reference updateMany
   */
  export type ReferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update References.
     */
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyInput>
    /**
     * Filter which References to update
     */
    where?: ReferenceWhereInput
  }

  /**
   * Reference upsert
   */
  export type ReferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Reference to update in case it exists.
     */
    where: ReferenceWhereUniqueInput
    /**
     * In case the Reference found by the `where` argument doesn't exist, create a new Reference with this data.
     */
    create: XOR<ReferenceCreateInput, ReferenceUncheckedCreateInput>
    /**
     * In case the Reference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferenceUpdateInput, ReferenceUncheckedUpdateInput>
  }

  /**
   * Reference delete
   */
  export type ReferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter which Reference to delete.
     */
    where: ReferenceWhereUniqueInput
  }

  /**
   * Reference deleteMany
   */
  export type ReferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which References to delete
     */
    where?: ReferenceWhereInput
  }

  /**
   * Reference.DocumentAnalyserTask
   */
  export type Reference$DocumentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * Reference.businessRiskReportTask
   */
  export type Reference$businessRiskReportTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    where?: BusinessRiskReportTaskWhereInput
  }

  /**
   * Reference.observation
   */
  export type Reference$observationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
  }

  /**
   * Reference.project
   */
  export type Reference$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Reference without action
   */
  export type ReferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    budget: number | null
  }

  export type ProjectSumAggregateOutputType = {
    budget: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workspaceId: string | null
    budget: number | null
    city: string | null
    country: string | null
    endDate: Date | null
    fundingType: string | null
    potentialFraudDescription: string | null
    projectType: string | null
    startDate: Date | null
    status: $Enums.ProjectStatus | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workspaceId: string | null
    budget: number | null
    city: string | null
    country: string | null
    endDate: Date | null
    fundingType: string | null
    potentialFraudDescription: string | null
    projectType: string | null
    startDate: Date | null
    status: $Enums.ProjectStatus | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    workspaceId: number
    budget: number
    city: number
    country: number
    endDate: number
    fundingType: number
    potentialFraudDescription: number
    potentialFraudTypes: number
    projectType: number
    startDate: number
    status: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    budget?: true
  }

  export type ProjectSumAggregateInputType = {
    budget?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    budget?: true
    city?: true
    country?: true
    endDate?: true
    fundingType?: true
    potentialFraudDescription?: true
    projectType?: true
    startDate?: true
    status?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    budget?: true
    city?: true
    country?: true
    endDate?: true
    fundingType?: true
    potentialFraudDescription?: true
    projectType?: true
    startDate?: true
    status?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    budget?: true
    city?: true
    country?: true
    endDate?: true
    fundingType?: true
    potentialFraudDescription?: true
    potentialFraudTypes?: true
    projectType?: true
    startDate?: true
    status?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    workspaceId: string
    budget: number | null
    city: string | null
    country: string | null
    endDate: Date | null
    fundingType: string | null
    potentialFraudDescription: string | null
    potentialFraudTypes: string[]
    projectType: string | null
    startDate: Date | null
    status: $Enums.ProjectStatus
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    budget?: boolean
    city?: boolean
    country?: boolean
    endDate?: boolean
    fundingType?: boolean
    potentialFraudDescription?: boolean
    potentialFraudTypes?: boolean
    projectType?: boolean
    startDate?: boolean
    status?: boolean
    businessRiskReportTasks?: boolean | Project$businessRiskReportTasksArgs<ExtArgs>
    chatAgent?: boolean | Project$chatAgentArgs<ExtArgs>
    documents?: boolean | Project$documentsArgs<ExtArgs>
    documentAnalyserTask?: boolean | Project$documentAnalyserTaskArgs<ExtArgs>
    entities?: boolean | Project$entitiesArgs<ExtArgs>
    folders?: boolean | Project$foldersArgs<ExtArgs>
    observations?: boolean | Project$observationsArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    references?: boolean | Project$referencesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    budget?: boolean
    city?: boolean
    country?: boolean
    endDate?: boolean
    fundingType?: boolean
    potentialFraudDescription?: boolean
    potentialFraudTypes?: boolean
    projectType?: boolean
    startDate?: boolean
    status?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    budget?: boolean
    city?: boolean
    country?: boolean
    endDate?: boolean
    fundingType?: boolean
    potentialFraudDescription?: boolean
    potentialFraudTypes?: boolean
    projectType?: boolean
    startDate?: boolean
    status?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRiskReportTasks?: boolean | Project$businessRiskReportTasksArgs<ExtArgs>
    chatAgent?: boolean | Project$chatAgentArgs<ExtArgs>
    documents?: boolean | Project$documentsArgs<ExtArgs>
    documentAnalyserTask?: boolean | Project$documentAnalyserTaskArgs<ExtArgs>
    entities?: boolean | Project$entitiesArgs<ExtArgs>
    folders?: boolean | Project$foldersArgs<ExtArgs>
    observations?: boolean | Project$observationsArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    references?: boolean | Project$referencesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      businessRiskReportTasks: Prisma.$BusinessRiskReportTaskPayload<ExtArgs>[]
      chatAgent: Prisma.$ChatAgentTaskPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      documentAnalyserTask: Prisma.$DocumentAnalyserTaskPayload<ExtArgs>[]
      entities: Prisma.$EntityPayload<ExtArgs>[]
      folders: Prisma.$FolderPayload<ExtArgs>[]
      observations: Prisma.$ObservationPayload<ExtArgs>[]
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      references: Prisma.$ReferencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      workspaceId: string
      budget: number | null
      city: string | null
      country: string | null
      endDate: Date | null
      fundingType: string | null
      potentialFraudDescription: string | null
      potentialFraudTypes: string[]
      projectType: string | null
      startDate: Date | null
      status: $Enums.ProjectStatus
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businessRiskReportTasks<T extends Project$businessRiskReportTasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$businessRiskReportTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRiskReportTaskPayload<ExtArgs>, T, "findMany"> | Null>
    chatAgent<T extends Project$chatAgentArgs<ExtArgs> = {}>(args?: Subset<T, Project$chatAgentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Project$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    documentAnalyserTask<T extends Project$documentAnalyserTaskArgs<ExtArgs> = {}>(args?: Subset<T, Project$documentAnalyserTaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findMany"> | Null>
    entities<T extends Project$entitiesArgs<ExtArgs> = {}>(args?: Subset<T, Project$entitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany"> | Null>
    folders<T extends Project$foldersArgs<ExtArgs> = {}>(args?: Subset<T, Project$foldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany"> | Null>
    observations<T extends Project$observationsArgs<ExtArgs> = {}>(args?: Subset<T, Project$observationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany"> | Null>
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    references<T extends Project$referencesArgs<ExtArgs> = {}>(args?: Subset<T, Project$referencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly workspaceId: FieldRef<"Project", 'String'>
    readonly budget: FieldRef<"Project", 'Int'>
    readonly city: FieldRef<"Project", 'String'>
    readonly country: FieldRef<"Project", 'String'>
    readonly endDate: FieldRef<"Project", 'DateTime'>
    readonly fundingType: FieldRef<"Project", 'String'>
    readonly potentialFraudDescription: FieldRef<"Project", 'String'>
    readonly potentialFraudTypes: FieldRef<"Project", 'String[]'>
    readonly projectType: FieldRef<"Project", 'String'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly status: FieldRef<"Project", 'ProjectStatus'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.businessRiskReportTasks
   */
  export type Project$businessRiskReportTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRiskReportTask
     */
    select?: BusinessRiskReportTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRiskReportTaskInclude<ExtArgs> | null
    where?: BusinessRiskReportTaskWhereInput
    orderBy?: BusinessRiskReportTaskOrderByWithRelationInput | BusinessRiskReportTaskOrderByWithRelationInput[]
    cursor?: BusinessRiskReportTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRiskReportTaskScalarFieldEnum | BusinessRiskReportTaskScalarFieldEnum[]
  }

  /**
   * Project.chatAgent
   */
  export type Project$chatAgentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    where?: ChatAgentTaskWhereInput
    orderBy?: ChatAgentTaskOrderByWithRelationInput | ChatAgentTaskOrderByWithRelationInput[]
    cursor?: ChatAgentTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatAgentTaskScalarFieldEnum | ChatAgentTaskScalarFieldEnum[]
  }

  /**
   * Project.documents
   */
  export type Project$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Project.documentAnalyserTask
   */
  export type Project$documentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    where?: DocumentAnalyserTaskWhereInput
    orderBy?: DocumentAnalyserTaskOrderByWithRelationInput | DocumentAnalyserTaskOrderByWithRelationInput[]
    cursor?: DocumentAnalyserTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentAnalyserTaskScalarFieldEnum | DocumentAnalyserTaskScalarFieldEnum[]
  }

  /**
   * Project.entities
   */
  export type Project$entitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    cursor?: EntityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Project.folders
   */
  export type Project$foldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Project.observations
   */
  export type Project$observationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    cursor?: ObservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Project.references
   */
  export type Project$referencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    where?: ReferenceWhereInput
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    cursor?: ReferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type DocumentSumAggregateOutputType = {
    fileSize: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    filename: string | null
    uploadedAt: Date | null
    workspaceId: string | null
    author: string | null
    chatAgentTaskId: string | null
    createdById: string | null
    dateOrPeriod: string | null
    description: string | null
    documentAnalyserTaskId: string | null
    fileType: string | null
    folderId: string | null
    fullText: string | null
    language: string | null
    metadata: string | null
    projectId: string | null
    url: string | null
    fileSize: number | null
    preprocessStatus: $Enums.DocumentPreprocessStatus | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    uploadedAt: Date | null
    workspaceId: string | null
    author: string | null
    chatAgentTaskId: string | null
    createdById: string | null
    dateOrPeriod: string | null
    description: string | null
    documentAnalyserTaskId: string | null
    fileType: string | null
    folderId: string | null
    fullText: string | null
    language: string | null
    metadata: string | null
    projectId: string | null
    url: string | null
    fileSize: number | null
    preprocessStatus: $Enums.DocumentPreprocessStatus | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    filename: number
    uploadedAt: number
    workspaceId: number
    author: number
    chatAgentTaskId: number
    createdById: number
    dateOrPeriod: number
    description: number
    documentAnalyserTaskId: number
    fileType: number
    folderId: number
    fullText: number
    language: number
    metadata: number
    projectId: number
    url: number
    fileSize: number
    preprocessStatus: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    fileSize?: true
  }

  export type DocumentSumAggregateInputType = {
    fileSize?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    filename?: true
    uploadedAt?: true
    workspaceId?: true
    author?: true
    chatAgentTaskId?: true
    createdById?: true
    dateOrPeriod?: true
    description?: true
    documentAnalyserTaskId?: true
    fileType?: true
    folderId?: true
    fullText?: true
    language?: true
    metadata?: true
    projectId?: true
    url?: true
    fileSize?: true
    preprocessStatus?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    filename?: true
    uploadedAt?: true
    workspaceId?: true
    author?: true
    chatAgentTaskId?: true
    createdById?: true
    dateOrPeriod?: true
    description?: true
    documentAnalyserTaskId?: true
    fileType?: true
    folderId?: true
    fullText?: true
    language?: true
    metadata?: true
    projectId?: true
    url?: true
    fileSize?: true
    preprocessStatus?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    filename?: true
    uploadedAt?: true
    workspaceId?: true
    author?: true
    chatAgentTaskId?: true
    createdById?: true
    dateOrPeriod?: true
    description?: true
    documentAnalyserTaskId?: true
    fileType?: true
    folderId?: true
    fullText?: true
    language?: true
    metadata?: true
    projectId?: true
    url?: true
    fileSize?: true
    preprocessStatus?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    filename: string
    uploadedAt: Date
    workspaceId: string | null
    author: string | null
    chatAgentTaskId: string | null
    createdById: string
    dateOrPeriod: string | null
    description: string | null
    documentAnalyserTaskId: string | null
    fileType: string
    folderId: string | null
    fullText: string | null
    language: string | null
    metadata: string | null
    projectId: string
    url: string
    fileSize: number | null
    preprocessStatus: $Enums.DocumentPreprocessStatus
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    uploadedAt?: boolean
    workspaceId?: boolean
    author?: boolean
    chatAgentTaskId?: boolean
    createdById?: boolean
    dateOrPeriod?: boolean
    description?: boolean
    documentAnalyserTaskId?: boolean
    fileType?: boolean
    folderId?: boolean
    fullText?: boolean
    language?: boolean
    metadata?: boolean
    projectId?: boolean
    url?: boolean
    fileSize?: boolean
    preprocessStatus?: boolean
    chatAgentTask?: boolean | Document$chatAgentTaskArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    documentAnalyserTask?: boolean | Document$documentAnalyserTaskArgs<ExtArgs>
    folder?: boolean | Document$folderArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | Document$workspaceArgs<ExtArgs>
    DocumentPage?: boolean | Document$DocumentPageArgs<ExtArgs>
    entity?: boolean | Document$entityArgs<ExtArgs>
    entities?: boolean | Document$entitiesArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    uploadedAt?: boolean
    workspaceId?: boolean
    author?: boolean
    chatAgentTaskId?: boolean
    createdById?: boolean
    dateOrPeriod?: boolean
    description?: boolean
    documentAnalyserTaskId?: boolean
    fileType?: boolean
    folderId?: boolean
    fullText?: boolean
    language?: boolean
    metadata?: boolean
    projectId?: boolean
    url?: boolean
    fileSize?: boolean
    preprocessStatus?: boolean
    chatAgentTask?: boolean | Document$chatAgentTaskArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    documentAnalyserTask?: boolean | Document$documentAnalyserTaskArgs<ExtArgs>
    folder?: boolean | Document$folderArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | Document$workspaceArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    filename?: boolean
    uploadedAt?: boolean
    workspaceId?: boolean
    author?: boolean
    chatAgentTaskId?: boolean
    createdById?: boolean
    dateOrPeriod?: boolean
    description?: boolean
    documentAnalyserTaskId?: boolean
    fileType?: boolean
    folderId?: boolean
    fullText?: boolean
    language?: boolean
    metadata?: boolean
    projectId?: boolean
    url?: boolean
    fileSize?: boolean
    preprocessStatus?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatAgentTask?: boolean | Document$chatAgentTaskArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    documentAnalyserTask?: boolean | Document$documentAnalyserTaskArgs<ExtArgs>
    folder?: boolean | Document$folderArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | Document$workspaceArgs<ExtArgs>
    DocumentPage?: boolean | Document$DocumentPageArgs<ExtArgs>
    entity?: boolean | Document$entityArgs<ExtArgs>
    entities?: boolean | Document$entitiesArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatAgentTask?: boolean | Document$chatAgentTaskArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    documentAnalyserTask?: boolean | Document$documentAnalyserTaskArgs<ExtArgs>
    folder?: boolean | Document$folderArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | Document$workspaceArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      chatAgentTask: Prisma.$ChatAgentTaskPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      documentAnalyserTask: Prisma.$DocumentAnalyserTaskPayload<ExtArgs> | null
      folder: Prisma.$FolderPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs>
      workspace: Prisma.$WorkspacePayload<ExtArgs> | null
      DocumentPage: Prisma.$DocumentPagePayload<ExtArgs>[]
      entity: Prisma.$EntityPayload<ExtArgs>[]
      entities: Prisma.$EntityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      uploadedAt: Date
      workspaceId: string | null
      author: string | null
      chatAgentTaskId: string | null
      createdById: string
      dateOrPeriod: string | null
      description: string | null
      documentAnalyserTaskId: string | null
      fileType: string
      folderId: string | null
      fullText: string | null
      language: string | null
      metadata: string | null
      projectId: string
      url: string
      fileSize: number | null
      preprocessStatus: $Enums.DocumentPreprocessStatus
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatAgentTask<T extends Document$chatAgentTaskArgs<ExtArgs> = {}>(args?: Subset<T, Document$chatAgentTaskArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documentAnalyserTask<T extends Document$documentAnalyserTaskArgs<ExtArgs> = {}>(args?: Subset<T, Document$documentAnalyserTaskArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    folder<T extends Document$folderArgs<ExtArgs> = {}>(args?: Subset<T, Document$folderArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workspace<T extends Document$workspaceArgs<ExtArgs> = {}>(args?: Subset<T, Document$workspaceArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    DocumentPage<T extends Document$DocumentPageArgs<ExtArgs> = {}>(args?: Subset<T, Document$DocumentPageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "findMany"> | Null>
    entity<T extends Document$entityArgs<ExtArgs> = {}>(args?: Subset<T, Document$entityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany"> | Null>
    entities<T extends Document$entitiesArgs<ExtArgs> = {}>(args?: Subset<T, Document$entitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly filename: FieldRef<"Document", 'String'>
    readonly uploadedAt: FieldRef<"Document", 'DateTime'>
    readonly workspaceId: FieldRef<"Document", 'String'>
    readonly author: FieldRef<"Document", 'String'>
    readonly chatAgentTaskId: FieldRef<"Document", 'String'>
    readonly createdById: FieldRef<"Document", 'String'>
    readonly dateOrPeriod: FieldRef<"Document", 'String'>
    readonly description: FieldRef<"Document", 'String'>
    readonly documentAnalyserTaskId: FieldRef<"Document", 'String'>
    readonly fileType: FieldRef<"Document", 'String'>
    readonly folderId: FieldRef<"Document", 'String'>
    readonly fullText: FieldRef<"Document", 'String'>
    readonly language: FieldRef<"Document", 'String'>
    readonly metadata: FieldRef<"Document", 'String'>
    readonly projectId: FieldRef<"Document", 'String'>
    readonly url: FieldRef<"Document", 'String'>
    readonly fileSize: FieldRef<"Document", 'Int'>
    readonly preprocessStatus: FieldRef<"Document", 'DocumentPreprocessStatus'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document.chatAgentTask
   */
  export type Document$chatAgentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    where?: ChatAgentTaskWhereInput
  }

  /**
   * Document.documentAnalyserTask
   */
  export type Document$documentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * Document.folder
   */
  export type Document$folderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * Document.workspace
   */
  export type Document$workspaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    where?: WorkspaceWhereInput
  }

  /**
   * Document.DocumentPage
   */
  export type Document$DocumentPageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    where?: DocumentPageWhereInput
    orderBy?: DocumentPageOrderByWithRelationInput | DocumentPageOrderByWithRelationInput[]
    cursor?: DocumentPageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentPageScalarFieldEnum | DocumentPageScalarFieldEnum[]
  }

  /**
   * Document.entity
   */
  export type Document$entityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    cursor?: EntityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Document.entities
   */
  export type Document$entitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    cursor?: EntityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model DocumentPage
   */

  export type AggregateDocumentPage = {
    _count: DocumentPageCountAggregateOutputType | null
    _avg: DocumentPageAvgAggregateOutputType | null
    _sum: DocumentPageSumAggregateOutputType | null
    _min: DocumentPageMinAggregateOutputType | null
    _max: DocumentPageMaxAggregateOutputType | null
  }

  export type DocumentPageAvgAggregateOutputType = {
    pageNumber: number | null
  }

  export type DocumentPageSumAggregateOutputType = {
    pageNumber: number | null
  }

  export type DocumentPageMinAggregateOutputType = {
    id: string | null
    pageNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
    documentId: string | null
    imagePath: string | null
  }

  export type DocumentPageMaxAggregateOutputType = {
    id: string | null
    pageNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
    documentId: string | null
    imagePath: string | null
  }

  export type DocumentPageCountAggregateOutputType = {
    id: number
    pageNumber: number
    createdAt: number
    updatedAt: number
    documentId: number
    imagePath: number
    _all: number
  }


  export type DocumentPageAvgAggregateInputType = {
    pageNumber?: true
  }

  export type DocumentPageSumAggregateInputType = {
    pageNumber?: true
  }

  export type DocumentPageMinAggregateInputType = {
    id?: true
    pageNumber?: true
    createdAt?: true
    updatedAt?: true
    documentId?: true
    imagePath?: true
  }

  export type DocumentPageMaxAggregateInputType = {
    id?: true
    pageNumber?: true
    createdAt?: true
    updatedAt?: true
    documentId?: true
    imagePath?: true
  }

  export type DocumentPageCountAggregateInputType = {
    id?: true
    pageNumber?: true
    createdAt?: true
    updatedAt?: true
    documentId?: true
    imagePath?: true
    _all?: true
  }

  export type DocumentPageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentPage to aggregate.
     */
    where?: DocumentPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPages to fetch.
     */
    orderBy?: DocumentPageOrderByWithRelationInput | DocumentPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentPages
    **/
    _count?: true | DocumentPageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentPageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentPageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentPageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentPageMaxAggregateInputType
  }

  export type GetDocumentPageAggregateType<T extends DocumentPageAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentPage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentPage[P]>
      : GetScalarType<T[P], AggregateDocumentPage[P]>
  }




  export type DocumentPageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentPageWhereInput
    orderBy?: DocumentPageOrderByWithAggregationInput | DocumentPageOrderByWithAggregationInput[]
    by: DocumentPageScalarFieldEnum[] | DocumentPageScalarFieldEnum
    having?: DocumentPageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentPageCountAggregateInputType | true
    _avg?: DocumentPageAvgAggregateInputType
    _sum?: DocumentPageSumAggregateInputType
    _min?: DocumentPageMinAggregateInputType
    _max?: DocumentPageMaxAggregateInputType
  }

  export type DocumentPageGroupByOutputType = {
    id: string
    pageNumber: number
    createdAt: Date
    updatedAt: Date
    documentId: string
    imagePath: string | null
    _count: DocumentPageCountAggregateOutputType | null
    _avg: DocumentPageAvgAggregateOutputType | null
    _sum: DocumentPageSumAggregateOutputType | null
    _min: DocumentPageMinAggregateOutputType | null
    _max: DocumentPageMaxAggregateOutputType | null
  }

  type GetDocumentPageGroupByPayload<T extends DocumentPageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentPageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentPageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentPageGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentPageGroupByOutputType[P]>
        }
      >
    >


  export type DocumentPageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pageNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentId?: boolean
    imagePath?: boolean
    Document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentPage"]>

  export type DocumentPageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pageNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentId?: boolean
    imagePath?: boolean
    Document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentPage"]>

  export type DocumentPageSelectScalar = {
    id?: boolean
    pageNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentId?: boolean
    imagePath?: boolean
  }

  export type DocumentPageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Document?: boolean | DocumentDefaultArgs<ExtArgs>
  }
  export type DocumentPageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Document?: boolean | DocumentDefaultArgs<ExtArgs>
  }

  export type $DocumentPagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentPage"
    objects: {
      Document: Prisma.$DocumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pageNumber: number
      createdAt: Date
      updatedAt: Date
      documentId: string
      imagePath: string | null
    }, ExtArgs["result"]["documentPage"]>
    composites: {}
  }

  type DocumentPageGetPayload<S extends boolean | null | undefined | DocumentPageDefaultArgs> = $Result.GetResult<Prisma.$DocumentPagePayload, S>

  type DocumentPageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentPageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentPageCountAggregateInputType | true
    }

  export interface DocumentPageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentPage'], meta: { name: 'DocumentPage' } }
    /**
     * Find zero or one DocumentPage that matches the filter.
     * @param {DocumentPageFindUniqueArgs} args - Arguments to find a DocumentPage
     * @example
     * // Get one DocumentPage
     * const documentPage = await prisma.documentPage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentPageFindUniqueArgs>(args: SelectSubset<T, DocumentPageFindUniqueArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DocumentPage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentPageFindUniqueOrThrowArgs} args - Arguments to find a DocumentPage
     * @example
     * // Get one DocumentPage
     * const documentPage = await prisma.documentPage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentPageFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentPageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DocumentPage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPageFindFirstArgs} args - Arguments to find a DocumentPage
     * @example
     * // Get one DocumentPage
     * const documentPage = await prisma.documentPage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentPageFindFirstArgs>(args?: SelectSubset<T, DocumentPageFindFirstArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DocumentPage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPageFindFirstOrThrowArgs} args - Arguments to find a DocumentPage
     * @example
     * // Get one DocumentPage
     * const documentPage = await prisma.documentPage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentPageFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentPageFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DocumentPages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentPages
     * const documentPages = await prisma.documentPage.findMany()
     * 
     * // Get first 10 DocumentPages
     * const documentPages = await prisma.documentPage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentPageWithIdOnly = await prisma.documentPage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentPageFindManyArgs>(args?: SelectSubset<T, DocumentPageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DocumentPage.
     * @param {DocumentPageCreateArgs} args - Arguments to create a DocumentPage.
     * @example
     * // Create one DocumentPage
     * const DocumentPage = await prisma.documentPage.create({
     *   data: {
     *     // ... data to create a DocumentPage
     *   }
     * })
     * 
     */
    create<T extends DocumentPageCreateArgs>(args: SelectSubset<T, DocumentPageCreateArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DocumentPages.
     * @param {DocumentPageCreateManyArgs} args - Arguments to create many DocumentPages.
     * @example
     * // Create many DocumentPages
     * const documentPage = await prisma.documentPage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentPageCreateManyArgs>(args?: SelectSubset<T, DocumentPageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentPages and returns the data saved in the database.
     * @param {DocumentPageCreateManyAndReturnArgs} args - Arguments to create many DocumentPages.
     * @example
     * // Create many DocumentPages
     * const documentPage = await prisma.documentPage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentPages and only return the `id`
     * const documentPageWithIdOnly = await prisma.documentPage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentPageCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentPageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DocumentPage.
     * @param {DocumentPageDeleteArgs} args - Arguments to delete one DocumentPage.
     * @example
     * // Delete one DocumentPage
     * const DocumentPage = await prisma.documentPage.delete({
     *   where: {
     *     // ... filter to delete one DocumentPage
     *   }
     * })
     * 
     */
    delete<T extends DocumentPageDeleteArgs>(args: SelectSubset<T, DocumentPageDeleteArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DocumentPage.
     * @param {DocumentPageUpdateArgs} args - Arguments to update one DocumentPage.
     * @example
     * // Update one DocumentPage
     * const documentPage = await prisma.documentPage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentPageUpdateArgs>(args: SelectSubset<T, DocumentPageUpdateArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DocumentPages.
     * @param {DocumentPageDeleteManyArgs} args - Arguments to filter DocumentPages to delete.
     * @example
     * // Delete a few DocumentPages
     * const { count } = await prisma.documentPage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentPageDeleteManyArgs>(args?: SelectSubset<T, DocumentPageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentPages
     * const documentPage = await prisma.documentPage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentPageUpdateManyArgs>(args: SelectSubset<T, DocumentPageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DocumentPage.
     * @param {DocumentPageUpsertArgs} args - Arguments to update or create a DocumentPage.
     * @example
     * // Update or create a DocumentPage
     * const documentPage = await prisma.documentPage.upsert({
     *   create: {
     *     // ... data to create a DocumentPage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentPage we want to update
     *   }
     * })
     */
    upsert<T extends DocumentPageUpsertArgs>(args: SelectSubset<T, DocumentPageUpsertArgs<ExtArgs>>): Prisma__DocumentPageClient<$Result.GetResult<Prisma.$DocumentPagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DocumentPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPageCountArgs} args - Arguments to filter DocumentPages to count.
     * @example
     * // Count the number of DocumentPages
     * const count = await prisma.documentPage.count({
     *   where: {
     *     // ... the filter for the DocumentPages we want to count
     *   }
     * })
    **/
    count<T extends DocumentPageCountArgs>(
      args?: Subset<T, DocumentPageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentPageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentPageAggregateArgs>(args: Subset<T, DocumentPageAggregateArgs>): Prisma.PrismaPromise<GetDocumentPageAggregateType<T>>

    /**
     * Group by DocumentPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentPageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentPageGroupByArgs['orderBy'] }
        : { orderBy?: DocumentPageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentPageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentPage model
   */
  readonly fields: DocumentPageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentPage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentPageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentPage model
   */ 
  interface DocumentPageFieldRefs {
    readonly id: FieldRef<"DocumentPage", 'String'>
    readonly pageNumber: FieldRef<"DocumentPage", 'Int'>
    readonly createdAt: FieldRef<"DocumentPage", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentPage", 'DateTime'>
    readonly documentId: FieldRef<"DocumentPage", 'String'>
    readonly imagePath: FieldRef<"DocumentPage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentPage findUnique
   */
  export type DocumentPageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPage to fetch.
     */
    where: DocumentPageWhereUniqueInput
  }

  /**
   * DocumentPage findUniqueOrThrow
   */
  export type DocumentPageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPage to fetch.
     */
    where: DocumentPageWhereUniqueInput
  }

  /**
   * DocumentPage findFirst
   */
  export type DocumentPageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPage to fetch.
     */
    where?: DocumentPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPages to fetch.
     */
    orderBy?: DocumentPageOrderByWithRelationInput | DocumentPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentPages.
     */
    cursor?: DocumentPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentPages.
     */
    distinct?: DocumentPageScalarFieldEnum | DocumentPageScalarFieldEnum[]
  }

  /**
   * DocumentPage findFirstOrThrow
   */
  export type DocumentPageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPage to fetch.
     */
    where?: DocumentPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPages to fetch.
     */
    orderBy?: DocumentPageOrderByWithRelationInput | DocumentPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentPages.
     */
    cursor?: DocumentPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentPages.
     */
    distinct?: DocumentPageScalarFieldEnum | DocumentPageScalarFieldEnum[]
  }

  /**
   * DocumentPage findMany
   */
  export type DocumentPageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPages to fetch.
     */
    where?: DocumentPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPages to fetch.
     */
    orderBy?: DocumentPageOrderByWithRelationInput | DocumentPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentPages.
     */
    cursor?: DocumentPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPages.
     */
    skip?: number
    distinct?: DocumentPageScalarFieldEnum | DocumentPageScalarFieldEnum[]
  }

  /**
   * DocumentPage create
   */
  export type DocumentPageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentPage.
     */
    data: XOR<DocumentPageCreateInput, DocumentPageUncheckedCreateInput>
  }

  /**
   * DocumentPage createMany
   */
  export type DocumentPageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentPages.
     */
    data: DocumentPageCreateManyInput | DocumentPageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentPage createManyAndReturn
   */
  export type DocumentPageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DocumentPages.
     */
    data: DocumentPageCreateManyInput | DocumentPageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentPage update
   */
  export type DocumentPageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentPage.
     */
    data: XOR<DocumentPageUpdateInput, DocumentPageUncheckedUpdateInput>
    /**
     * Choose, which DocumentPage to update.
     */
    where: DocumentPageWhereUniqueInput
  }

  /**
   * DocumentPage updateMany
   */
  export type DocumentPageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentPages.
     */
    data: XOR<DocumentPageUpdateManyMutationInput, DocumentPageUncheckedUpdateManyInput>
    /**
     * Filter which DocumentPages to update
     */
    where?: DocumentPageWhereInput
  }

  /**
   * DocumentPage upsert
   */
  export type DocumentPageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentPage to update in case it exists.
     */
    where: DocumentPageWhereUniqueInput
    /**
     * In case the DocumentPage found by the `where` argument doesn't exist, create a new DocumentPage with this data.
     */
    create: XOR<DocumentPageCreateInput, DocumentPageUncheckedCreateInput>
    /**
     * In case the DocumentPage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentPageUpdateInput, DocumentPageUncheckedUpdateInput>
  }

  /**
   * DocumentPage delete
   */
  export type DocumentPageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
    /**
     * Filter which DocumentPage to delete.
     */
    where: DocumentPageWhereUniqueInput
  }

  /**
   * DocumentPage deleteMany
   */
  export type DocumentPageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentPages to delete
     */
    where?: DocumentPageWhereInput
  }

  /**
   * DocumentPage without action
   */
  export type DocumentPageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPage
     */
    select?: DocumentPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPageInclude<ExtArgs> | null
  }


  /**
   * Model Folder
   */

  export type AggregateFolder = {
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  export type FolderMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    parentFolderId: string | null
    projectId: string | null
    createdById: string | null
  }

  export type FolderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    parentFolderId: string | null
    projectId: string | null
    createdById: string | null
  }

  export type FolderCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    parentFolderId: number
    projectId: number
    createdById: number
    _all: number
  }


  export type FolderMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    parentFolderId?: true
    projectId?: true
    createdById?: true
  }

  export type FolderMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    parentFolderId?: true
    projectId?: true
    createdById?: true
  }

  export type FolderCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    parentFolderId?: true
    projectId?: true
    createdById?: true
    _all?: true
  }

  export type FolderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folder to aggregate.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Folders
    **/
    _count?: true | FolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FolderMaxAggregateInputType
  }

  export type GetFolderAggregateType<T extends FolderAggregateArgs> = {
        [P in keyof T & keyof AggregateFolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFolder[P]>
      : GetScalarType<T[P], AggregateFolder[P]>
  }




  export type FolderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithAggregationInput | FolderOrderByWithAggregationInput[]
    by: FolderScalarFieldEnum[] | FolderScalarFieldEnum
    having?: FolderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FolderCountAggregateInputType | true
    _min?: FolderMinAggregateInputType
    _max?: FolderMaxAggregateInputType
  }

  export type FolderGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    parentFolderId: string | null
    projectId: string
    createdById: string
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  type GetFolderGroupByPayload<T extends FolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FolderGroupByOutputType[P]>
            : GetScalarType<T[P], FolderGroupByOutputType[P]>
        }
      >
    >


  export type FolderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentFolderId?: boolean
    projectId?: boolean
    createdById?: boolean
    documents?: boolean | Folder$documentsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentFolder?: boolean | Folder$parentFolderArgs<ExtArgs>
    subfolders?: boolean | Folder$subfoldersArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentFolderId?: boolean
    projectId?: boolean
    createdById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentFolder?: boolean | Folder$parentFolderArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentFolderId?: boolean
    projectId?: boolean
    createdById?: boolean
  }

  export type FolderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | Folder$documentsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentFolder?: boolean | Folder$parentFolderArgs<ExtArgs>
    subfolders?: boolean | Folder$subfoldersArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FolderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    parentFolder?: boolean | Folder$parentFolderArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $FolderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Folder"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
      parentFolder: Prisma.$FolderPayload<ExtArgs> | null
      subfolders: Prisma.$FolderPayload<ExtArgs>[]
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      parentFolderId: string | null
      projectId: string
      createdById: string
    }, ExtArgs["result"]["folder"]>
    composites: {}
  }

  type FolderGetPayload<S extends boolean | null | undefined | FolderDefaultArgs> = $Result.GetResult<Prisma.$FolderPayload, S>

  type FolderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FolderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FolderCountAggregateInputType | true
    }

  export interface FolderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Folder'], meta: { name: 'Folder' } }
    /**
     * Find zero or one Folder that matches the filter.
     * @param {FolderFindUniqueArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FolderFindUniqueArgs>(args: SelectSubset<T, FolderFindUniqueArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Folder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FolderFindUniqueOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FolderFindUniqueOrThrowArgs>(args: SelectSubset<T, FolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Folder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FolderFindFirstArgs>(args?: SelectSubset<T, FolderFindFirstArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Folder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FolderFindFirstOrThrowArgs>(args?: SelectSubset<T, FolderFindFirstOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Folders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Folders
     * const folders = await prisma.folder.findMany()
     * 
     * // Get first 10 Folders
     * const folders = await prisma.folder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const folderWithIdOnly = await prisma.folder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FolderFindManyArgs>(args?: SelectSubset<T, FolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Folder.
     * @param {FolderCreateArgs} args - Arguments to create a Folder.
     * @example
     * // Create one Folder
     * const Folder = await prisma.folder.create({
     *   data: {
     *     // ... data to create a Folder
     *   }
     * })
     * 
     */
    create<T extends FolderCreateArgs>(args: SelectSubset<T, FolderCreateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Folders.
     * @param {FolderCreateManyArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FolderCreateManyArgs>(args?: SelectSubset<T, FolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Folders and returns the data saved in the database.
     * @param {FolderCreateManyAndReturnArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Folders and only return the `id`
     * const folderWithIdOnly = await prisma.folder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FolderCreateManyAndReturnArgs>(args?: SelectSubset<T, FolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Folder.
     * @param {FolderDeleteArgs} args - Arguments to delete one Folder.
     * @example
     * // Delete one Folder
     * const Folder = await prisma.folder.delete({
     *   where: {
     *     // ... filter to delete one Folder
     *   }
     * })
     * 
     */
    delete<T extends FolderDeleteArgs>(args: SelectSubset<T, FolderDeleteArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Folder.
     * @param {FolderUpdateArgs} args - Arguments to update one Folder.
     * @example
     * // Update one Folder
     * const folder = await prisma.folder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FolderUpdateArgs>(args: SelectSubset<T, FolderUpdateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Folders.
     * @param {FolderDeleteManyArgs} args - Arguments to filter Folders to delete.
     * @example
     * // Delete a few Folders
     * const { count } = await prisma.folder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FolderDeleteManyArgs>(args?: SelectSubset<T, FolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Folders
     * const folder = await prisma.folder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FolderUpdateManyArgs>(args: SelectSubset<T, FolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Folder.
     * @param {FolderUpsertArgs} args - Arguments to update or create a Folder.
     * @example
     * // Update or create a Folder
     * const folder = await prisma.folder.upsert({
     *   create: {
     *     // ... data to create a Folder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Folder we want to update
     *   }
     * })
     */
    upsert<T extends FolderUpsertArgs>(args: SelectSubset<T, FolderUpsertArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderCountArgs} args - Arguments to filter Folders to count.
     * @example
     * // Count the number of Folders
     * const count = await prisma.folder.count({
     *   where: {
     *     // ... the filter for the Folders we want to count
     *   }
     * })
    **/
    count<T extends FolderCountArgs>(
      args?: Subset<T, FolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FolderAggregateArgs>(args: Subset<T, FolderAggregateArgs>): Prisma.PrismaPromise<GetFolderAggregateType<T>>

    /**
     * Group by Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FolderGroupByArgs['orderBy'] }
        : { orderBy?: FolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Folder model
   */
  readonly fields: FolderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Folder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FolderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends Folder$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Folder$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parentFolder<T extends Folder$parentFolderArgs<ExtArgs> = {}>(args?: Subset<T, Folder$parentFolderArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    subfolders<T extends Folder$subfoldersArgs<ExtArgs> = {}>(args?: Subset<T, Folder$subfoldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany"> | Null>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Folder model
   */ 
  interface FolderFieldRefs {
    readonly id: FieldRef<"Folder", 'String'>
    readonly name: FieldRef<"Folder", 'String'>
    readonly createdAt: FieldRef<"Folder", 'DateTime'>
    readonly updatedAt: FieldRef<"Folder", 'DateTime'>
    readonly parentFolderId: FieldRef<"Folder", 'String'>
    readonly projectId: FieldRef<"Folder", 'String'>
    readonly createdById: FieldRef<"Folder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Folder findUnique
   */
  export type FolderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findUniqueOrThrow
   */
  export type FolderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findFirst
   */
  export type FolderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findFirstOrThrow
   */
  export type FolderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findMany
   */
  export type FolderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folders to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder create
   */
  export type FolderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to create a Folder.
     */
    data: XOR<FolderCreateInput, FolderUncheckedCreateInput>
  }

  /**
   * Folder createMany
   */
  export type FolderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Folder createManyAndReturn
   */
  export type FolderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Folder update
   */
  export type FolderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to update a Folder.
     */
    data: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
    /**
     * Choose, which Folder to update.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder updateMany
   */
  export type FolderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Folders.
     */
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyInput>
    /**
     * Filter which Folders to update
     */
    where?: FolderWhereInput
  }

  /**
   * Folder upsert
   */
  export type FolderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The filter to search for the Folder to update in case it exists.
     */
    where: FolderWhereUniqueInput
    /**
     * In case the Folder found by the `where` argument doesn't exist, create a new Folder with this data.
     */
    create: XOR<FolderCreateInput, FolderUncheckedCreateInput>
    /**
     * In case the Folder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
  }

  /**
   * Folder delete
   */
  export type FolderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter which Folder to delete.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder deleteMany
   */
  export type FolderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folders to delete
     */
    where?: FolderWhereInput
  }

  /**
   * Folder.documents
   */
  export type Folder$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Folder.parentFolder
   */
  export type Folder$parentFolderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * Folder.subfolders
   */
  export type Folder$subfoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder without action
   */
  export type FolderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
  }


  /**
   * Model DocumentAnalyserTask
   */

  export type AggregateDocumentAnalyserTask = {
    _count: DocumentAnalyserTaskCountAggregateOutputType | null
    _min: DocumentAnalyserTaskMinAggregateOutputType | null
    _max: DocumentAnalyserTaskMaxAggregateOutputType | null
  }

  export type DocumentAnalyserTaskMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workspaceId: string | null
    projectId: string | null
    status: $Enums.DocumentAnalyserTaskStatus | null
    outputDescription: string | null
    inputContext: string | null
  }

  export type DocumentAnalyserTaskMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workspaceId: string | null
    projectId: string | null
    status: $Enums.DocumentAnalyserTaskStatus | null
    outputDescription: string | null
    inputContext: string | null
  }

  export type DocumentAnalyserTaskCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    workspaceId: number
    projectId: number
    nextSteps: number
    status: number
    outputDescription: number
    inputContext: number
    _all: number
  }


  export type DocumentAnalyserTaskMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    projectId?: true
    status?: true
    outputDescription?: true
    inputContext?: true
  }

  export type DocumentAnalyserTaskMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    projectId?: true
    status?: true
    outputDescription?: true
    inputContext?: true
  }

  export type DocumentAnalyserTaskCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    projectId?: true
    nextSteps?: true
    status?: true
    outputDescription?: true
    inputContext?: true
    _all?: true
  }

  export type DocumentAnalyserTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentAnalyserTask to aggregate.
     */
    where?: DocumentAnalyserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAnalyserTasks to fetch.
     */
    orderBy?: DocumentAnalyserTaskOrderByWithRelationInput | DocumentAnalyserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentAnalyserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAnalyserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAnalyserTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentAnalyserTasks
    **/
    _count?: true | DocumentAnalyserTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentAnalyserTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentAnalyserTaskMaxAggregateInputType
  }

  export type GetDocumentAnalyserTaskAggregateType<T extends DocumentAnalyserTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentAnalyserTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentAnalyserTask[P]>
      : GetScalarType<T[P], AggregateDocumentAnalyserTask[P]>
  }




  export type DocumentAnalyserTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentAnalyserTaskWhereInput
    orderBy?: DocumentAnalyserTaskOrderByWithAggregationInput | DocumentAnalyserTaskOrderByWithAggregationInput[]
    by: DocumentAnalyserTaskScalarFieldEnum[] | DocumentAnalyserTaskScalarFieldEnum
    having?: DocumentAnalyserTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentAnalyserTaskCountAggregateInputType | true
    _min?: DocumentAnalyserTaskMinAggregateInputType
    _max?: DocumentAnalyserTaskMaxAggregateInputType
  }

  export type DocumentAnalyserTaskGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    workspaceId: string
    projectId: string
    nextSteps: string[]
    status: $Enums.DocumentAnalyserTaskStatus
    outputDescription: string | null
    inputContext: string | null
    _count: DocumentAnalyserTaskCountAggregateOutputType | null
    _min: DocumentAnalyserTaskMinAggregateOutputType | null
    _max: DocumentAnalyserTaskMaxAggregateOutputType | null
  }

  type GetDocumentAnalyserTaskGroupByPayload<T extends DocumentAnalyserTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentAnalyserTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentAnalyserTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentAnalyserTaskGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentAnalyserTaskGroupByOutputType[P]>
        }
      >
    >


  export type DocumentAnalyserTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    projectId?: boolean
    nextSteps?: boolean
    status?: boolean
    outputDescription?: boolean
    inputContext?: boolean
    inputDocuments?: boolean | DocumentAnalyserTask$inputDocumentsArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    entities?: boolean | DocumentAnalyserTask$entitiesArgs<ExtArgs>
    observations?: boolean | DocumentAnalyserTask$observationsArgs<ExtArgs>
    references?: boolean | DocumentAnalyserTask$referencesArgs<ExtArgs>
    _count?: boolean | DocumentAnalyserTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentAnalyserTask"]>

  export type DocumentAnalyserTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    projectId?: boolean
    nextSteps?: boolean
    status?: boolean
    outputDescription?: boolean
    inputContext?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentAnalyserTask"]>

  export type DocumentAnalyserTaskSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    projectId?: boolean
    nextSteps?: boolean
    status?: boolean
    outputDescription?: boolean
    inputContext?: boolean
  }

  export type DocumentAnalyserTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inputDocuments?: boolean | DocumentAnalyserTask$inputDocumentsArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    entities?: boolean | DocumentAnalyserTask$entitiesArgs<ExtArgs>
    observations?: boolean | DocumentAnalyserTask$observationsArgs<ExtArgs>
    references?: boolean | DocumentAnalyserTask$referencesArgs<ExtArgs>
    _count?: boolean | DocumentAnalyserTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentAnalyserTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $DocumentAnalyserTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentAnalyserTask"
    objects: {
      inputDocuments: Prisma.$DocumentPayload<ExtArgs>[]
      project: Prisma.$ProjectPayload<ExtArgs>
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      entities: Prisma.$EntityPayload<ExtArgs>[]
      observations: Prisma.$ObservationPayload<ExtArgs>[]
      references: Prisma.$ReferencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      workspaceId: string
      projectId: string
      nextSteps: string[]
      status: $Enums.DocumentAnalyserTaskStatus
      outputDescription: string | null
      inputContext: string | null
    }, ExtArgs["result"]["documentAnalyserTask"]>
    composites: {}
  }

  type DocumentAnalyserTaskGetPayload<S extends boolean | null | undefined | DocumentAnalyserTaskDefaultArgs> = $Result.GetResult<Prisma.$DocumentAnalyserTaskPayload, S>

  type DocumentAnalyserTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentAnalyserTaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentAnalyserTaskCountAggregateInputType | true
    }

  export interface DocumentAnalyserTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentAnalyserTask'], meta: { name: 'DocumentAnalyserTask' } }
    /**
     * Find zero or one DocumentAnalyserTask that matches the filter.
     * @param {DocumentAnalyserTaskFindUniqueArgs} args - Arguments to find a DocumentAnalyserTask
     * @example
     * // Get one DocumentAnalyserTask
     * const documentAnalyserTask = await prisma.documentAnalyserTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentAnalyserTaskFindUniqueArgs>(args: SelectSubset<T, DocumentAnalyserTaskFindUniqueArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DocumentAnalyserTask that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentAnalyserTaskFindUniqueOrThrowArgs} args - Arguments to find a DocumentAnalyserTask
     * @example
     * // Get one DocumentAnalyserTask
     * const documentAnalyserTask = await prisma.documentAnalyserTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentAnalyserTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentAnalyserTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DocumentAnalyserTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAnalyserTaskFindFirstArgs} args - Arguments to find a DocumentAnalyserTask
     * @example
     * // Get one DocumentAnalyserTask
     * const documentAnalyserTask = await prisma.documentAnalyserTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentAnalyserTaskFindFirstArgs>(args?: SelectSubset<T, DocumentAnalyserTaskFindFirstArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DocumentAnalyserTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAnalyserTaskFindFirstOrThrowArgs} args - Arguments to find a DocumentAnalyserTask
     * @example
     * // Get one DocumentAnalyserTask
     * const documentAnalyserTask = await prisma.documentAnalyserTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentAnalyserTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentAnalyserTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DocumentAnalyserTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAnalyserTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentAnalyserTasks
     * const documentAnalyserTasks = await prisma.documentAnalyserTask.findMany()
     * 
     * // Get first 10 DocumentAnalyserTasks
     * const documentAnalyserTasks = await prisma.documentAnalyserTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentAnalyserTaskWithIdOnly = await prisma.documentAnalyserTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentAnalyserTaskFindManyArgs>(args?: SelectSubset<T, DocumentAnalyserTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DocumentAnalyserTask.
     * @param {DocumentAnalyserTaskCreateArgs} args - Arguments to create a DocumentAnalyserTask.
     * @example
     * // Create one DocumentAnalyserTask
     * const DocumentAnalyserTask = await prisma.documentAnalyserTask.create({
     *   data: {
     *     // ... data to create a DocumentAnalyserTask
     *   }
     * })
     * 
     */
    create<T extends DocumentAnalyserTaskCreateArgs>(args: SelectSubset<T, DocumentAnalyserTaskCreateArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DocumentAnalyserTasks.
     * @param {DocumentAnalyserTaskCreateManyArgs} args - Arguments to create many DocumentAnalyserTasks.
     * @example
     * // Create many DocumentAnalyserTasks
     * const documentAnalyserTask = await prisma.documentAnalyserTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentAnalyserTaskCreateManyArgs>(args?: SelectSubset<T, DocumentAnalyserTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentAnalyserTasks and returns the data saved in the database.
     * @param {DocumentAnalyserTaskCreateManyAndReturnArgs} args - Arguments to create many DocumentAnalyserTasks.
     * @example
     * // Create many DocumentAnalyserTasks
     * const documentAnalyserTask = await prisma.documentAnalyserTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentAnalyserTasks and only return the `id`
     * const documentAnalyserTaskWithIdOnly = await prisma.documentAnalyserTask.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentAnalyserTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentAnalyserTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DocumentAnalyserTask.
     * @param {DocumentAnalyserTaskDeleteArgs} args - Arguments to delete one DocumentAnalyserTask.
     * @example
     * // Delete one DocumentAnalyserTask
     * const DocumentAnalyserTask = await prisma.documentAnalyserTask.delete({
     *   where: {
     *     // ... filter to delete one DocumentAnalyserTask
     *   }
     * })
     * 
     */
    delete<T extends DocumentAnalyserTaskDeleteArgs>(args: SelectSubset<T, DocumentAnalyserTaskDeleteArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DocumentAnalyserTask.
     * @param {DocumentAnalyserTaskUpdateArgs} args - Arguments to update one DocumentAnalyserTask.
     * @example
     * // Update one DocumentAnalyserTask
     * const documentAnalyserTask = await prisma.documentAnalyserTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentAnalyserTaskUpdateArgs>(args: SelectSubset<T, DocumentAnalyserTaskUpdateArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DocumentAnalyserTasks.
     * @param {DocumentAnalyserTaskDeleteManyArgs} args - Arguments to filter DocumentAnalyserTasks to delete.
     * @example
     * // Delete a few DocumentAnalyserTasks
     * const { count } = await prisma.documentAnalyserTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentAnalyserTaskDeleteManyArgs>(args?: SelectSubset<T, DocumentAnalyserTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentAnalyserTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAnalyserTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentAnalyserTasks
     * const documentAnalyserTask = await prisma.documentAnalyserTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentAnalyserTaskUpdateManyArgs>(args: SelectSubset<T, DocumentAnalyserTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DocumentAnalyserTask.
     * @param {DocumentAnalyserTaskUpsertArgs} args - Arguments to update or create a DocumentAnalyserTask.
     * @example
     * // Update or create a DocumentAnalyserTask
     * const documentAnalyserTask = await prisma.documentAnalyserTask.upsert({
     *   create: {
     *     // ... data to create a DocumentAnalyserTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentAnalyserTask we want to update
     *   }
     * })
     */
    upsert<T extends DocumentAnalyserTaskUpsertArgs>(args: SelectSubset<T, DocumentAnalyserTaskUpsertArgs<ExtArgs>>): Prisma__DocumentAnalyserTaskClient<$Result.GetResult<Prisma.$DocumentAnalyserTaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DocumentAnalyserTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAnalyserTaskCountArgs} args - Arguments to filter DocumentAnalyserTasks to count.
     * @example
     * // Count the number of DocumentAnalyserTasks
     * const count = await prisma.documentAnalyserTask.count({
     *   where: {
     *     // ... the filter for the DocumentAnalyserTasks we want to count
     *   }
     * })
    **/
    count<T extends DocumentAnalyserTaskCountArgs>(
      args?: Subset<T, DocumentAnalyserTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentAnalyserTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentAnalyserTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAnalyserTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAnalyserTaskAggregateArgs>(args: Subset<T, DocumentAnalyserTaskAggregateArgs>): Prisma.PrismaPromise<GetDocumentAnalyserTaskAggregateType<T>>

    /**
     * Group by DocumentAnalyserTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAnalyserTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentAnalyserTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentAnalyserTaskGroupByArgs['orderBy'] }
        : { orderBy?: DocumentAnalyserTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentAnalyserTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentAnalyserTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentAnalyserTask model
   */
  readonly fields: DocumentAnalyserTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentAnalyserTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentAnalyserTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inputDocuments<T extends DocumentAnalyserTask$inputDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentAnalyserTask$inputDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    entities<T extends DocumentAnalyserTask$entitiesArgs<ExtArgs> = {}>(args?: Subset<T, DocumentAnalyserTask$entitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany"> | Null>
    observations<T extends DocumentAnalyserTask$observationsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentAnalyserTask$observationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany"> | Null>
    references<T extends DocumentAnalyserTask$referencesArgs<ExtArgs> = {}>(args?: Subset<T, DocumentAnalyserTask$referencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentAnalyserTask model
   */ 
  interface DocumentAnalyserTaskFieldRefs {
    readonly id: FieldRef<"DocumentAnalyserTask", 'String'>
    readonly name: FieldRef<"DocumentAnalyserTask", 'String'>
    readonly createdAt: FieldRef<"DocumentAnalyserTask", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentAnalyserTask", 'DateTime'>
    readonly workspaceId: FieldRef<"DocumentAnalyserTask", 'String'>
    readonly projectId: FieldRef<"DocumentAnalyserTask", 'String'>
    readonly nextSteps: FieldRef<"DocumentAnalyserTask", 'String[]'>
    readonly status: FieldRef<"DocumentAnalyserTask", 'DocumentAnalyserTaskStatus'>
    readonly outputDescription: FieldRef<"DocumentAnalyserTask", 'String'>
    readonly inputContext: FieldRef<"DocumentAnalyserTask", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentAnalyserTask findUnique
   */
  export type DocumentAnalyserTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAnalyserTask to fetch.
     */
    where: DocumentAnalyserTaskWhereUniqueInput
  }

  /**
   * DocumentAnalyserTask findUniqueOrThrow
   */
  export type DocumentAnalyserTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAnalyserTask to fetch.
     */
    where: DocumentAnalyserTaskWhereUniqueInput
  }

  /**
   * DocumentAnalyserTask findFirst
   */
  export type DocumentAnalyserTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAnalyserTask to fetch.
     */
    where?: DocumentAnalyserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAnalyserTasks to fetch.
     */
    orderBy?: DocumentAnalyserTaskOrderByWithRelationInput | DocumentAnalyserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentAnalyserTasks.
     */
    cursor?: DocumentAnalyserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAnalyserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAnalyserTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentAnalyserTasks.
     */
    distinct?: DocumentAnalyserTaskScalarFieldEnum | DocumentAnalyserTaskScalarFieldEnum[]
  }

  /**
   * DocumentAnalyserTask findFirstOrThrow
   */
  export type DocumentAnalyserTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAnalyserTask to fetch.
     */
    where?: DocumentAnalyserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAnalyserTasks to fetch.
     */
    orderBy?: DocumentAnalyserTaskOrderByWithRelationInput | DocumentAnalyserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentAnalyserTasks.
     */
    cursor?: DocumentAnalyserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAnalyserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAnalyserTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentAnalyserTasks.
     */
    distinct?: DocumentAnalyserTaskScalarFieldEnum | DocumentAnalyserTaskScalarFieldEnum[]
  }

  /**
   * DocumentAnalyserTask findMany
   */
  export type DocumentAnalyserTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAnalyserTasks to fetch.
     */
    where?: DocumentAnalyserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAnalyserTasks to fetch.
     */
    orderBy?: DocumentAnalyserTaskOrderByWithRelationInput | DocumentAnalyserTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentAnalyserTasks.
     */
    cursor?: DocumentAnalyserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAnalyserTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAnalyserTasks.
     */
    skip?: number
    distinct?: DocumentAnalyserTaskScalarFieldEnum | DocumentAnalyserTaskScalarFieldEnum[]
  }

  /**
   * DocumentAnalyserTask create
   */
  export type DocumentAnalyserTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentAnalyserTask.
     */
    data: XOR<DocumentAnalyserTaskCreateInput, DocumentAnalyserTaskUncheckedCreateInput>
  }

  /**
   * DocumentAnalyserTask createMany
   */
  export type DocumentAnalyserTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentAnalyserTasks.
     */
    data: DocumentAnalyserTaskCreateManyInput | DocumentAnalyserTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentAnalyserTask createManyAndReturn
   */
  export type DocumentAnalyserTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DocumentAnalyserTasks.
     */
    data: DocumentAnalyserTaskCreateManyInput | DocumentAnalyserTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentAnalyserTask update
   */
  export type DocumentAnalyserTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentAnalyserTask.
     */
    data: XOR<DocumentAnalyserTaskUpdateInput, DocumentAnalyserTaskUncheckedUpdateInput>
    /**
     * Choose, which DocumentAnalyserTask to update.
     */
    where: DocumentAnalyserTaskWhereUniqueInput
  }

  /**
   * DocumentAnalyserTask updateMany
   */
  export type DocumentAnalyserTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentAnalyserTasks.
     */
    data: XOR<DocumentAnalyserTaskUpdateManyMutationInput, DocumentAnalyserTaskUncheckedUpdateManyInput>
    /**
     * Filter which DocumentAnalyserTasks to update
     */
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * DocumentAnalyserTask upsert
   */
  export type DocumentAnalyserTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentAnalyserTask to update in case it exists.
     */
    where: DocumentAnalyserTaskWhereUniqueInput
    /**
     * In case the DocumentAnalyserTask found by the `where` argument doesn't exist, create a new DocumentAnalyserTask with this data.
     */
    create: XOR<DocumentAnalyserTaskCreateInput, DocumentAnalyserTaskUncheckedCreateInput>
    /**
     * In case the DocumentAnalyserTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentAnalyserTaskUpdateInput, DocumentAnalyserTaskUncheckedUpdateInput>
  }

  /**
   * DocumentAnalyserTask delete
   */
  export type DocumentAnalyserTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
    /**
     * Filter which DocumentAnalyserTask to delete.
     */
    where: DocumentAnalyserTaskWhereUniqueInput
  }

  /**
   * DocumentAnalyserTask deleteMany
   */
  export type DocumentAnalyserTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentAnalyserTasks to delete
     */
    where?: DocumentAnalyserTaskWhereInput
  }

  /**
   * DocumentAnalyserTask.inputDocuments
   */
  export type DocumentAnalyserTask$inputDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * DocumentAnalyserTask.entities
   */
  export type DocumentAnalyserTask$entitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    cursor?: EntityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * DocumentAnalyserTask.observations
   */
  export type DocumentAnalyserTask$observationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    cursor?: ObservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * DocumentAnalyserTask.references
   */
  export type DocumentAnalyserTask$referencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferenceInclude<ExtArgs> | null
    where?: ReferenceWhereInput
    orderBy?: ReferenceOrderByWithRelationInput | ReferenceOrderByWithRelationInput[]
    cursor?: ReferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }

  /**
   * DocumentAnalyserTask without action
   */
  export type DocumentAnalyserTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAnalyserTask
     */
    select?: DocumentAnalyserTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAnalyserTaskInclude<ExtArgs> | null
  }


  /**
   * Model ChatAgentTask
   */

  export type AggregateChatAgentTask = {
    _count: ChatAgentTaskCountAggregateOutputType | null
    _min: ChatAgentTaskMinAggregateOutputType | null
    _max: ChatAgentTaskMaxAggregateOutputType | null
  }

  export type ChatAgentTaskMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workspaceId: string | null
    projectId: string | null
    userId: string | null
  }

  export type ChatAgentTaskMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    workspaceId: string | null
    projectId: string | null
    userId: string | null
  }

  export type ChatAgentTaskCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    workspaceId: number
    projectId: number
    userId: number
    _all: number
  }


  export type ChatAgentTaskMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    projectId?: true
    userId?: true
  }

  export type ChatAgentTaskMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    projectId?: true
    userId?: true
  }

  export type ChatAgentTaskCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    workspaceId?: true
    projectId?: true
    userId?: true
    _all?: true
  }

  export type ChatAgentTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatAgentTask to aggregate.
     */
    where?: ChatAgentTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatAgentTasks to fetch.
     */
    orderBy?: ChatAgentTaskOrderByWithRelationInput | ChatAgentTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatAgentTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatAgentTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatAgentTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatAgentTasks
    **/
    _count?: true | ChatAgentTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatAgentTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatAgentTaskMaxAggregateInputType
  }

  export type GetChatAgentTaskAggregateType<T extends ChatAgentTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateChatAgentTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatAgentTask[P]>
      : GetScalarType<T[P], AggregateChatAgentTask[P]>
  }




  export type ChatAgentTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatAgentTaskWhereInput
    orderBy?: ChatAgentTaskOrderByWithAggregationInput | ChatAgentTaskOrderByWithAggregationInput[]
    by: ChatAgentTaskScalarFieldEnum[] | ChatAgentTaskScalarFieldEnum
    having?: ChatAgentTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatAgentTaskCountAggregateInputType | true
    _min?: ChatAgentTaskMinAggregateInputType
    _max?: ChatAgentTaskMaxAggregateInputType
  }

  export type ChatAgentTaskGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    workspaceId: string
    projectId: string
    userId: string
    _count: ChatAgentTaskCountAggregateOutputType | null
    _min: ChatAgentTaskMinAggregateOutputType | null
    _max: ChatAgentTaskMaxAggregateOutputType | null
  }

  type GetChatAgentTaskGroupByPayload<T extends ChatAgentTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatAgentTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatAgentTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatAgentTaskGroupByOutputType[P]>
            : GetScalarType<T[P], ChatAgentTaskGroupByOutputType[P]>
        }
      >
    >


  export type ChatAgentTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    projectId?: boolean
    userId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    contextDocuments?: boolean | ChatAgentTask$contextDocumentsArgs<ExtArgs>
    messages?: boolean | ChatAgentTask$messagesArgs<ExtArgs>
    _count?: boolean | ChatAgentTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatAgentTask"]>

  export type ChatAgentTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    projectId?: boolean
    userId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatAgentTask"]>

  export type ChatAgentTaskSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspaceId?: boolean
    projectId?: boolean
    userId?: boolean
  }

  export type ChatAgentTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    contextDocuments?: boolean | ChatAgentTask$contextDocumentsArgs<ExtArgs>
    messages?: boolean | ChatAgentTask$messagesArgs<ExtArgs>
    _count?: boolean | ChatAgentTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatAgentTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $ChatAgentTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatAgentTask"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      contextDocuments: Prisma.$DocumentPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      workspaceId: string
      projectId: string
      userId: string
    }, ExtArgs["result"]["chatAgentTask"]>
    composites: {}
  }

  type ChatAgentTaskGetPayload<S extends boolean | null | undefined | ChatAgentTaskDefaultArgs> = $Result.GetResult<Prisma.$ChatAgentTaskPayload, S>

  type ChatAgentTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatAgentTaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatAgentTaskCountAggregateInputType | true
    }

  export interface ChatAgentTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatAgentTask'], meta: { name: 'ChatAgentTask' } }
    /**
     * Find zero or one ChatAgentTask that matches the filter.
     * @param {ChatAgentTaskFindUniqueArgs} args - Arguments to find a ChatAgentTask
     * @example
     * // Get one ChatAgentTask
     * const chatAgentTask = await prisma.chatAgentTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatAgentTaskFindUniqueArgs>(args: SelectSubset<T, ChatAgentTaskFindUniqueArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatAgentTask that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatAgentTaskFindUniqueOrThrowArgs} args - Arguments to find a ChatAgentTask
     * @example
     * // Get one ChatAgentTask
     * const chatAgentTask = await prisma.chatAgentTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatAgentTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatAgentTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatAgentTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAgentTaskFindFirstArgs} args - Arguments to find a ChatAgentTask
     * @example
     * // Get one ChatAgentTask
     * const chatAgentTask = await prisma.chatAgentTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatAgentTaskFindFirstArgs>(args?: SelectSubset<T, ChatAgentTaskFindFirstArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatAgentTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAgentTaskFindFirstOrThrowArgs} args - Arguments to find a ChatAgentTask
     * @example
     * // Get one ChatAgentTask
     * const chatAgentTask = await prisma.chatAgentTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatAgentTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatAgentTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatAgentTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAgentTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatAgentTasks
     * const chatAgentTasks = await prisma.chatAgentTask.findMany()
     * 
     * // Get first 10 ChatAgentTasks
     * const chatAgentTasks = await prisma.chatAgentTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatAgentTaskWithIdOnly = await prisma.chatAgentTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatAgentTaskFindManyArgs>(args?: SelectSubset<T, ChatAgentTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatAgentTask.
     * @param {ChatAgentTaskCreateArgs} args - Arguments to create a ChatAgentTask.
     * @example
     * // Create one ChatAgentTask
     * const ChatAgentTask = await prisma.chatAgentTask.create({
     *   data: {
     *     // ... data to create a ChatAgentTask
     *   }
     * })
     * 
     */
    create<T extends ChatAgentTaskCreateArgs>(args: SelectSubset<T, ChatAgentTaskCreateArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatAgentTasks.
     * @param {ChatAgentTaskCreateManyArgs} args - Arguments to create many ChatAgentTasks.
     * @example
     * // Create many ChatAgentTasks
     * const chatAgentTask = await prisma.chatAgentTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatAgentTaskCreateManyArgs>(args?: SelectSubset<T, ChatAgentTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatAgentTasks and returns the data saved in the database.
     * @param {ChatAgentTaskCreateManyAndReturnArgs} args - Arguments to create many ChatAgentTasks.
     * @example
     * // Create many ChatAgentTasks
     * const chatAgentTask = await prisma.chatAgentTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatAgentTasks and only return the `id`
     * const chatAgentTaskWithIdOnly = await prisma.chatAgentTask.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatAgentTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatAgentTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatAgentTask.
     * @param {ChatAgentTaskDeleteArgs} args - Arguments to delete one ChatAgentTask.
     * @example
     * // Delete one ChatAgentTask
     * const ChatAgentTask = await prisma.chatAgentTask.delete({
     *   where: {
     *     // ... filter to delete one ChatAgentTask
     *   }
     * })
     * 
     */
    delete<T extends ChatAgentTaskDeleteArgs>(args: SelectSubset<T, ChatAgentTaskDeleteArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatAgentTask.
     * @param {ChatAgentTaskUpdateArgs} args - Arguments to update one ChatAgentTask.
     * @example
     * // Update one ChatAgentTask
     * const chatAgentTask = await prisma.chatAgentTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatAgentTaskUpdateArgs>(args: SelectSubset<T, ChatAgentTaskUpdateArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatAgentTasks.
     * @param {ChatAgentTaskDeleteManyArgs} args - Arguments to filter ChatAgentTasks to delete.
     * @example
     * // Delete a few ChatAgentTasks
     * const { count } = await prisma.chatAgentTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatAgentTaskDeleteManyArgs>(args?: SelectSubset<T, ChatAgentTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatAgentTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAgentTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatAgentTasks
     * const chatAgentTask = await prisma.chatAgentTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatAgentTaskUpdateManyArgs>(args: SelectSubset<T, ChatAgentTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatAgentTask.
     * @param {ChatAgentTaskUpsertArgs} args - Arguments to update or create a ChatAgentTask.
     * @example
     * // Update or create a ChatAgentTask
     * const chatAgentTask = await prisma.chatAgentTask.upsert({
     *   create: {
     *     // ... data to create a ChatAgentTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatAgentTask we want to update
     *   }
     * })
     */
    upsert<T extends ChatAgentTaskUpsertArgs>(args: SelectSubset<T, ChatAgentTaskUpsertArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatAgentTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAgentTaskCountArgs} args - Arguments to filter ChatAgentTasks to count.
     * @example
     * // Count the number of ChatAgentTasks
     * const count = await prisma.chatAgentTask.count({
     *   where: {
     *     // ... the filter for the ChatAgentTasks we want to count
     *   }
     * })
    **/
    count<T extends ChatAgentTaskCountArgs>(
      args?: Subset<T, ChatAgentTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatAgentTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatAgentTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAgentTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAgentTaskAggregateArgs>(args: Subset<T, ChatAgentTaskAggregateArgs>): Prisma.PrismaPromise<GetChatAgentTaskAggregateType<T>>

    /**
     * Group by ChatAgentTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAgentTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatAgentTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatAgentTaskGroupByArgs['orderBy'] }
        : { orderBy?: ChatAgentTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatAgentTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatAgentTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatAgentTask model
   */
  readonly fields: ChatAgentTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatAgentTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatAgentTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contextDocuments<T extends ChatAgentTask$contextDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, ChatAgentTask$contextDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends ChatAgentTask$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatAgentTask$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatAgentTask model
   */ 
  interface ChatAgentTaskFieldRefs {
    readonly id: FieldRef<"ChatAgentTask", 'String'>
    readonly name: FieldRef<"ChatAgentTask", 'String'>
    readonly createdAt: FieldRef<"ChatAgentTask", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatAgentTask", 'DateTime'>
    readonly workspaceId: FieldRef<"ChatAgentTask", 'String'>
    readonly projectId: FieldRef<"ChatAgentTask", 'String'>
    readonly userId: FieldRef<"ChatAgentTask", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatAgentTask findUnique
   */
  export type ChatAgentTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChatAgentTask to fetch.
     */
    where: ChatAgentTaskWhereUniqueInput
  }

  /**
   * ChatAgentTask findUniqueOrThrow
   */
  export type ChatAgentTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChatAgentTask to fetch.
     */
    where: ChatAgentTaskWhereUniqueInput
  }

  /**
   * ChatAgentTask findFirst
   */
  export type ChatAgentTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChatAgentTask to fetch.
     */
    where?: ChatAgentTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatAgentTasks to fetch.
     */
    orderBy?: ChatAgentTaskOrderByWithRelationInput | ChatAgentTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatAgentTasks.
     */
    cursor?: ChatAgentTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatAgentTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatAgentTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatAgentTasks.
     */
    distinct?: ChatAgentTaskScalarFieldEnum | ChatAgentTaskScalarFieldEnum[]
  }

  /**
   * ChatAgentTask findFirstOrThrow
   */
  export type ChatAgentTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChatAgentTask to fetch.
     */
    where?: ChatAgentTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatAgentTasks to fetch.
     */
    orderBy?: ChatAgentTaskOrderByWithRelationInput | ChatAgentTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatAgentTasks.
     */
    cursor?: ChatAgentTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatAgentTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatAgentTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatAgentTasks.
     */
    distinct?: ChatAgentTaskScalarFieldEnum | ChatAgentTaskScalarFieldEnum[]
  }

  /**
   * ChatAgentTask findMany
   */
  export type ChatAgentTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * Filter, which ChatAgentTasks to fetch.
     */
    where?: ChatAgentTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatAgentTasks to fetch.
     */
    orderBy?: ChatAgentTaskOrderByWithRelationInput | ChatAgentTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatAgentTasks.
     */
    cursor?: ChatAgentTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatAgentTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatAgentTasks.
     */
    skip?: number
    distinct?: ChatAgentTaskScalarFieldEnum | ChatAgentTaskScalarFieldEnum[]
  }

  /**
   * ChatAgentTask create
   */
  export type ChatAgentTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatAgentTask.
     */
    data: XOR<ChatAgentTaskCreateInput, ChatAgentTaskUncheckedCreateInput>
  }

  /**
   * ChatAgentTask createMany
   */
  export type ChatAgentTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatAgentTasks.
     */
    data: ChatAgentTaskCreateManyInput | ChatAgentTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatAgentTask createManyAndReturn
   */
  export type ChatAgentTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatAgentTasks.
     */
    data: ChatAgentTaskCreateManyInput | ChatAgentTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatAgentTask update
   */
  export type ChatAgentTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatAgentTask.
     */
    data: XOR<ChatAgentTaskUpdateInput, ChatAgentTaskUncheckedUpdateInput>
    /**
     * Choose, which ChatAgentTask to update.
     */
    where: ChatAgentTaskWhereUniqueInput
  }

  /**
   * ChatAgentTask updateMany
   */
  export type ChatAgentTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatAgentTasks.
     */
    data: XOR<ChatAgentTaskUpdateManyMutationInput, ChatAgentTaskUncheckedUpdateManyInput>
    /**
     * Filter which ChatAgentTasks to update
     */
    where?: ChatAgentTaskWhereInput
  }

  /**
   * ChatAgentTask upsert
   */
  export type ChatAgentTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatAgentTask to update in case it exists.
     */
    where: ChatAgentTaskWhereUniqueInput
    /**
     * In case the ChatAgentTask found by the `where` argument doesn't exist, create a new ChatAgentTask with this data.
     */
    create: XOR<ChatAgentTaskCreateInput, ChatAgentTaskUncheckedCreateInput>
    /**
     * In case the ChatAgentTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatAgentTaskUpdateInput, ChatAgentTaskUncheckedUpdateInput>
  }

  /**
   * ChatAgentTask delete
   */
  export type ChatAgentTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
    /**
     * Filter which ChatAgentTask to delete.
     */
    where: ChatAgentTaskWhereUniqueInput
  }

  /**
   * ChatAgentTask deleteMany
   */
  export type ChatAgentTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatAgentTasks to delete
     */
    where?: ChatAgentTaskWhereInput
  }

  /**
   * ChatAgentTask.contextDocuments
   */
  export type ChatAgentTask$contextDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * ChatAgentTask.messages
   */
  export type ChatAgentTask$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * ChatAgentTask without action
   */
  export type ChatAgentTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatAgentTask
     */
    select?: ChatAgentTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatAgentTaskInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    messageSender: $Enums.MessageSender | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    chatAgentTaskId: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    messageSender: $Enums.MessageSender | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    chatAgentTaskId: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    messageSender: number
    content: number
    createdAt: number
    updatedAt: number
    chatAgentTaskId: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    messageSender?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    chatAgentTaskId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    messageSender?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    chatAgentTaskId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    messageSender?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    chatAgentTaskId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt: Date
    updatedAt: Date
    chatAgentTaskId: string
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageSender?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatAgentTaskId?: boolean
    chatAgentTask?: boolean | ChatAgentTaskDefaultArgs<ExtArgs>
    messageActions?: boolean | Message$messageActionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageSender?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatAgentTaskId?: boolean
    chatAgentTask?: boolean | ChatAgentTaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    messageSender?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatAgentTaskId?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatAgentTask?: boolean | ChatAgentTaskDefaultArgs<ExtArgs>
    messageActions?: boolean | Message$messageActionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatAgentTask?: boolean | ChatAgentTaskDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      chatAgentTask: Prisma.$ChatAgentTaskPayload<ExtArgs>
      messageActions: Prisma.$MessageActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageSender: $Enums.MessageSender
      content: string
      createdAt: Date
      updatedAt: Date
      chatAgentTaskId: string
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatAgentTask<T extends ChatAgentTaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatAgentTaskDefaultArgs<ExtArgs>>): Prisma__ChatAgentTaskClient<$Result.GetResult<Prisma.$ChatAgentTaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    messageActions<T extends Message$messageActionsArgs<ExtArgs> = {}>(args?: Subset<T, Message$messageActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly messageSender: FieldRef<"Message", 'MessageSender'>
    readonly content: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
    readonly chatAgentTaskId: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.messageActions
   */
  export type Message$messageActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    where?: MessageActionWhereInput
    orderBy?: MessageActionOrderByWithRelationInput | MessageActionOrderByWithRelationInput[]
    cursor?: MessageActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageActionScalarFieldEnum | MessageActionScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model MessageAction
   */

  export type AggregateMessageAction = {
    _count: MessageActionCountAggregateOutputType | null
    _min: MessageActionMinAggregateOutputType | null
    _max: MessageActionMaxAggregateOutputType | null
  }

  export type MessageActionMinAggregateOutputType = {
    id: string | null
    title: string | null
    messageId: string | null
    messageActionType: $Enums.MessageActionType | null
    documentId: string | null
  }

  export type MessageActionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    messageId: string | null
    messageActionType: $Enums.MessageActionType | null
    documentId: string | null
  }

  export type MessageActionCountAggregateOutputType = {
    id: number
    title: number
    messageId: number
    messageActionType: number
    documentId: number
    _all: number
  }


  export type MessageActionMinAggregateInputType = {
    id?: true
    title?: true
    messageId?: true
    messageActionType?: true
    documentId?: true
  }

  export type MessageActionMaxAggregateInputType = {
    id?: true
    title?: true
    messageId?: true
    messageActionType?: true
    documentId?: true
  }

  export type MessageActionCountAggregateInputType = {
    id?: true
    title?: true
    messageId?: true
    messageActionType?: true
    documentId?: true
    _all?: true
  }

  export type MessageActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageAction to aggregate.
     */
    where?: MessageActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageActions to fetch.
     */
    orderBy?: MessageActionOrderByWithRelationInput | MessageActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageActions
    **/
    _count?: true | MessageActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageActionMaxAggregateInputType
  }

  export type GetMessageActionAggregateType<T extends MessageActionAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageAction[P]>
      : GetScalarType<T[P], AggregateMessageAction[P]>
  }




  export type MessageActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageActionWhereInput
    orderBy?: MessageActionOrderByWithAggregationInput | MessageActionOrderByWithAggregationInput[]
    by: MessageActionScalarFieldEnum[] | MessageActionScalarFieldEnum
    having?: MessageActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageActionCountAggregateInputType | true
    _min?: MessageActionMinAggregateInputType
    _max?: MessageActionMaxAggregateInputType
  }

  export type MessageActionGroupByOutputType = {
    id: string
    title: string
    messageId: string
    messageActionType: $Enums.MessageActionType
    documentId: string
    _count: MessageActionCountAggregateOutputType | null
    _min: MessageActionMinAggregateOutputType | null
    _max: MessageActionMaxAggregateOutputType | null
  }

  type GetMessageActionGroupByPayload<T extends MessageActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageActionGroupByOutputType[P]>
            : GetScalarType<T[P], MessageActionGroupByOutputType[P]>
        }
      >
    >


  export type MessageActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    messageId?: boolean
    messageActionType?: boolean
    documentId?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageAction"]>

  export type MessageActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    messageId?: boolean
    messageActionType?: boolean
    documentId?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageAction"]>

  export type MessageActionSelectScalar = {
    id?: boolean
    title?: boolean
    messageId?: boolean
    messageActionType?: boolean
    documentId?: boolean
  }

  export type MessageActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type MessageActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $MessageActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageAction"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      messageId: string
      messageActionType: $Enums.MessageActionType
      documentId: string
    }, ExtArgs["result"]["messageAction"]>
    composites: {}
  }

  type MessageActionGetPayload<S extends boolean | null | undefined | MessageActionDefaultArgs> = $Result.GetResult<Prisma.$MessageActionPayload, S>

  type MessageActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageActionCountAggregateInputType | true
    }

  export interface MessageActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageAction'], meta: { name: 'MessageAction' } }
    /**
     * Find zero or one MessageAction that matches the filter.
     * @param {MessageActionFindUniqueArgs} args - Arguments to find a MessageAction
     * @example
     * // Get one MessageAction
     * const messageAction = await prisma.messageAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageActionFindUniqueArgs>(args: SelectSubset<T, MessageActionFindUniqueArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MessageAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageActionFindUniqueOrThrowArgs} args - Arguments to find a MessageAction
     * @example
     * // Get one MessageAction
     * const messageAction = await prisma.messageAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageActionFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MessageAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageActionFindFirstArgs} args - Arguments to find a MessageAction
     * @example
     * // Get one MessageAction
     * const messageAction = await prisma.messageAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageActionFindFirstArgs>(args?: SelectSubset<T, MessageActionFindFirstArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MessageAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageActionFindFirstOrThrowArgs} args - Arguments to find a MessageAction
     * @example
     * // Get one MessageAction
     * const messageAction = await prisma.messageAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageActionFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MessageActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageActions
     * const messageActions = await prisma.messageAction.findMany()
     * 
     * // Get first 10 MessageActions
     * const messageActions = await prisma.messageAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageActionWithIdOnly = await prisma.messageAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageActionFindManyArgs>(args?: SelectSubset<T, MessageActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MessageAction.
     * @param {MessageActionCreateArgs} args - Arguments to create a MessageAction.
     * @example
     * // Create one MessageAction
     * const MessageAction = await prisma.messageAction.create({
     *   data: {
     *     // ... data to create a MessageAction
     *   }
     * })
     * 
     */
    create<T extends MessageActionCreateArgs>(args: SelectSubset<T, MessageActionCreateArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MessageActions.
     * @param {MessageActionCreateManyArgs} args - Arguments to create many MessageActions.
     * @example
     * // Create many MessageActions
     * const messageAction = await prisma.messageAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageActionCreateManyArgs>(args?: SelectSubset<T, MessageActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageActions and returns the data saved in the database.
     * @param {MessageActionCreateManyAndReturnArgs} args - Arguments to create many MessageActions.
     * @example
     * // Create many MessageActions
     * const messageAction = await prisma.messageAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageActions and only return the `id`
     * const messageActionWithIdOnly = await prisma.messageAction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageActionCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MessageAction.
     * @param {MessageActionDeleteArgs} args - Arguments to delete one MessageAction.
     * @example
     * // Delete one MessageAction
     * const MessageAction = await prisma.messageAction.delete({
     *   where: {
     *     // ... filter to delete one MessageAction
     *   }
     * })
     * 
     */
    delete<T extends MessageActionDeleteArgs>(args: SelectSubset<T, MessageActionDeleteArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MessageAction.
     * @param {MessageActionUpdateArgs} args - Arguments to update one MessageAction.
     * @example
     * // Update one MessageAction
     * const messageAction = await prisma.messageAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageActionUpdateArgs>(args: SelectSubset<T, MessageActionUpdateArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MessageActions.
     * @param {MessageActionDeleteManyArgs} args - Arguments to filter MessageActions to delete.
     * @example
     * // Delete a few MessageActions
     * const { count } = await prisma.messageAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageActionDeleteManyArgs>(args?: SelectSubset<T, MessageActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageActions
     * const messageAction = await prisma.messageAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageActionUpdateManyArgs>(args: SelectSubset<T, MessageActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MessageAction.
     * @param {MessageActionUpsertArgs} args - Arguments to update or create a MessageAction.
     * @example
     * // Update or create a MessageAction
     * const messageAction = await prisma.messageAction.upsert({
     *   create: {
     *     // ... data to create a MessageAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageAction we want to update
     *   }
     * })
     */
    upsert<T extends MessageActionUpsertArgs>(args: SelectSubset<T, MessageActionUpsertArgs<ExtArgs>>): Prisma__MessageActionClient<$Result.GetResult<Prisma.$MessageActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MessageActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageActionCountArgs} args - Arguments to filter MessageActions to count.
     * @example
     * // Count the number of MessageActions
     * const count = await prisma.messageAction.count({
     *   where: {
     *     // ... the filter for the MessageActions we want to count
     *   }
     * })
    **/
    count<T extends MessageActionCountArgs>(
      args?: Subset<T, MessageActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageActionAggregateArgs>(args: Subset<T, MessageActionAggregateArgs>): Prisma.PrismaPromise<GetMessageActionAggregateType<T>>

    /**
     * Group by MessageAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageActionGroupByArgs['orderBy'] }
        : { orderBy?: MessageActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageAction model
   */
  readonly fields: MessageActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageAction model
   */ 
  interface MessageActionFieldRefs {
    readonly id: FieldRef<"MessageAction", 'String'>
    readonly title: FieldRef<"MessageAction", 'String'>
    readonly messageId: FieldRef<"MessageAction", 'String'>
    readonly messageActionType: FieldRef<"MessageAction", 'MessageActionType'>
    readonly documentId: FieldRef<"MessageAction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MessageAction findUnique
   */
  export type MessageActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * Filter, which MessageAction to fetch.
     */
    where: MessageActionWhereUniqueInput
  }

  /**
   * MessageAction findUniqueOrThrow
   */
  export type MessageActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * Filter, which MessageAction to fetch.
     */
    where: MessageActionWhereUniqueInput
  }

  /**
   * MessageAction findFirst
   */
  export type MessageActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * Filter, which MessageAction to fetch.
     */
    where?: MessageActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageActions to fetch.
     */
    orderBy?: MessageActionOrderByWithRelationInput | MessageActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageActions.
     */
    cursor?: MessageActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageActions.
     */
    distinct?: MessageActionScalarFieldEnum | MessageActionScalarFieldEnum[]
  }

  /**
   * MessageAction findFirstOrThrow
   */
  export type MessageActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * Filter, which MessageAction to fetch.
     */
    where?: MessageActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageActions to fetch.
     */
    orderBy?: MessageActionOrderByWithRelationInput | MessageActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageActions.
     */
    cursor?: MessageActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageActions.
     */
    distinct?: MessageActionScalarFieldEnum | MessageActionScalarFieldEnum[]
  }

  /**
   * MessageAction findMany
   */
  export type MessageActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * Filter, which MessageActions to fetch.
     */
    where?: MessageActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageActions to fetch.
     */
    orderBy?: MessageActionOrderByWithRelationInput | MessageActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageActions.
     */
    cursor?: MessageActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageActions.
     */
    skip?: number
    distinct?: MessageActionScalarFieldEnum | MessageActionScalarFieldEnum[]
  }

  /**
   * MessageAction create
   */
  export type MessageActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageAction.
     */
    data: XOR<MessageActionCreateInput, MessageActionUncheckedCreateInput>
  }

  /**
   * MessageAction createMany
   */
  export type MessageActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageActions.
     */
    data: MessageActionCreateManyInput | MessageActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageAction createManyAndReturn
   */
  export type MessageActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MessageActions.
     */
    data: MessageActionCreateManyInput | MessageActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageAction update
   */
  export type MessageActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageAction.
     */
    data: XOR<MessageActionUpdateInput, MessageActionUncheckedUpdateInput>
    /**
     * Choose, which MessageAction to update.
     */
    where: MessageActionWhereUniqueInput
  }

  /**
   * MessageAction updateMany
   */
  export type MessageActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageActions.
     */
    data: XOR<MessageActionUpdateManyMutationInput, MessageActionUncheckedUpdateManyInput>
    /**
     * Filter which MessageActions to update
     */
    where?: MessageActionWhereInput
  }

  /**
   * MessageAction upsert
   */
  export type MessageActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageAction to update in case it exists.
     */
    where: MessageActionWhereUniqueInput
    /**
     * In case the MessageAction found by the `where` argument doesn't exist, create a new MessageAction with this data.
     */
    create: XOR<MessageActionCreateInput, MessageActionUncheckedCreateInput>
    /**
     * In case the MessageAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageActionUpdateInput, MessageActionUncheckedUpdateInput>
  }

  /**
   * MessageAction delete
   */
  export type MessageActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
    /**
     * Filter which MessageAction to delete.
     */
    where: MessageActionWhereUniqueInput
  }

  /**
   * MessageAction deleteMany
   */
  export type MessageActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageActions to delete
     */
    where?: MessageActionWhereInput
  }

  /**
   * MessageAction without action
   */
  export type MessageActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAction
     */
    select?: MessageActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageActionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    activeWorkspaceId: 'activeWorkspaceId',
    profileImage: 'profileImage',
    hasVerifiedEmail: 'hasVerifiedEmail',
    verificationToken: 'verificationToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkspaceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    language: 'language'
  };

  export type WorkspaceScalarFieldEnum = (typeof WorkspaceScalarFieldEnum)[keyof typeof WorkspaceScalarFieldEnum]


  export const WorkspaceUserScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    userId: 'userId',
    role: 'role'
  };

  export type WorkspaceUserScalarFieldEnum = (typeof WorkspaceUserScalarFieldEnum)[keyof typeof WorkspaceUserScalarFieldEnum]


  export const InvitationScalarFieldEnum: {
    id: 'id',
    email: 'email',
    workspaceId: 'workspaceId',
    role: 'role',
    token: 'token',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    accepted: 'accepted'
  };

  export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


  export const BusinessRiskReportTaskScalarFieldEnum: {
    id: 'id',
    reportName: 'reportName',
    generalDescription: 'generalDescription',
    natureOfBusiness: 'natureOfBusiness',
    geography: 'geography',
    riskOverview: 'riskOverview',
    nextSteps: 'nextSteps',
    inputUrl: 'inputUrl',
    createdById: 'createdById',
    workspaceId: 'workspaceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    mainEntityId: 'mainEntityId',
    displayId: 'displayId',
    projectId: 'projectId'
  };

  export type BusinessRiskReportTaskScalarFieldEnum = (typeof BusinessRiskReportTaskScalarFieldEnum)[keyof typeof BusinessRiskReportTaskScalarFieldEnum]


  export const EntityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    type: 'type',
    socialLinks: 'socialLinks',
    country: 'country',
    city: 'city',
    state: 'state',
    streetAddress: 'streetAddress',
    zipCode: 'zipCode',
    phoneNumber: 'phoneNumber',
    email: 'email',
    website: 'website',
    workspaceId: 'workspaceId',
    industry: 'industry',
    role: 'role',
    DocumentAnalyserTaskId: 'DocumentAnalyserTaskId',
    documentId: 'documentId',
    projectId: 'projectId'
  };

  export type EntityScalarFieldEnum = (typeof EntityScalarFieldEnum)[keyof typeof EntityScalarFieldEnum]


  export const ObservationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    riskGrade: 'riskGrade',
    type: 'type',
    businessRiskReportTaskId: 'businessRiskReportTaskId',
    projectId: 'projectId',
    documentAnalyserTaskId: 'documentAnalyserTaskId'
  };

  export type ObservationScalarFieldEnum = (typeof ObservationScalarFieldEnum)[keyof typeof ObservationScalarFieldEnum]


  export const ReferenceScalarFieldEnum: {
    id: 'id',
    url: 'url',
    title: 'title',
    businessRiskReportTaskId: 'businessRiskReportTaskId',
    DocumentAnalyserTaskId: 'DocumentAnalyserTaskId',
    projectId: 'projectId',
    observationId: 'observationId'
  };

  export type ReferenceScalarFieldEnum = (typeof ReferenceScalarFieldEnum)[keyof typeof ReferenceScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    workspaceId: 'workspaceId',
    budget: 'budget',
    city: 'city',
    country: 'country',
    endDate: 'endDate',
    fundingType: 'fundingType',
    potentialFraudDescription: 'potentialFraudDescription',
    potentialFraudTypes: 'potentialFraudTypes',
    projectType: 'projectType',
    startDate: 'startDate',
    status: 'status'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    uploadedAt: 'uploadedAt',
    workspaceId: 'workspaceId',
    author: 'author',
    chatAgentTaskId: 'chatAgentTaskId',
    createdById: 'createdById',
    dateOrPeriod: 'dateOrPeriod',
    description: 'description',
    documentAnalyserTaskId: 'documentAnalyserTaskId',
    fileType: 'fileType',
    folderId: 'folderId',
    fullText: 'fullText',
    language: 'language',
    metadata: 'metadata',
    projectId: 'projectId',
    url: 'url',
    fileSize: 'fileSize',
    preprocessStatus: 'preprocessStatus'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const DocumentPageScalarFieldEnum: {
    id: 'id',
    pageNumber: 'pageNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    documentId: 'documentId',
    imagePath: 'imagePath'
  };

  export type DocumentPageScalarFieldEnum = (typeof DocumentPageScalarFieldEnum)[keyof typeof DocumentPageScalarFieldEnum]


  export const FolderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    parentFolderId: 'parentFolderId',
    projectId: 'projectId',
    createdById: 'createdById'
  };

  export type FolderScalarFieldEnum = (typeof FolderScalarFieldEnum)[keyof typeof FolderScalarFieldEnum]


  export const DocumentAnalyserTaskScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    workspaceId: 'workspaceId',
    projectId: 'projectId',
    nextSteps: 'nextSteps',
    status: 'status',
    outputDescription: 'outputDescription',
    inputContext: 'inputContext'
  };

  export type DocumentAnalyserTaskScalarFieldEnum = (typeof DocumentAnalyserTaskScalarFieldEnum)[keyof typeof DocumentAnalyserTaskScalarFieldEnum]


  export const ChatAgentTaskScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    workspaceId: 'workspaceId',
    projectId: 'projectId',
    userId: 'userId'
  };

  export type ChatAgentTaskScalarFieldEnum = (typeof ChatAgentTaskScalarFieldEnum)[keyof typeof ChatAgentTaskScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    messageSender: 'messageSender',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    chatAgentTaskId: 'chatAgentTaskId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MessageActionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    messageId: 'messageId',
    messageActionType: 'messageActionType',
    documentId: 'documentId'
  };

  export type MessageActionScalarFieldEnum = (typeof MessageActionScalarFieldEnum)[keyof typeof MessageActionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'WorkspaceRole'
   */
  export type EnumWorkspaceRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceRole'>
    


  /**
   * Reference to a field of type 'WorkspaceRole[]'
   */
  export type ListEnumWorkspaceRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceRole[]'>
    


  /**
   * Reference to a field of type 'BusinessRiskReportTaskStatus'
   */
  export type EnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessRiskReportTaskStatus'>
    


  /**
   * Reference to a field of type 'BusinessRiskReportTaskStatus[]'
   */
  export type ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessRiskReportTaskStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'EntityType'
   */
  export type EnumEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntityType'>
    


  /**
   * Reference to a field of type 'EntityType[]'
   */
  export type ListEnumEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntityType[]'>
    


  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus'>
    


  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus[]'>
    


  /**
   * Reference to a field of type 'DocumentPreprocessStatus'
   */
  export type EnumDocumentPreprocessStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentPreprocessStatus'>
    


  /**
   * Reference to a field of type 'DocumentPreprocessStatus[]'
   */
  export type ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentPreprocessStatus[]'>
    


  /**
   * Reference to a field of type 'DocumentAnalyserTaskStatus'
   */
  export type EnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentAnalyserTaskStatus'>
    


  /**
   * Reference to a field of type 'DocumentAnalyserTaskStatus[]'
   */
  export type ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentAnalyserTaskStatus[]'>
    


  /**
   * Reference to a field of type 'MessageSender'
   */
  export type EnumMessageSenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageSender'>
    


  /**
   * Reference to a field of type 'MessageSender[]'
   */
  export type ListEnumMessageSenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageSender[]'>
    


  /**
   * Reference to a field of type 'MessageActionType'
   */
  export type EnumMessageActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageActionType'>
    


  /**
   * Reference to a field of type 'MessageActionType[]'
   */
  export type ListEnumMessageActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageActionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    activeWorkspaceId?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    hasVerifiedEmail?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    ChatAgentTask?: ChatAgentTaskListRelationFilter
    Document?: DocumentListRelationFilter
    Folder?: FolderListRelationFilter
    activeWorkspace?: XOR<WorkspaceNullableRelationFilter, WorkspaceWhereInput> | null
    workspaceUsers?: WorkspaceUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWorkspaceId?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    hasVerifiedEmail?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    businessRiskReportTasks?: BusinessRiskReportTaskOrderByRelationAggregateInput
    ChatAgentTask?: ChatAgentTaskOrderByRelationAggregateInput
    Document?: DocumentOrderByRelationAggregateInput
    Folder?: FolderOrderByRelationAggregateInput
    activeWorkspace?: WorkspaceOrderByWithRelationInput
    workspaceUsers?: WorkspaceUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    verificationToken?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    activeWorkspaceId?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    hasVerifiedEmail?: BoolFilter<"User"> | boolean
    businessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    ChatAgentTask?: ChatAgentTaskListRelationFilter
    Document?: DocumentListRelationFilter
    Folder?: FolderListRelationFilter
    activeWorkspace?: XOR<WorkspaceNullableRelationFilter, WorkspaceWhereInput> | null
    workspaceUsers?: WorkspaceUserListRelationFilter
  }, "id" | "email" | "verificationToken">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWorkspaceId?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    hasVerifiedEmail?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    activeWorkspaceId?: StringNullableWithAggregatesFilter<"User"> | string | null
    profileImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    hasVerifiedEmail?: BoolWithAggregatesFilter<"User"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type WorkspaceWhereInput = {
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    id?: StringFilter<"Workspace"> | string
    name?: StringFilter<"Workspace"> | string
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    language?: StringNullableFilter<"Workspace"> | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    chatAgentTask?: ChatAgentTaskListRelationFilter
    documents?: DocumentListRelationFilter
    documentAnalyserTask?: DocumentAnalyserTaskListRelationFilter
    entities?: EntityListRelationFilter
    invitations?: InvitationListRelationFilter
    projects?: ProjectListRelationFilter
    users?: UserListRelationFilter
    workspaceUsers?: WorkspaceUserListRelationFilter
  }

  export type WorkspaceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    language?: SortOrderInput | SortOrder
    businessRiskReportTasks?: BusinessRiskReportTaskOrderByRelationAggregateInput
    chatAgentTask?: ChatAgentTaskOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    documentAnalyserTask?: DocumentAnalyserTaskOrderByRelationAggregateInput
    entities?: EntityOrderByRelationAggregateInput
    invitations?: InvitationOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    workspaceUsers?: WorkspaceUserOrderByRelationAggregateInput
  }

  export type WorkspaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    name?: StringFilter<"Workspace"> | string
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    language?: StringNullableFilter<"Workspace"> | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    chatAgentTask?: ChatAgentTaskListRelationFilter
    documents?: DocumentListRelationFilter
    documentAnalyserTask?: DocumentAnalyserTaskListRelationFilter
    entities?: EntityListRelationFilter
    invitations?: InvitationListRelationFilter
    projects?: ProjectListRelationFilter
    users?: UserListRelationFilter
    workspaceUsers?: WorkspaceUserListRelationFilter
  }, "id">

  export type WorkspaceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    language?: SortOrderInput | SortOrder
    _count?: WorkspaceCountOrderByAggregateInput
    _max?: WorkspaceMaxOrderByAggregateInput
    _min?: WorkspaceMinOrderByAggregateInput
  }

  export type WorkspaceScalarWhereWithAggregatesInput = {
    AND?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    OR?: WorkspaceScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workspace"> | string
    name?: StringWithAggregatesFilter<"Workspace"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
    language?: StringNullableWithAggregatesFilter<"Workspace"> | string | null
  }

  export type WorkspaceUserWhereInput = {
    AND?: WorkspaceUserWhereInput | WorkspaceUserWhereInput[]
    OR?: WorkspaceUserWhereInput[]
    NOT?: WorkspaceUserWhereInput | WorkspaceUserWhereInput[]
    id?: StringFilter<"WorkspaceUser"> | string
    workspaceId?: StringFilter<"WorkspaceUser"> | string
    userId?: StringFilter<"WorkspaceUser"> | string
    role?: EnumWorkspaceRoleFilter<"WorkspaceUser"> | $Enums.WorkspaceRole
    user?: XOR<UserRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
  }

  export type WorkspaceUserOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
  }

  export type WorkspaceUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkspaceUserWhereInput | WorkspaceUserWhereInput[]
    OR?: WorkspaceUserWhereInput[]
    NOT?: WorkspaceUserWhereInput | WorkspaceUserWhereInput[]
    workspaceId?: StringFilter<"WorkspaceUser"> | string
    userId?: StringFilter<"WorkspaceUser"> | string
    role?: EnumWorkspaceRoleFilter<"WorkspaceUser"> | $Enums.WorkspaceRole
    user?: XOR<UserRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
  }, "id">

  export type WorkspaceUserOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    _count?: WorkspaceUserCountOrderByAggregateInput
    _max?: WorkspaceUserMaxOrderByAggregateInput
    _min?: WorkspaceUserMinOrderByAggregateInput
  }

  export type WorkspaceUserScalarWhereWithAggregatesInput = {
    AND?: WorkspaceUserScalarWhereWithAggregatesInput | WorkspaceUserScalarWhereWithAggregatesInput[]
    OR?: WorkspaceUserScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceUserScalarWhereWithAggregatesInput | WorkspaceUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkspaceUser"> | string
    workspaceId?: StringWithAggregatesFilter<"WorkspaceUser"> | string
    userId?: StringWithAggregatesFilter<"WorkspaceUser"> | string
    role?: EnumWorkspaceRoleWithAggregatesFilter<"WorkspaceUser"> | $Enums.WorkspaceRole
  }

  export type InvitationWhereInput = {
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    id?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    workspaceId?: StringFilter<"Invitation"> | string
    role?: EnumWorkspaceRoleFilter<"Invitation"> | $Enums.WorkspaceRole
    token?: StringFilter<"Invitation"> | string
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    accepted?: BoolFilter<"Invitation"> | boolean
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
  }

  export type InvitationOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    workspaceId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    accepted?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
  }

  export type InvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    email?: StringFilter<"Invitation"> | string
    workspaceId?: StringFilter<"Invitation"> | string
    role?: EnumWorkspaceRoleFilter<"Invitation"> | $Enums.WorkspaceRole
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    accepted?: BoolFilter<"Invitation"> | boolean
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
  }, "id" | "token">

  export type InvitationOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    workspaceId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    accepted?: SortOrder
    _count?: InvitationCountOrderByAggregateInput
    _max?: InvitationMaxOrderByAggregateInput
    _min?: InvitationMinOrderByAggregateInput
  }

  export type InvitationScalarWhereWithAggregatesInput = {
    AND?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    OR?: InvitationScalarWhereWithAggregatesInput[]
    NOT?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invitation"> | string
    email?: StringWithAggregatesFilter<"Invitation"> | string
    workspaceId?: StringWithAggregatesFilter<"Invitation"> | string
    role?: EnumWorkspaceRoleWithAggregatesFilter<"Invitation"> | $Enums.WorkspaceRole
    token?: StringWithAggregatesFilter<"Invitation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
    accepted?: BoolWithAggregatesFilter<"Invitation"> | boolean
  }

  export type BusinessRiskReportTaskWhereInput = {
    AND?: BusinessRiskReportTaskWhereInput | BusinessRiskReportTaskWhereInput[]
    OR?: BusinessRiskReportTaskWhereInput[]
    NOT?: BusinessRiskReportTaskWhereInput | BusinessRiskReportTaskWhereInput[]
    id?: StringFilter<"BusinessRiskReportTask"> | string
    reportName?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    generalDescription?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    natureOfBusiness?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    geography?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    riskOverview?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    nextSteps?: StringNullableListFilter<"BusinessRiskReportTask">
    inputUrl?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    createdById?: StringFilter<"BusinessRiskReportTask"> | string
    workspaceId?: StringFilter<"BusinessRiskReportTask"> | string
    createdAt?: DateTimeFilter<"BusinessRiskReportTask"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessRiskReportTask"> | Date | string
    status?: EnumBusinessRiskReportTaskStatusFilter<"BusinessRiskReportTask"> | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    displayId?: IntFilter<"BusinessRiskReportTask"> | number
    projectId?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    mainEntity?: XOR<EntityNullableRelationFilter, EntityWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    observations?: ObservationListRelationFilter
    references?: ReferenceListRelationFilter
    relatedEntities?: EntityListRelationFilter
  }

  export type BusinessRiskReportTaskOrderByWithRelationInput = {
    id?: SortOrder
    reportName?: SortOrderInput | SortOrder
    generalDescription?: SortOrderInput | SortOrder
    natureOfBusiness?: SortOrderInput | SortOrder
    geography?: SortOrderInput | SortOrder
    riskOverview?: SortOrderInput | SortOrder
    nextSteps?: SortOrder
    inputUrl?: SortOrderInput | SortOrder
    createdById?: SortOrder
    workspaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    mainEntityId?: SortOrderInput | SortOrder
    displayId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    mainEntity?: EntityOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
    observations?: ObservationOrderByRelationAggregateInput
    references?: ReferenceOrderByRelationAggregateInput
    relatedEntities?: EntityOrderByRelationAggregateInput
  }

  export type BusinessRiskReportTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BusinessRiskReportTaskWhereInput | BusinessRiskReportTaskWhereInput[]
    OR?: BusinessRiskReportTaskWhereInput[]
    NOT?: BusinessRiskReportTaskWhereInput | BusinessRiskReportTaskWhereInput[]
    reportName?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    generalDescription?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    natureOfBusiness?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    geography?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    riskOverview?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    nextSteps?: StringNullableListFilter<"BusinessRiskReportTask">
    inputUrl?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    createdById?: StringFilter<"BusinessRiskReportTask"> | string
    workspaceId?: StringFilter<"BusinessRiskReportTask"> | string
    createdAt?: DateTimeFilter<"BusinessRiskReportTask"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessRiskReportTask"> | Date | string
    status?: EnumBusinessRiskReportTaskStatusFilter<"BusinessRiskReportTask"> | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    displayId?: IntFilter<"BusinessRiskReportTask"> | number
    projectId?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    mainEntity?: XOR<EntityNullableRelationFilter, EntityWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    observations?: ObservationListRelationFilter
    references?: ReferenceListRelationFilter
    relatedEntities?: EntityListRelationFilter
  }, "id">

  export type BusinessRiskReportTaskOrderByWithAggregationInput = {
    id?: SortOrder
    reportName?: SortOrderInput | SortOrder
    generalDescription?: SortOrderInput | SortOrder
    natureOfBusiness?: SortOrderInput | SortOrder
    geography?: SortOrderInput | SortOrder
    riskOverview?: SortOrderInput | SortOrder
    nextSteps?: SortOrder
    inputUrl?: SortOrderInput | SortOrder
    createdById?: SortOrder
    workspaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    mainEntityId?: SortOrderInput | SortOrder
    displayId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: BusinessRiskReportTaskCountOrderByAggregateInput
    _avg?: BusinessRiskReportTaskAvgOrderByAggregateInput
    _max?: BusinessRiskReportTaskMaxOrderByAggregateInput
    _min?: BusinessRiskReportTaskMinOrderByAggregateInput
    _sum?: BusinessRiskReportTaskSumOrderByAggregateInput
  }

  export type BusinessRiskReportTaskScalarWhereWithAggregatesInput = {
    AND?: BusinessRiskReportTaskScalarWhereWithAggregatesInput | BusinessRiskReportTaskScalarWhereWithAggregatesInput[]
    OR?: BusinessRiskReportTaskScalarWhereWithAggregatesInput[]
    NOT?: BusinessRiskReportTaskScalarWhereWithAggregatesInput | BusinessRiskReportTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BusinessRiskReportTask"> | string
    reportName?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
    generalDescription?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
    natureOfBusiness?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
    geography?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
    riskOverview?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
    nextSteps?: StringNullableListFilter<"BusinessRiskReportTask">
    inputUrl?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
    createdById?: StringWithAggregatesFilter<"BusinessRiskReportTask"> | string
    workspaceId?: StringWithAggregatesFilter<"BusinessRiskReportTask"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BusinessRiskReportTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BusinessRiskReportTask"> | Date | string
    status?: EnumBusinessRiskReportTaskStatusWithAggregatesFilter<"BusinessRiskReportTask"> | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
    displayId?: IntWithAggregatesFilter<"BusinessRiskReportTask"> | number
    projectId?: StringNullableWithAggregatesFilter<"BusinessRiskReportTask"> | string | null
  }

  export type EntityWhereInput = {
    AND?: EntityWhereInput | EntityWhereInput[]
    OR?: EntityWhereInput[]
    NOT?: EntityWhereInput | EntityWhereInput[]
    id?: StringFilter<"Entity"> | string
    name?: StringFilter<"Entity"> | string
    description?: StringNullableFilter<"Entity"> | string | null
    createdAt?: DateTimeFilter<"Entity"> | Date | string
    updatedAt?: DateTimeFilter<"Entity"> | Date | string
    type?: EnumEntityTypeFilter<"Entity"> | $Enums.EntityType
    socialLinks?: StringNullableListFilter<"Entity">
    country?: StringNullableFilter<"Entity"> | string | null
    city?: StringNullableFilter<"Entity"> | string | null
    state?: StringNullableFilter<"Entity"> | string | null
    streetAddress?: StringNullableFilter<"Entity"> | string | null
    zipCode?: StringNullableFilter<"Entity"> | string | null
    phoneNumber?: StringNullableFilter<"Entity"> | string | null
    email?: StringNullableFilter<"Entity"> | string | null
    website?: StringNullableFilter<"Entity"> | string | null
    workspaceId?: StringNullableFilter<"Entity"> | string | null
    industry?: StringNullableFilter<"Entity"> | string | null
    role?: StringNullableFilter<"Entity"> | string | null
    DocumentAnalyserTaskId?: StringNullableFilter<"Entity"> | string | null
    documentId?: StringNullableFilter<"Entity"> | string | null
    projectId?: StringNullableFilter<"Entity"> | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    DocumentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    Document?: XOR<DocumentNullableRelationFilter, DocumentWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    workspace?: XOR<WorkspaceNullableRelationFilter, WorkspaceWhereInput> | null
    documents?: DocumentListRelationFilter
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
  }

  export type EntityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    socialLinks?: SortOrder
    country?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    streetAddress?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    workspaceId?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    DocumentAnalyserTaskId?: SortOrderInput | SortOrder
    documentId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskOrderByRelationAggregateInput
    DocumentAnalyserTask?: DocumentAnalyserTaskOrderByWithRelationInput
    Document?: DocumentOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskOrderByRelationAggregateInput
  }

  export type EntityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EntityWhereInput | EntityWhereInput[]
    OR?: EntityWhereInput[]
    NOT?: EntityWhereInput | EntityWhereInput[]
    name?: StringFilter<"Entity"> | string
    description?: StringNullableFilter<"Entity"> | string | null
    createdAt?: DateTimeFilter<"Entity"> | Date | string
    updatedAt?: DateTimeFilter<"Entity"> | Date | string
    type?: EnumEntityTypeFilter<"Entity"> | $Enums.EntityType
    socialLinks?: StringNullableListFilter<"Entity">
    country?: StringNullableFilter<"Entity"> | string | null
    city?: StringNullableFilter<"Entity"> | string | null
    state?: StringNullableFilter<"Entity"> | string | null
    streetAddress?: StringNullableFilter<"Entity"> | string | null
    zipCode?: StringNullableFilter<"Entity"> | string | null
    phoneNumber?: StringNullableFilter<"Entity"> | string | null
    email?: StringNullableFilter<"Entity"> | string | null
    website?: StringNullableFilter<"Entity"> | string | null
    workspaceId?: StringNullableFilter<"Entity"> | string | null
    industry?: StringNullableFilter<"Entity"> | string | null
    role?: StringNullableFilter<"Entity"> | string | null
    DocumentAnalyserTaskId?: StringNullableFilter<"Entity"> | string | null
    documentId?: StringNullableFilter<"Entity"> | string | null
    projectId?: StringNullableFilter<"Entity"> | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    DocumentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    Document?: XOR<DocumentNullableRelationFilter, DocumentWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    workspace?: XOR<WorkspaceNullableRelationFilter, WorkspaceWhereInput> | null
    documents?: DocumentListRelationFilter
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
  }, "id">

  export type EntityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    socialLinks?: SortOrder
    country?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    streetAddress?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    workspaceId?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    DocumentAnalyserTaskId?: SortOrderInput | SortOrder
    documentId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: EntityCountOrderByAggregateInput
    _max?: EntityMaxOrderByAggregateInput
    _min?: EntityMinOrderByAggregateInput
  }

  export type EntityScalarWhereWithAggregatesInput = {
    AND?: EntityScalarWhereWithAggregatesInput | EntityScalarWhereWithAggregatesInput[]
    OR?: EntityScalarWhereWithAggregatesInput[]
    NOT?: EntityScalarWhereWithAggregatesInput | EntityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Entity"> | string
    name?: StringWithAggregatesFilter<"Entity"> | string
    description?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Entity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Entity"> | Date | string
    type?: EnumEntityTypeWithAggregatesFilter<"Entity"> | $Enums.EntityType
    socialLinks?: StringNullableListFilter<"Entity">
    country?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    city?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    state?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    streetAddress?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    zipCode?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    email?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    website?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    workspaceId?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    industry?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    role?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    DocumentAnalyserTaskId?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    documentId?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    projectId?: StringNullableWithAggregatesFilter<"Entity"> | string | null
  }

  export type ObservationWhereInput = {
    AND?: ObservationWhereInput | ObservationWhereInput[]
    OR?: ObservationWhereInput[]
    NOT?: ObservationWhereInput | ObservationWhereInput[]
    id?: StringFilter<"Observation"> | string
    title?: StringFilter<"Observation"> | string
    description?: StringFilter<"Observation"> | string
    riskGrade?: IntFilter<"Observation"> | number
    type?: StringNullableFilter<"Observation"> | string | null
    businessRiskReportTaskId?: StringNullableFilter<"Observation"> | string | null
    projectId?: StringNullableFilter<"Observation"> | string | null
    documentAnalyserTaskId?: StringNullableFilter<"Observation"> | string | null
    businessRiskReportTask?: XOR<BusinessRiskReportTaskNullableRelationFilter, BusinessRiskReportTaskWhereInput> | null
    documentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    references?: ReferenceListRelationFilter
  }

  export type ObservationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    riskGrade?: SortOrder
    type?: SortOrderInput | SortOrder
    businessRiskReportTaskId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    documentAnalyserTaskId?: SortOrderInput | SortOrder
    businessRiskReportTask?: BusinessRiskReportTaskOrderByWithRelationInput
    documentAnalyserTask?: DocumentAnalyserTaskOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    references?: ReferenceOrderByRelationAggregateInput
  }

  export type ObservationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ObservationWhereInput | ObservationWhereInput[]
    OR?: ObservationWhereInput[]
    NOT?: ObservationWhereInput | ObservationWhereInput[]
    title?: StringFilter<"Observation"> | string
    description?: StringFilter<"Observation"> | string
    riskGrade?: IntFilter<"Observation"> | number
    type?: StringNullableFilter<"Observation"> | string | null
    businessRiskReportTaskId?: StringNullableFilter<"Observation"> | string | null
    projectId?: StringNullableFilter<"Observation"> | string | null
    documentAnalyserTaskId?: StringNullableFilter<"Observation"> | string | null
    businessRiskReportTask?: XOR<BusinessRiskReportTaskNullableRelationFilter, BusinessRiskReportTaskWhereInput> | null
    documentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    references?: ReferenceListRelationFilter
  }, "id">

  export type ObservationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    riskGrade?: SortOrder
    type?: SortOrderInput | SortOrder
    businessRiskReportTaskId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    documentAnalyserTaskId?: SortOrderInput | SortOrder
    _count?: ObservationCountOrderByAggregateInput
    _avg?: ObservationAvgOrderByAggregateInput
    _max?: ObservationMaxOrderByAggregateInput
    _min?: ObservationMinOrderByAggregateInput
    _sum?: ObservationSumOrderByAggregateInput
  }

  export type ObservationScalarWhereWithAggregatesInput = {
    AND?: ObservationScalarWhereWithAggregatesInput | ObservationScalarWhereWithAggregatesInput[]
    OR?: ObservationScalarWhereWithAggregatesInput[]
    NOT?: ObservationScalarWhereWithAggregatesInput | ObservationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Observation"> | string
    title?: StringWithAggregatesFilter<"Observation"> | string
    description?: StringWithAggregatesFilter<"Observation"> | string
    riskGrade?: IntWithAggregatesFilter<"Observation"> | number
    type?: StringNullableWithAggregatesFilter<"Observation"> | string | null
    businessRiskReportTaskId?: StringNullableWithAggregatesFilter<"Observation"> | string | null
    projectId?: StringNullableWithAggregatesFilter<"Observation"> | string | null
    documentAnalyserTaskId?: StringNullableWithAggregatesFilter<"Observation"> | string | null
  }

  export type ReferenceWhereInput = {
    AND?: ReferenceWhereInput | ReferenceWhereInput[]
    OR?: ReferenceWhereInput[]
    NOT?: ReferenceWhereInput | ReferenceWhereInput[]
    id?: StringFilter<"Reference"> | string
    url?: StringFilter<"Reference"> | string
    title?: StringNullableFilter<"Reference"> | string | null
    businessRiskReportTaskId?: StringNullableFilter<"Reference"> | string | null
    DocumentAnalyserTaskId?: StringNullableFilter<"Reference"> | string | null
    projectId?: StringNullableFilter<"Reference"> | string | null
    observationId?: StringNullableFilter<"Reference"> | string | null
    DocumentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    businessRiskReportTask?: XOR<BusinessRiskReportTaskNullableRelationFilter, BusinessRiskReportTaskWhereInput> | null
    observation?: XOR<ObservationNullableRelationFilter, ObservationWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }

  export type ReferenceOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrderInput | SortOrder
    businessRiskReportTaskId?: SortOrderInput | SortOrder
    DocumentAnalyserTaskId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    observationId?: SortOrderInput | SortOrder
    DocumentAnalyserTask?: DocumentAnalyserTaskOrderByWithRelationInput
    businessRiskReportTask?: BusinessRiskReportTaskOrderByWithRelationInput
    observation?: ObservationOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ReferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReferenceWhereInput | ReferenceWhereInput[]
    OR?: ReferenceWhereInput[]
    NOT?: ReferenceWhereInput | ReferenceWhereInput[]
    url?: StringFilter<"Reference"> | string
    title?: StringNullableFilter<"Reference"> | string | null
    businessRiskReportTaskId?: StringNullableFilter<"Reference"> | string | null
    DocumentAnalyserTaskId?: StringNullableFilter<"Reference"> | string | null
    projectId?: StringNullableFilter<"Reference"> | string | null
    observationId?: StringNullableFilter<"Reference"> | string | null
    DocumentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    businessRiskReportTask?: XOR<BusinessRiskReportTaskNullableRelationFilter, BusinessRiskReportTaskWhereInput> | null
    observation?: XOR<ObservationNullableRelationFilter, ObservationWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }, "id">

  export type ReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrderInput | SortOrder
    businessRiskReportTaskId?: SortOrderInput | SortOrder
    DocumentAnalyserTaskId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    observationId?: SortOrderInput | SortOrder
    _count?: ReferenceCountOrderByAggregateInput
    _max?: ReferenceMaxOrderByAggregateInput
    _min?: ReferenceMinOrderByAggregateInput
  }

  export type ReferenceScalarWhereWithAggregatesInput = {
    AND?: ReferenceScalarWhereWithAggregatesInput | ReferenceScalarWhereWithAggregatesInput[]
    OR?: ReferenceScalarWhereWithAggregatesInput[]
    NOT?: ReferenceScalarWhereWithAggregatesInput | ReferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reference"> | string
    url?: StringWithAggregatesFilter<"Reference"> | string
    title?: StringNullableWithAggregatesFilter<"Reference"> | string | null
    businessRiskReportTaskId?: StringNullableWithAggregatesFilter<"Reference"> | string | null
    DocumentAnalyserTaskId?: StringNullableWithAggregatesFilter<"Reference"> | string | null
    projectId?: StringNullableWithAggregatesFilter<"Reference"> | string | null
    observationId?: StringNullableWithAggregatesFilter<"Reference"> | string | null
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    workspaceId?: StringFilter<"Project"> | string
    budget?: IntNullableFilter<"Project"> | number | null
    city?: StringNullableFilter<"Project"> | string | null
    country?: StringNullableFilter<"Project"> | string | null
    endDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    fundingType?: StringNullableFilter<"Project"> | string | null
    potentialFraudDescription?: StringNullableFilter<"Project"> | string | null
    potentialFraudTypes?: StringNullableListFilter<"Project">
    projectType?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    chatAgent?: ChatAgentTaskListRelationFilter
    documents?: DocumentListRelationFilter
    documentAnalyserTask?: DocumentAnalyserTaskListRelationFilter
    entities?: EntityListRelationFilter
    folders?: FolderListRelationFilter
    observations?: ObservationListRelationFilter
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    references?: ReferenceListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    budget?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    fundingType?: SortOrderInput | SortOrder
    potentialFraudDescription?: SortOrderInput | SortOrder
    potentialFraudTypes?: SortOrder
    projectType?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    status?: SortOrder
    businessRiskReportTasks?: BusinessRiskReportTaskOrderByRelationAggregateInput
    chatAgent?: ChatAgentTaskOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    documentAnalyserTask?: DocumentAnalyserTaskOrderByRelationAggregateInput
    entities?: EntityOrderByRelationAggregateInput
    folders?: FolderOrderByRelationAggregateInput
    observations?: ObservationOrderByRelationAggregateInput
    workspace?: WorkspaceOrderByWithRelationInput
    references?: ReferenceOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    workspaceId?: StringFilter<"Project"> | string
    budget?: IntNullableFilter<"Project"> | number | null
    city?: StringNullableFilter<"Project"> | string | null
    country?: StringNullableFilter<"Project"> | string | null
    endDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    fundingType?: StringNullableFilter<"Project"> | string | null
    potentialFraudDescription?: StringNullableFilter<"Project"> | string | null
    potentialFraudTypes?: StringNullableListFilter<"Project">
    projectType?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskListRelationFilter
    chatAgent?: ChatAgentTaskListRelationFilter
    documents?: DocumentListRelationFilter
    documentAnalyserTask?: DocumentAnalyserTaskListRelationFilter
    entities?: EntityListRelationFilter
    folders?: FolderListRelationFilter
    observations?: ObservationListRelationFilter
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    references?: ReferenceListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    budget?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    fundingType?: SortOrderInput | SortOrder
    potentialFraudDescription?: SortOrderInput | SortOrder
    potentialFraudTypes?: SortOrder
    projectType?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    workspaceId?: StringWithAggregatesFilter<"Project"> | string
    budget?: IntNullableWithAggregatesFilter<"Project"> | number | null
    city?: StringNullableWithAggregatesFilter<"Project"> | string | null
    country?: StringNullableWithAggregatesFilter<"Project"> | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    fundingType?: StringNullableWithAggregatesFilter<"Project"> | string | null
    potentialFraudDescription?: StringNullableWithAggregatesFilter<"Project"> | string | null
    potentialFraudTypes?: StringNullableListFilter<"Project">
    projectType?: StringNullableWithAggregatesFilter<"Project"> | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    status?: EnumProjectStatusWithAggregatesFilter<"Project"> | $Enums.ProjectStatus
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    filename?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    workspaceId?: StringNullableFilter<"Document"> | string | null
    author?: StringNullableFilter<"Document"> | string | null
    chatAgentTaskId?: StringNullableFilter<"Document"> | string | null
    createdById?: StringFilter<"Document"> | string
    dateOrPeriod?: StringNullableFilter<"Document"> | string | null
    description?: StringNullableFilter<"Document"> | string | null
    documentAnalyserTaskId?: StringNullableFilter<"Document"> | string | null
    fileType?: StringFilter<"Document"> | string
    folderId?: StringNullableFilter<"Document"> | string | null
    fullText?: StringNullableFilter<"Document"> | string | null
    language?: StringNullableFilter<"Document"> | string | null
    metadata?: StringNullableFilter<"Document"> | string | null
    projectId?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    fileSize?: IntNullableFilter<"Document"> | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFilter<"Document"> | $Enums.DocumentPreprocessStatus
    chatAgentTask?: XOR<ChatAgentTaskNullableRelationFilter, ChatAgentTaskWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    documentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    folder?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    workspace?: XOR<WorkspaceNullableRelationFilter, WorkspaceWhereInput> | null
    DocumentPage?: DocumentPageListRelationFilter
    entity?: EntityListRelationFilter
    entities?: EntityListRelationFilter
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    uploadedAt?: SortOrder
    workspaceId?: SortOrderInput | SortOrder
    author?: SortOrderInput | SortOrder
    chatAgentTaskId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    dateOrPeriod?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    documentAnalyserTaskId?: SortOrderInput | SortOrder
    fileType?: SortOrder
    folderId?: SortOrderInput | SortOrder
    fullText?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    projectId?: SortOrder
    url?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    preprocessStatus?: SortOrder
    chatAgentTask?: ChatAgentTaskOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    documentAnalyserTask?: DocumentAnalyserTaskOrderByWithRelationInput
    folder?: FolderOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
    DocumentPage?: DocumentPageOrderByRelationAggregateInput
    entity?: EntityOrderByRelationAggregateInput
    entities?: EntityOrderByRelationAggregateInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    filename?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    workspaceId?: StringNullableFilter<"Document"> | string | null
    author?: StringNullableFilter<"Document"> | string | null
    chatAgentTaskId?: StringNullableFilter<"Document"> | string | null
    createdById?: StringFilter<"Document"> | string
    dateOrPeriod?: StringNullableFilter<"Document"> | string | null
    description?: StringNullableFilter<"Document"> | string | null
    documentAnalyserTaskId?: StringNullableFilter<"Document"> | string | null
    fileType?: StringFilter<"Document"> | string
    folderId?: StringNullableFilter<"Document"> | string | null
    fullText?: StringNullableFilter<"Document"> | string | null
    language?: StringNullableFilter<"Document"> | string | null
    metadata?: StringNullableFilter<"Document"> | string | null
    projectId?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    fileSize?: IntNullableFilter<"Document"> | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFilter<"Document"> | $Enums.DocumentPreprocessStatus
    chatAgentTask?: XOR<ChatAgentTaskNullableRelationFilter, ChatAgentTaskWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    documentAnalyserTask?: XOR<DocumentAnalyserTaskNullableRelationFilter, DocumentAnalyserTaskWhereInput> | null
    folder?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    workspace?: XOR<WorkspaceNullableRelationFilter, WorkspaceWhereInput> | null
    DocumentPage?: DocumentPageListRelationFilter
    entity?: EntityListRelationFilter
    entities?: EntityListRelationFilter
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    uploadedAt?: SortOrder
    workspaceId?: SortOrderInput | SortOrder
    author?: SortOrderInput | SortOrder
    chatAgentTaskId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    dateOrPeriod?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    documentAnalyserTaskId?: SortOrderInput | SortOrder
    fileType?: SortOrder
    folderId?: SortOrderInput | SortOrder
    fullText?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    projectId?: SortOrder
    url?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    preprocessStatus?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    filename?: StringWithAggregatesFilter<"Document"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    workspaceId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    author?: StringNullableWithAggregatesFilter<"Document"> | string | null
    chatAgentTaskId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    createdById?: StringWithAggregatesFilter<"Document"> | string
    dateOrPeriod?: StringNullableWithAggregatesFilter<"Document"> | string | null
    description?: StringNullableWithAggregatesFilter<"Document"> | string | null
    documentAnalyserTaskId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    fileType?: StringWithAggregatesFilter<"Document"> | string
    folderId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    fullText?: StringNullableWithAggregatesFilter<"Document"> | string | null
    language?: StringNullableWithAggregatesFilter<"Document"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"Document"> | string | null
    projectId?: StringWithAggregatesFilter<"Document"> | string
    url?: StringWithAggregatesFilter<"Document"> | string
    fileSize?: IntNullableWithAggregatesFilter<"Document"> | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusWithAggregatesFilter<"Document"> | $Enums.DocumentPreprocessStatus
  }

  export type DocumentPageWhereInput = {
    AND?: DocumentPageWhereInput | DocumentPageWhereInput[]
    OR?: DocumentPageWhereInput[]
    NOT?: DocumentPageWhereInput | DocumentPageWhereInput[]
    id?: StringFilter<"DocumentPage"> | string
    pageNumber?: IntFilter<"DocumentPage"> | number
    createdAt?: DateTimeFilter<"DocumentPage"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentPage"> | Date | string
    documentId?: StringFilter<"DocumentPage"> | string
    imagePath?: StringNullableFilter<"DocumentPage"> | string | null
    Document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }

  export type DocumentPageOrderByWithRelationInput = {
    id?: SortOrder
    pageNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    imagePath?: SortOrderInput | SortOrder
    Document?: DocumentOrderByWithRelationInput
  }

  export type DocumentPageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentPageWhereInput | DocumentPageWhereInput[]
    OR?: DocumentPageWhereInput[]
    NOT?: DocumentPageWhereInput | DocumentPageWhereInput[]
    pageNumber?: IntFilter<"DocumentPage"> | number
    createdAt?: DateTimeFilter<"DocumentPage"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentPage"> | Date | string
    documentId?: StringFilter<"DocumentPage"> | string
    imagePath?: StringNullableFilter<"DocumentPage"> | string | null
    Document?: XOR<DocumentRelationFilter, DocumentWhereInput>
  }, "id">

  export type DocumentPageOrderByWithAggregationInput = {
    id?: SortOrder
    pageNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    imagePath?: SortOrderInput | SortOrder
    _count?: DocumentPageCountOrderByAggregateInput
    _avg?: DocumentPageAvgOrderByAggregateInput
    _max?: DocumentPageMaxOrderByAggregateInput
    _min?: DocumentPageMinOrderByAggregateInput
    _sum?: DocumentPageSumOrderByAggregateInput
  }

  export type DocumentPageScalarWhereWithAggregatesInput = {
    AND?: DocumentPageScalarWhereWithAggregatesInput | DocumentPageScalarWhereWithAggregatesInput[]
    OR?: DocumentPageScalarWhereWithAggregatesInput[]
    NOT?: DocumentPageScalarWhereWithAggregatesInput | DocumentPageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentPage"> | string
    pageNumber?: IntWithAggregatesFilter<"DocumentPage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DocumentPage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentPage"> | Date | string
    documentId?: StringWithAggregatesFilter<"DocumentPage"> | string
    imagePath?: StringNullableWithAggregatesFilter<"DocumentPage"> | string | null
  }

  export type FolderWhereInput = {
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    id?: StringFilter<"Folder"> | string
    name?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    parentFolderId?: StringNullableFilter<"Folder"> | string | null
    projectId?: StringFilter<"Folder"> | string
    createdById?: StringFilter<"Folder"> | string
    documents?: DocumentListRelationFilter
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    parentFolder?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    subfolders?: FolderListRelationFilter
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type FolderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentFolderId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    createdById?: SortOrder
    documents?: DocumentOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    parentFolder?: FolderOrderByWithRelationInput
    subfolders?: FolderOrderByRelationAggregateInput
    project?: ProjectOrderByWithRelationInput
  }

  export type FolderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    name?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    parentFolderId?: StringNullableFilter<"Folder"> | string | null
    projectId?: StringFilter<"Folder"> | string
    createdById?: StringFilter<"Folder"> | string
    documents?: DocumentListRelationFilter
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    parentFolder?: XOR<FolderNullableRelationFilter, FolderWhereInput> | null
    subfolders?: FolderListRelationFilter
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id">

  export type FolderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentFolderId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    createdById?: SortOrder
    _count?: FolderCountOrderByAggregateInput
    _max?: FolderMaxOrderByAggregateInput
    _min?: FolderMinOrderByAggregateInput
  }

  export type FolderScalarWhereWithAggregatesInput = {
    AND?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    OR?: FolderScalarWhereWithAggregatesInput[]
    NOT?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Folder"> | string
    name?: StringWithAggregatesFilter<"Folder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
    parentFolderId?: StringNullableWithAggregatesFilter<"Folder"> | string | null
    projectId?: StringWithAggregatesFilter<"Folder"> | string
    createdById?: StringWithAggregatesFilter<"Folder"> | string
  }

  export type DocumentAnalyserTaskWhereInput = {
    AND?: DocumentAnalyserTaskWhereInput | DocumentAnalyserTaskWhereInput[]
    OR?: DocumentAnalyserTaskWhereInput[]
    NOT?: DocumentAnalyserTaskWhereInput | DocumentAnalyserTaskWhereInput[]
    id?: StringFilter<"DocumentAnalyserTask"> | string
    name?: StringFilter<"DocumentAnalyserTask"> | string
    createdAt?: DateTimeFilter<"DocumentAnalyserTask"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentAnalyserTask"> | Date | string
    workspaceId?: StringFilter<"DocumentAnalyserTask"> | string
    projectId?: StringFilter<"DocumentAnalyserTask"> | string
    nextSteps?: StringNullableListFilter<"DocumentAnalyserTask">
    status?: EnumDocumentAnalyserTaskStatusFilter<"DocumentAnalyserTask"> | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: StringNullableFilter<"DocumentAnalyserTask"> | string | null
    inputContext?: StringNullableFilter<"DocumentAnalyserTask"> | string | null
    inputDocuments?: DocumentListRelationFilter
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    entities?: EntityListRelationFilter
    observations?: ObservationListRelationFilter
    references?: ReferenceListRelationFilter
  }

  export type DocumentAnalyserTaskOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    nextSteps?: SortOrder
    status?: SortOrder
    outputDescription?: SortOrderInput | SortOrder
    inputContext?: SortOrderInput | SortOrder
    inputDocuments?: DocumentOrderByRelationAggregateInput
    project?: ProjectOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
    entities?: EntityOrderByRelationAggregateInput
    observations?: ObservationOrderByRelationAggregateInput
    references?: ReferenceOrderByRelationAggregateInput
  }

  export type DocumentAnalyserTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentAnalyserTaskWhereInput | DocumentAnalyserTaskWhereInput[]
    OR?: DocumentAnalyserTaskWhereInput[]
    NOT?: DocumentAnalyserTaskWhereInput | DocumentAnalyserTaskWhereInput[]
    name?: StringFilter<"DocumentAnalyserTask"> | string
    createdAt?: DateTimeFilter<"DocumentAnalyserTask"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentAnalyserTask"> | Date | string
    workspaceId?: StringFilter<"DocumentAnalyserTask"> | string
    projectId?: StringFilter<"DocumentAnalyserTask"> | string
    nextSteps?: StringNullableListFilter<"DocumentAnalyserTask">
    status?: EnumDocumentAnalyserTaskStatusFilter<"DocumentAnalyserTask"> | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: StringNullableFilter<"DocumentAnalyserTask"> | string | null
    inputContext?: StringNullableFilter<"DocumentAnalyserTask"> | string | null
    inputDocuments?: DocumentListRelationFilter
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    entities?: EntityListRelationFilter
    observations?: ObservationListRelationFilter
    references?: ReferenceListRelationFilter
  }, "id">

  export type DocumentAnalyserTaskOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    nextSteps?: SortOrder
    status?: SortOrder
    outputDescription?: SortOrderInput | SortOrder
    inputContext?: SortOrderInput | SortOrder
    _count?: DocumentAnalyserTaskCountOrderByAggregateInput
    _max?: DocumentAnalyserTaskMaxOrderByAggregateInput
    _min?: DocumentAnalyserTaskMinOrderByAggregateInput
  }

  export type DocumentAnalyserTaskScalarWhereWithAggregatesInput = {
    AND?: DocumentAnalyserTaskScalarWhereWithAggregatesInput | DocumentAnalyserTaskScalarWhereWithAggregatesInput[]
    OR?: DocumentAnalyserTaskScalarWhereWithAggregatesInput[]
    NOT?: DocumentAnalyserTaskScalarWhereWithAggregatesInput | DocumentAnalyserTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentAnalyserTask"> | string
    name?: StringWithAggregatesFilter<"DocumentAnalyserTask"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DocumentAnalyserTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentAnalyserTask"> | Date | string
    workspaceId?: StringWithAggregatesFilter<"DocumentAnalyserTask"> | string
    projectId?: StringWithAggregatesFilter<"DocumentAnalyserTask"> | string
    nextSteps?: StringNullableListFilter<"DocumentAnalyserTask">
    status?: EnumDocumentAnalyserTaskStatusWithAggregatesFilter<"DocumentAnalyserTask"> | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: StringNullableWithAggregatesFilter<"DocumentAnalyserTask"> | string | null
    inputContext?: StringNullableWithAggregatesFilter<"DocumentAnalyserTask"> | string | null
  }

  export type ChatAgentTaskWhereInput = {
    AND?: ChatAgentTaskWhereInput | ChatAgentTaskWhereInput[]
    OR?: ChatAgentTaskWhereInput[]
    NOT?: ChatAgentTaskWhereInput | ChatAgentTaskWhereInput[]
    id?: StringFilter<"ChatAgentTask"> | string
    name?: StringFilter<"ChatAgentTask"> | string
    createdAt?: DateTimeFilter<"ChatAgentTask"> | Date | string
    updatedAt?: DateTimeFilter<"ChatAgentTask"> | Date | string
    workspaceId?: StringFilter<"ChatAgentTask"> | string
    projectId?: StringFilter<"ChatAgentTask"> | string
    userId?: StringFilter<"ChatAgentTask"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    contextDocuments?: DocumentListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type ChatAgentTaskOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
    contextDocuments?: DocumentOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatAgentTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatAgentTaskWhereInput | ChatAgentTaskWhereInput[]
    OR?: ChatAgentTaskWhereInput[]
    NOT?: ChatAgentTaskWhereInput | ChatAgentTaskWhereInput[]
    name?: StringFilter<"ChatAgentTask"> | string
    createdAt?: DateTimeFilter<"ChatAgentTask"> | Date | string
    updatedAt?: DateTimeFilter<"ChatAgentTask"> | Date | string
    workspaceId?: StringFilter<"ChatAgentTask"> | string
    projectId?: StringFilter<"ChatAgentTask"> | string
    userId?: StringFilter<"ChatAgentTask"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceRelationFilter, WorkspaceWhereInput>
    contextDocuments?: DocumentListRelationFilter
    messages?: MessageListRelationFilter
  }, "id">

  export type ChatAgentTaskOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    _count?: ChatAgentTaskCountOrderByAggregateInput
    _max?: ChatAgentTaskMaxOrderByAggregateInput
    _min?: ChatAgentTaskMinOrderByAggregateInput
  }

  export type ChatAgentTaskScalarWhereWithAggregatesInput = {
    AND?: ChatAgentTaskScalarWhereWithAggregatesInput | ChatAgentTaskScalarWhereWithAggregatesInput[]
    OR?: ChatAgentTaskScalarWhereWithAggregatesInput[]
    NOT?: ChatAgentTaskScalarWhereWithAggregatesInput | ChatAgentTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatAgentTask"> | string
    name?: StringWithAggregatesFilter<"ChatAgentTask"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatAgentTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatAgentTask"> | Date | string
    workspaceId?: StringWithAggregatesFilter<"ChatAgentTask"> | string
    projectId?: StringWithAggregatesFilter<"ChatAgentTask"> | string
    userId?: StringWithAggregatesFilter<"ChatAgentTask"> | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    messageSender?: EnumMessageSenderFilter<"Message"> | $Enums.MessageSender
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    chatAgentTaskId?: StringFilter<"Message"> | string
    chatAgentTask?: XOR<ChatAgentTaskRelationFilter, ChatAgentTaskWhereInput>
    messageActions?: MessageActionListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    messageSender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatAgentTaskId?: SortOrder
    chatAgentTask?: ChatAgentTaskOrderByWithRelationInput
    messageActions?: MessageActionOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    messageSender?: EnumMessageSenderFilter<"Message"> | $Enums.MessageSender
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    chatAgentTaskId?: StringFilter<"Message"> | string
    chatAgentTask?: XOR<ChatAgentTaskRelationFilter, ChatAgentTaskWhereInput>
    messageActions?: MessageActionListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    messageSender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatAgentTaskId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    messageSender?: EnumMessageSenderWithAggregatesFilter<"Message"> | $Enums.MessageSender
    content?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    chatAgentTaskId?: StringWithAggregatesFilter<"Message"> | string
  }

  export type MessageActionWhereInput = {
    AND?: MessageActionWhereInput | MessageActionWhereInput[]
    OR?: MessageActionWhereInput[]
    NOT?: MessageActionWhereInput | MessageActionWhereInput[]
    id?: StringFilter<"MessageAction"> | string
    title?: StringFilter<"MessageAction"> | string
    messageId?: StringFilter<"MessageAction"> | string
    messageActionType?: EnumMessageActionTypeFilter<"MessageAction"> | $Enums.MessageActionType
    documentId?: StringFilter<"MessageAction"> | string
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }

  export type MessageActionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    messageId?: SortOrder
    messageActionType?: SortOrder
    documentId?: SortOrder
    message?: MessageOrderByWithRelationInput
  }

  export type MessageActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageActionWhereInput | MessageActionWhereInput[]
    OR?: MessageActionWhereInput[]
    NOT?: MessageActionWhereInput | MessageActionWhereInput[]
    title?: StringFilter<"MessageAction"> | string
    messageId?: StringFilter<"MessageAction"> | string
    messageActionType?: EnumMessageActionTypeFilter<"MessageAction"> | $Enums.MessageActionType
    documentId?: StringFilter<"MessageAction"> | string
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }, "id">

  export type MessageActionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    messageId?: SortOrder
    messageActionType?: SortOrder
    documentId?: SortOrder
    _count?: MessageActionCountOrderByAggregateInput
    _max?: MessageActionMaxOrderByAggregateInput
    _min?: MessageActionMinOrderByAggregateInput
  }

  export type MessageActionScalarWhereWithAggregatesInput = {
    AND?: MessageActionScalarWhereWithAggregatesInput | MessageActionScalarWhereWithAggregatesInput[]
    OR?: MessageActionScalarWhereWithAggregatesInput[]
    NOT?: MessageActionScalarWhereWithAggregatesInput | MessageActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageAction"> | string
    title?: StringWithAggregatesFilter<"MessageAction"> | string
    messageId?: StringWithAggregatesFilter<"MessageAction"> | string
    messageActionType?: EnumMessageActionTypeWithAggregatesFilter<"MessageAction"> | $Enums.MessageActionType
    documentId?: StringWithAggregatesFilter<"MessageAction"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskCreateNestedManyWithoutUserInput
    Document?: DocumentCreateNestedManyWithoutCreatedByInput
    Folder?: FolderCreateNestedManyWithoutCreatedByInput
    activeWorkspace?: WorkspaceCreateNestedOneWithoutUsersInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWorkspaceId?: string | null
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutUserInput
    Document?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    Folder?: FolderUncheckedCreateNestedManyWithoutCreatedByInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUpdateManyWithoutUserNestedInput
    Document?: DocumentUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUpdateManyWithoutCreatedByNestedInput
    activeWorkspace?: WorkspaceUpdateOneWithoutUsersNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWorkspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutUserNestedInput
    Document?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUncheckedUpdateManyWithoutCreatedByNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWorkspaceId?: string | null
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWorkspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkspaceCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
  }

  export type WorkspaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkspaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkspaceUserCreateInput = {
    id?: string
    role: $Enums.WorkspaceRole
    user: UserCreateNestedOneWithoutWorkspaceUsersInput
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceUsersInput
  }

  export type WorkspaceUserUncheckedCreateInput = {
    id?: string
    workspaceId: string
    userId: string
    role: $Enums.WorkspaceRole
  }

  export type WorkspaceUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    user?: UserUpdateOneRequiredWithoutWorkspaceUsersNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceUsersNestedInput
  }

  export type WorkspaceUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
  }

  export type WorkspaceUserCreateManyInput = {
    id?: string
    workspaceId: string
    userId: string
    role: $Enums.WorkspaceRole
  }

  export type WorkspaceUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
  }

  export type WorkspaceUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
  }

  export type InvitationCreateInput = {
    id?: string
    email: string
    role: $Enums.WorkspaceRole
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    accepted?: boolean
    workspace: WorkspaceCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateInput = {
    id?: string
    email: string
    workspaceId: string
    role: $Enums.WorkspaceRole
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    accepted?: boolean
  }

  export type InvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
    workspace?: WorkspaceUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationCreateManyInput = {
    id?: string
    email: string
    workspaceId: string
    role: $Enums.WorkspaceRole
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    accepted?: boolean
  }

  export type InvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BusinessRiskReportTaskCreateInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    createdBy: UserCreateNestedOneWithoutBusinessRiskReportTasksInput
    mainEntity?: EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput
    project?: ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput
    workspace: WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput
    observations?: ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUncheckedCreateInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
    observations?: ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    mainEntity?: EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput
    project?: ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    observations?: ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskCreateManyInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
  }

  export type BusinessRiskReportTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput
    Document?: DocumentCreateNestedOneWithoutEntityInput
    project?: ProjectCreateNestedOneWithoutEntitiesInput
    workspace?: WorkspaceCreateNestedOneWithoutEntitiesInput
    documents?: DocumentCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    projectId?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput
    Document?: DocumentUpdateOneWithoutEntityNestedInput
    project?: ProjectUpdateOneWithoutEntitiesNestedInput
    workspace?: WorkspaceUpdateOneWithoutEntitiesNestedInput
    documents?: DocumentUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    projectId?: string | null
  }

  export type EntityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ObservationCreateInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutObservationsInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutObservationsInput
    project?: ProjectCreateNestedOneWithoutObservationsInput
    references?: ReferenceCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTaskId?: string | null
    projectId?: string | null
    documentAnalyserTaskId?: string | null
    references?: ReferenceUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutObservationsNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutObservationsNestedInput
    project?: ProjectUpdateOneWithoutObservationsNestedInput
    references?: ReferenceUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    references?: ReferenceUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationCreateManyInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTaskId?: string | null
    projectId?: string | null
    documentAnalyserTaskId?: string | null
  }

  export type ObservationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ObservationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceCreateInput = {
    id?: string
    url: string
    title?: string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutReferencesInput
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutReferencesInput
    observation?: ObservationCreateNestedOneWithoutReferencesInput
    project?: ProjectCreateNestedOneWithoutReferencesInput
  }

  export type ReferenceUncheckedCreateInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
    observationId?: string | null
  }

  export type ReferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutReferencesNestedInput
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutReferencesNestedInput
    observation?: ObservationUpdateOneWithoutReferencesNestedInput
    project?: ProjectUpdateOneWithoutReferencesNestedInput
  }

  export type ReferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceCreateManyInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
    observationId?: string | null
  }

  export type ReferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
  }

  export type DocumentCreateInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentCreateManyInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type DocumentPageCreateInput = {
    id?: string
    pageNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imagePath?: string | null
    Document: DocumentCreateNestedOneWithoutDocumentPageInput
  }

  export type DocumentPageUncheckedCreateInput = {
    id?: string
    pageNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    documentId: string
    imagePath?: string | null
  }

  export type DocumentPageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
    Document?: DocumentUpdateOneRequiredWithoutDocumentPageNestedInput
  }

  export type DocumentPageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentPageCreateManyInput = {
    id?: string
    pageNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    documentId: string
    imagePath?: string | null
  }

  export type DocumentPageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentPageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FolderCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutFolderInput
    createdBy: UserCreateNestedOneWithoutFolderInput
    parentFolder?: FolderCreateNestedOneWithoutSubfoldersInput
    subfolders?: FolderCreateNestedManyWithoutParentFolderInput
    project: ProjectCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    projectId: string
    createdById: string
    documents?: DocumentUncheckedCreateNestedManyWithoutFolderInput
    subfolders?: FolderUncheckedCreateNestedManyWithoutParentFolderInput
  }

  export type FolderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutFolderNestedInput
    createdBy?: UserUpdateOneRequiredWithoutFolderNestedInput
    parentFolder?: FolderUpdateOneWithoutSubfoldersNestedInput
    subfolders?: FolderUpdateManyWithoutParentFolderNestedInput
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutFolderNestedInput
    subfolders?: FolderUncheckedUpdateManyWithoutParentFolderNestedInput
  }

  export type FolderCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    projectId: string
    createdById: string
  }

  export type FolderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentAnalyserTaskCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentCreateNestedManyWithoutDocumentAnalyserTaskInput
    project: ProjectCreateNestedOneWithoutDocumentAnalyserTaskInput
    workspace: WorkspaceCreateNestedOneWithoutDocumentAnalyserTaskInput
    entities?: EntityCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUpdateManyWithoutDocumentAnalyserTaskNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
  }

  export type DocumentAnalyserTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentAnalyserTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatAgentTaskCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutChatAgentInput
    user: UserCreateNestedOneWithoutChatAgentTaskInput
    workspace: WorkspaceCreateNestedOneWithoutChatAgentTaskInput
    contextDocuments?: DocumentCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    userId: string
    contextDocuments?: DocumentUncheckedCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutChatAgentNestedInput
    user?: UserUpdateOneRequiredWithoutChatAgentTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutChatAgentTaskNestedInput
    contextDocuments?: DocumentUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contextDocuments?: DocumentUncheckedUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    userId: string
  }

  export type ChatAgentTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatAgentTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatAgentTask: ChatAgentTaskCreateNestedOneWithoutMessagesInput
    messageActions?: MessageActionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatAgentTaskId: string
    messageActions?: MessageActionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatAgentTask?: ChatAgentTaskUpdateOneRequiredWithoutMessagesNestedInput
    messageActions?: MessageActionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatAgentTaskId?: StringFieldUpdateOperationsInput | string
    messageActions?: MessageActionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatAgentTaskId: string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatAgentTaskId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageActionCreateInput = {
    id?: string
    title: string
    messageActionType: $Enums.MessageActionType
    documentId: string
    message: MessageCreateNestedOneWithoutMessageActionsInput
  }

  export type MessageActionUncheckedCreateInput = {
    id?: string
    title: string
    messageId: string
    messageActionType: $Enums.MessageActionType
    documentId: string
  }

  export type MessageActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    messageActionType?: EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
    documentId?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutMessageActionsNestedInput
  }

  export type MessageActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    messageActionType?: EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageActionCreateManyInput = {
    id?: string
    title: string
    messageId: string
    messageActionType: $Enums.MessageActionType
    documentId: string
  }

  export type MessageActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    messageActionType?: EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    messageActionType?: EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BusinessRiskReportTaskListRelationFilter = {
    every?: BusinessRiskReportTaskWhereInput
    some?: BusinessRiskReportTaskWhereInput
    none?: BusinessRiskReportTaskWhereInput
  }

  export type ChatAgentTaskListRelationFilter = {
    every?: ChatAgentTaskWhereInput
    some?: ChatAgentTaskWhereInput
    none?: ChatAgentTaskWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type FolderListRelationFilter = {
    every?: FolderWhereInput
    some?: FolderWhereInput
    none?: FolderWhereInput
  }

  export type WorkspaceNullableRelationFilter = {
    is?: WorkspaceWhereInput | null
    isNot?: WorkspaceWhereInput | null
  }

  export type WorkspaceUserListRelationFilter = {
    every?: WorkspaceUserWhereInput
    some?: WorkspaceUserWhereInput
    none?: WorkspaceUserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BusinessRiskReportTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatAgentTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FolderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWorkspaceId?: SortOrder
    profileImage?: SortOrder
    hasVerifiedEmail?: SortOrder
    verificationToken?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWorkspaceId?: SortOrder
    profileImage?: SortOrder
    hasVerifiedEmail?: SortOrder
    verificationToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWorkspaceId?: SortOrder
    profileImage?: SortOrder
    hasVerifiedEmail?: SortOrder
    verificationToken?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DocumentAnalyserTaskListRelationFilter = {
    every?: DocumentAnalyserTaskWhereInput
    some?: DocumentAnalyserTaskWhereInput
    none?: DocumentAnalyserTaskWhereInput
  }

  export type EntityListRelationFilter = {
    every?: EntityWhereInput
    some?: EntityWhereInput
    none?: EntityWhereInput
  }

  export type InvitationListRelationFilter = {
    every?: InvitationWhereInput
    some?: InvitationWhereInput
    none?: InvitationWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DocumentAnalyserTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    language?: SortOrder
  }

  export type WorkspaceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    language?: SortOrder
  }

  export type WorkspaceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    language?: SortOrder
  }

  export type EnumWorkspaceRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleFilter<$PrismaModel> | $Enums.WorkspaceRole
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WorkspaceRelationFilter = {
    is?: WorkspaceWhereInput
    isNot?: WorkspaceWhereInput
  }

  export type WorkspaceUserCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type WorkspaceUserMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type WorkspaceUserMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type EnumWorkspaceRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
  }

  export type InvitationCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    workspaceId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    accepted?: SortOrder
  }

  export type InvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    workspaceId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    accepted?: SortOrder
  }

  export type InvitationMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    workspaceId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    accepted?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumBusinessRiskReportTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRiskReportTaskStatus | EnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRiskReportTaskStatusFilter<$PrismaModel> | $Enums.BusinessRiskReportTaskStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EntityNullableRelationFilter = {
    is?: EntityWhereInput | null
    isNot?: EntityWhereInput | null
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ObservationListRelationFilter = {
    every?: ObservationWhereInput
    some?: ObservationWhereInput
    none?: ObservationWhereInput
  }

  export type ReferenceListRelationFilter = {
    every?: ReferenceWhereInput
    some?: ReferenceWhereInput
    none?: ReferenceWhereInput
  }

  export type ObservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BusinessRiskReportTaskCountOrderByAggregateInput = {
    id?: SortOrder
    reportName?: SortOrder
    generalDescription?: SortOrder
    natureOfBusiness?: SortOrder
    geography?: SortOrder
    riskOverview?: SortOrder
    nextSteps?: SortOrder
    inputUrl?: SortOrder
    createdById?: SortOrder
    workspaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    mainEntityId?: SortOrder
    displayId?: SortOrder
    projectId?: SortOrder
  }

  export type BusinessRiskReportTaskAvgOrderByAggregateInput = {
    displayId?: SortOrder
  }

  export type BusinessRiskReportTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    reportName?: SortOrder
    generalDescription?: SortOrder
    natureOfBusiness?: SortOrder
    geography?: SortOrder
    riskOverview?: SortOrder
    inputUrl?: SortOrder
    createdById?: SortOrder
    workspaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    mainEntityId?: SortOrder
    displayId?: SortOrder
    projectId?: SortOrder
  }

  export type BusinessRiskReportTaskMinOrderByAggregateInput = {
    id?: SortOrder
    reportName?: SortOrder
    generalDescription?: SortOrder
    natureOfBusiness?: SortOrder
    geography?: SortOrder
    riskOverview?: SortOrder
    inputUrl?: SortOrder
    createdById?: SortOrder
    workspaceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    mainEntityId?: SortOrder
    displayId?: SortOrder
    projectId?: SortOrder
  }

  export type BusinessRiskReportTaskSumOrderByAggregateInput = {
    displayId?: SortOrder
  }

  export type EnumBusinessRiskReportTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRiskReportTaskStatus | EnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRiskReportTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.BusinessRiskReportTaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessRiskReportTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumBusinessRiskReportTaskStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeFilter<$PrismaModel> | $Enums.EntityType
  }

  export type DocumentAnalyserTaskNullableRelationFilter = {
    is?: DocumentAnalyserTaskWhereInput | null
    isNot?: DocumentAnalyserTaskWhereInput | null
  }

  export type DocumentNullableRelationFilter = {
    is?: DocumentWhereInput | null
    isNot?: DocumentWhereInput | null
  }

  export type EntityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    socialLinks?: SortOrder
    country?: SortOrder
    city?: SortOrder
    state?: SortOrder
    streetAddress?: SortOrder
    zipCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    workspaceId?: SortOrder
    industry?: SortOrder
    role?: SortOrder
    DocumentAnalyserTaskId?: SortOrder
    documentId?: SortOrder
    projectId?: SortOrder
  }

  export type EntityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    country?: SortOrder
    city?: SortOrder
    state?: SortOrder
    streetAddress?: SortOrder
    zipCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    workspaceId?: SortOrder
    industry?: SortOrder
    role?: SortOrder
    DocumentAnalyserTaskId?: SortOrder
    documentId?: SortOrder
    projectId?: SortOrder
  }

  export type EntityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    country?: SortOrder
    city?: SortOrder
    state?: SortOrder
    streetAddress?: SortOrder
    zipCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    workspaceId?: SortOrder
    industry?: SortOrder
    role?: SortOrder
    DocumentAnalyserTaskId?: SortOrder
    documentId?: SortOrder
    projectId?: SortOrder
  }

  export type EnumEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumEntityTypeFilter<$PrismaModel>
  }

  export type BusinessRiskReportTaskNullableRelationFilter = {
    is?: BusinessRiskReportTaskWhereInput | null
    isNot?: BusinessRiskReportTaskWhereInput | null
  }

  export type ObservationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    riskGrade?: SortOrder
    type?: SortOrder
    businessRiskReportTaskId?: SortOrder
    projectId?: SortOrder
    documentAnalyserTaskId?: SortOrder
  }

  export type ObservationAvgOrderByAggregateInput = {
    riskGrade?: SortOrder
  }

  export type ObservationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    riskGrade?: SortOrder
    type?: SortOrder
    businessRiskReportTaskId?: SortOrder
    projectId?: SortOrder
    documentAnalyserTaskId?: SortOrder
  }

  export type ObservationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    riskGrade?: SortOrder
    type?: SortOrder
    businessRiskReportTaskId?: SortOrder
    projectId?: SortOrder
    documentAnalyserTaskId?: SortOrder
  }

  export type ObservationSumOrderByAggregateInput = {
    riskGrade?: SortOrder
  }

  export type ObservationNullableRelationFilter = {
    is?: ObservationWhereInput | null
    isNot?: ObservationWhereInput | null
  }

  export type ReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    businessRiskReportTaskId?: SortOrder
    DocumentAnalyserTaskId?: SortOrder
    projectId?: SortOrder
    observationId?: SortOrder
  }

  export type ReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    businessRiskReportTaskId?: SortOrder
    DocumentAnalyserTaskId?: SortOrder
    projectId?: SortOrder
    observationId?: SortOrder
  }

  export type ReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    businessRiskReportTaskId?: SortOrder
    DocumentAnalyserTaskId?: SortOrder
    projectId?: SortOrder
    observationId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    budget?: SortOrder
    city?: SortOrder
    country?: SortOrder
    endDate?: SortOrder
    fundingType?: SortOrder
    potentialFraudDescription?: SortOrder
    potentialFraudTypes?: SortOrder
    projectType?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    budget?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    budget?: SortOrder
    city?: SortOrder
    country?: SortOrder
    endDate?: SortOrder
    fundingType?: SortOrder
    potentialFraudDescription?: SortOrder
    projectType?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    budget?: SortOrder
    city?: SortOrder
    country?: SortOrder
    endDate?: SortOrder
    fundingType?: SortOrder
    potentialFraudDescription?: SortOrder
    projectType?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    budget?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type EnumDocumentPreprocessStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentPreprocessStatus | EnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentPreprocessStatusFilter<$PrismaModel> | $Enums.DocumentPreprocessStatus
  }

  export type ChatAgentTaskNullableRelationFilter = {
    is?: ChatAgentTaskWhereInput | null
    isNot?: ChatAgentTaskWhereInput | null
  }

  export type FolderNullableRelationFilter = {
    is?: FolderWhereInput | null
    isNot?: FolderWhereInput | null
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type DocumentPageListRelationFilter = {
    every?: DocumentPageWhereInput
    some?: DocumentPageWhereInput
    none?: DocumentPageWhereInput
  }

  export type DocumentPageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    uploadedAt?: SortOrder
    workspaceId?: SortOrder
    author?: SortOrder
    chatAgentTaskId?: SortOrder
    createdById?: SortOrder
    dateOrPeriod?: SortOrder
    description?: SortOrder
    documentAnalyserTaskId?: SortOrder
    fileType?: SortOrder
    folderId?: SortOrder
    fullText?: SortOrder
    language?: SortOrder
    metadata?: SortOrder
    projectId?: SortOrder
    url?: SortOrder
    fileSize?: SortOrder
    preprocessStatus?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    uploadedAt?: SortOrder
    workspaceId?: SortOrder
    author?: SortOrder
    chatAgentTaskId?: SortOrder
    createdById?: SortOrder
    dateOrPeriod?: SortOrder
    description?: SortOrder
    documentAnalyserTaskId?: SortOrder
    fileType?: SortOrder
    folderId?: SortOrder
    fullText?: SortOrder
    language?: SortOrder
    metadata?: SortOrder
    projectId?: SortOrder
    url?: SortOrder
    fileSize?: SortOrder
    preprocessStatus?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    uploadedAt?: SortOrder
    workspaceId?: SortOrder
    author?: SortOrder
    chatAgentTaskId?: SortOrder
    createdById?: SortOrder
    dateOrPeriod?: SortOrder
    description?: SortOrder
    documentAnalyserTaskId?: SortOrder
    fileType?: SortOrder
    folderId?: SortOrder
    fullText?: SortOrder
    language?: SortOrder
    metadata?: SortOrder
    projectId?: SortOrder
    url?: SortOrder
    fileSize?: SortOrder
    preprocessStatus?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type EnumDocumentPreprocessStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentPreprocessStatus | EnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentPreprocessStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocumentPreprocessStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentPreprocessStatusFilter<$PrismaModel>
    _max?: NestedEnumDocumentPreprocessStatusFilter<$PrismaModel>
  }

  export type DocumentRelationFilter = {
    is?: DocumentWhereInput
    isNot?: DocumentWhereInput
  }

  export type DocumentPageCountOrderByAggregateInput = {
    id?: SortOrder
    pageNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    imagePath?: SortOrder
  }

  export type DocumentPageAvgOrderByAggregateInput = {
    pageNumber?: SortOrder
  }

  export type DocumentPageMaxOrderByAggregateInput = {
    id?: SortOrder
    pageNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    imagePath?: SortOrder
  }

  export type DocumentPageMinOrderByAggregateInput = {
    id?: SortOrder
    pageNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    imagePath?: SortOrder
  }

  export type DocumentPageSumOrderByAggregateInput = {
    pageNumber?: SortOrder
  }

  export type FolderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentFolderId?: SortOrder
    projectId?: SortOrder
    createdById?: SortOrder
  }

  export type FolderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentFolderId?: SortOrder
    projectId?: SortOrder
    createdById?: SortOrder
  }

  export type FolderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentFolderId?: SortOrder
    projectId?: SortOrder
    createdById?: SortOrder
  }

  export type EnumDocumentAnalyserTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentAnalyserTaskStatus | EnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentAnalyserTaskStatusFilter<$PrismaModel> | $Enums.DocumentAnalyserTaskStatus
  }

  export type DocumentAnalyserTaskCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    nextSteps?: SortOrder
    status?: SortOrder
    outputDescription?: SortOrder
    inputContext?: SortOrder
  }

  export type DocumentAnalyserTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    status?: SortOrder
    outputDescription?: SortOrder
    inputContext?: SortOrder
  }

  export type DocumentAnalyserTaskMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    status?: SortOrder
    outputDescription?: SortOrder
    inputContext?: SortOrder
  }

  export type EnumDocumentAnalyserTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentAnalyserTaskStatus | EnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentAnalyserTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocumentAnalyserTaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentAnalyserTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumDocumentAnalyserTaskStatusFilter<$PrismaModel>
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatAgentTaskCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
  }

  export type ChatAgentTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
  }

  export type ChatAgentTaskMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspaceId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
  }

  export type EnumMessageSenderFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderFilter<$PrismaModel> | $Enums.MessageSender
  }

  export type ChatAgentTaskRelationFilter = {
    is?: ChatAgentTaskWhereInput
    isNot?: ChatAgentTaskWhereInput
  }

  export type MessageActionListRelationFilter = {
    every?: MessageActionWhereInput
    some?: MessageActionWhereInput
    none?: MessageActionWhereInput
  }

  export type MessageActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    messageSender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatAgentTaskId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    messageSender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatAgentTaskId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    messageSender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatAgentTaskId?: SortOrder
  }

  export type EnumMessageSenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderWithAggregatesFilter<$PrismaModel> | $Enums.MessageSender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageSenderFilter<$PrismaModel>
    _max?: NestedEnumMessageSenderFilter<$PrismaModel>
  }

  export type EnumMessageActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageActionType | EnumMessageActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageActionTypeFilter<$PrismaModel> | $Enums.MessageActionType
  }

  export type MessageRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type MessageActionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    messageId?: SortOrder
    messageActionType?: SortOrder
    documentId?: SortOrder
  }

  export type MessageActionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    messageId?: SortOrder
    messageActionType?: SortOrder
    documentId?: SortOrder
  }

  export type MessageActionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    messageId?: SortOrder
    messageActionType?: SortOrder
    documentId?: SortOrder
  }

  export type EnumMessageActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageActionType | EnumMessageActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.MessageActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageActionTypeFilter<$PrismaModel>
    _max?: NestedEnumMessageActionTypeFilter<$PrismaModel>
  }

  export type BusinessRiskReportTaskCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput> | BusinessRiskReportTaskCreateWithoutCreatedByInput[] | BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput | BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput[]
    createMany?: BusinessRiskReportTaskCreateManyCreatedByInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type ChatAgentTaskCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatAgentTaskCreateWithoutUserInput, ChatAgentTaskUncheckedCreateWithoutUserInput> | ChatAgentTaskCreateWithoutUserInput[] | ChatAgentTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutUserInput | ChatAgentTaskCreateOrConnectWithoutUserInput[]
    createMany?: ChatAgentTaskCreateManyUserInputEnvelope
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type FolderCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<FolderCreateWithoutCreatedByInput, FolderUncheckedCreateWithoutCreatedByInput> | FolderCreateWithoutCreatedByInput[] | FolderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutCreatedByInput | FolderCreateOrConnectWithoutCreatedByInput[]
    createMany?: FolderCreateManyCreatedByInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type WorkspaceCreateNestedOneWithoutUsersInput = {
    create?: XOR<WorkspaceCreateWithoutUsersInput, WorkspaceUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutUsersInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type WorkspaceUserCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceUserCreateWithoutUserInput, WorkspaceUserUncheckedCreateWithoutUserInput> | WorkspaceUserCreateWithoutUserInput[] | WorkspaceUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutUserInput | WorkspaceUserCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceUserCreateManyUserInputEnvelope
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput> | BusinessRiskReportTaskCreateWithoutCreatedByInput[] | BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput | BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput[]
    createMany?: BusinessRiskReportTaskCreateManyCreatedByInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type ChatAgentTaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatAgentTaskCreateWithoutUserInput, ChatAgentTaskUncheckedCreateWithoutUserInput> | ChatAgentTaskCreateWithoutUserInput[] | ChatAgentTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutUserInput | ChatAgentTaskCreateOrConnectWithoutUserInput[]
    createMany?: ChatAgentTaskCreateManyUserInputEnvelope
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<FolderCreateWithoutCreatedByInput, FolderUncheckedCreateWithoutCreatedByInput> | FolderCreateWithoutCreatedByInput[] | FolderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutCreatedByInput | FolderCreateOrConnectWithoutCreatedByInput[]
    createMany?: FolderCreateManyCreatedByInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type WorkspaceUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceUserCreateWithoutUserInput, WorkspaceUserUncheckedCreateWithoutUserInput> | WorkspaceUserCreateWithoutUserInput[] | WorkspaceUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutUserInput | WorkspaceUserCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceUserCreateManyUserInputEnvelope
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BusinessRiskReportTaskUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput> | BusinessRiskReportTaskCreateWithoutCreatedByInput[] | BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput | BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutCreatedByInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BusinessRiskReportTaskCreateManyCreatedByInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutCreatedByInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutCreatedByInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type ChatAgentTaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutUserInput, ChatAgentTaskUncheckedCreateWithoutUserInput> | ChatAgentTaskCreateWithoutUserInput[] | ChatAgentTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutUserInput | ChatAgentTaskCreateOrConnectWithoutUserInput[]
    upsert?: ChatAgentTaskUpsertWithWhereUniqueWithoutUserInput | ChatAgentTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatAgentTaskCreateManyUserInputEnvelope
    set?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    disconnect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    delete?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    update?: ChatAgentTaskUpdateWithWhereUniqueWithoutUserInput | ChatAgentTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatAgentTaskUpdateManyWithWhereWithoutUserInput | ChatAgentTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatedByInput | DocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatedByInput | DocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatedByInput | DocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type FolderUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<FolderCreateWithoutCreatedByInput, FolderUncheckedCreateWithoutCreatedByInput> | FolderCreateWithoutCreatedByInput[] | FolderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutCreatedByInput | FolderCreateOrConnectWithoutCreatedByInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutCreatedByInput | FolderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: FolderCreateManyCreatedByInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutCreatedByInput | FolderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutCreatedByInput | FolderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type WorkspaceUpdateOneWithoutUsersNestedInput = {
    create?: XOR<WorkspaceCreateWithoutUsersInput, WorkspaceUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutUsersInput
    upsert?: WorkspaceUpsertWithoutUsersInput
    disconnect?: WorkspaceWhereInput | boolean
    delete?: WorkspaceWhereInput | boolean
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutUsersInput, WorkspaceUpdateWithoutUsersInput>, WorkspaceUncheckedUpdateWithoutUsersInput>
  }

  export type WorkspaceUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceUserCreateWithoutUserInput, WorkspaceUserUncheckedCreateWithoutUserInput> | WorkspaceUserCreateWithoutUserInput[] | WorkspaceUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutUserInput | WorkspaceUserCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceUserUpsertWithWhereUniqueWithoutUserInput | WorkspaceUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceUserCreateManyUserInputEnvelope
    set?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    disconnect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    delete?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    update?: WorkspaceUserUpdateWithWhereUniqueWithoutUserInput | WorkspaceUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceUserUpdateManyWithWhereWithoutUserInput | WorkspaceUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceUserScalarWhereInput | WorkspaceUserScalarWhereInput[]
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput> | BusinessRiskReportTaskCreateWithoutCreatedByInput[] | BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput | BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutCreatedByInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BusinessRiskReportTaskCreateManyCreatedByInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutCreatedByInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutCreatedByInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type ChatAgentTaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutUserInput, ChatAgentTaskUncheckedCreateWithoutUserInput> | ChatAgentTaskCreateWithoutUserInput[] | ChatAgentTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutUserInput | ChatAgentTaskCreateOrConnectWithoutUserInput[]
    upsert?: ChatAgentTaskUpsertWithWhereUniqueWithoutUserInput | ChatAgentTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatAgentTaskCreateManyUserInputEnvelope
    set?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    disconnect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    delete?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    update?: ChatAgentTaskUpdateWithWhereUniqueWithoutUserInput | ChatAgentTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatAgentTaskUpdateManyWithWhereWithoutUserInput | ChatAgentTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatedByInput | DocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatedByInput | DocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatedByInput | DocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<FolderCreateWithoutCreatedByInput, FolderUncheckedCreateWithoutCreatedByInput> | FolderCreateWithoutCreatedByInput[] | FolderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutCreatedByInput | FolderCreateOrConnectWithoutCreatedByInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutCreatedByInput | FolderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: FolderCreateManyCreatedByInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutCreatedByInput | FolderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutCreatedByInput | FolderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type WorkspaceUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceUserCreateWithoutUserInput, WorkspaceUserUncheckedCreateWithoutUserInput> | WorkspaceUserCreateWithoutUserInput[] | WorkspaceUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutUserInput | WorkspaceUserCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceUserUpsertWithWhereUniqueWithoutUserInput | WorkspaceUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceUserCreateManyUserInputEnvelope
    set?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    disconnect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    delete?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    update?: WorkspaceUserUpdateWithWhereUniqueWithoutUserInput | WorkspaceUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceUserUpdateManyWithWhereWithoutUserInput | WorkspaceUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceUserScalarWhereInput | WorkspaceUserScalarWhereInput[]
  }

  export type BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput> | BusinessRiskReportTaskCreateWithoutWorkspaceInput[] | BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput | BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput[]
    createMany?: BusinessRiskReportTaskCreateManyWorkspaceInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type ChatAgentTaskCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<ChatAgentTaskCreateWithoutWorkspaceInput, ChatAgentTaskUncheckedCreateWithoutWorkspaceInput> | ChatAgentTaskCreateWithoutWorkspaceInput[] | ChatAgentTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutWorkspaceInput | ChatAgentTaskCreateOrConnectWithoutWorkspaceInput[]
    createMany?: ChatAgentTaskCreateManyWorkspaceInputEnvelope
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<DocumentCreateWithoutWorkspaceInput, DocumentUncheckedCreateWithoutWorkspaceInput> | DocumentCreateWithoutWorkspaceInput[] | DocumentUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutWorkspaceInput | DocumentCreateOrConnectWithoutWorkspaceInput[]
    createMany?: DocumentCreateManyWorkspaceInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput> | DocumentAnalyserTaskCreateWithoutWorkspaceInput[] | DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput | DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput[]
    createMany?: DocumentAnalyserTaskCreateManyWorkspaceInputEnvelope
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
  }

  export type EntityCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<EntityCreateWithoutWorkspaceInput, EntityUncheckedCreateWithoutWorkspaceInput> | EntityCreateWithoutWorkspaceInput[] | EntityUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutWorkspaceInput | EntityCreateOrConnectWithoutWorkspaceInput[]
    createMany?: EntityCreateManyWorkspaceInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<InvitationCreateWithoutWorkspaceInput, InvitationUncheckedCreateWithoutWorkspaceInput> | InvitationCreateWithoutWorkspaceInput[] | InvitationUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutWorkspaceInput | InvitationCreateOrConnectWithoutWorkspaceInput[]
    createMany?: InvitationCreateManyWorkspaceInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutActiveWorkspaceInput = {
    create?: XOR<UserCreateWithoutActiveWorkspaceInput, UserUncheckedCreateWithoutActiveWorkspaceInput> | UserCreateWithoutActiveWorkspaceInput[] | UserUncheckedCreateWithoutActiveWorkspaceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutActiveWorkspaceInput | UserCreateOrConnectWithoutActiveWorkspaceInput[]
    createMany?: UserCreateManyActiveWorkspaceInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type WorkspaceUserCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceUserCreateWithoutWorkspaceInput, WorkspaceUserUncheckedCreateWithoutWorkspaceInput> | WorkspaceUserCreateWithoutWorkspaceInput[] | WorkspaceUserUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutWorkspaceInput | WorkspaceUserCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceUserCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput> | BusinessRiskReportTaskCreateWithoutWorkspaceInput[] | BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput | BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput[]
    createMany?: BusinessRiskReportTaskCreateManyWorkspaceInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<ChatAgentTaskCreateWithoutWorkspaceInput, ChatAgentTaskUncheckedCreateWithoutWorkspaceInput> | ChatAgentTaskCreateWithoutWorkspaceInput[] | ChatAgentTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutWorkspaceInput | ChatAgentTaskCreateOrConnectWithoutWorkspaceInput[]
    createMany?: ChatAgentTaskCreateManyWorkspaceInputEnvelope
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<DocumentCreateWithoutWorkspaceInput, DocumentUncheckedCreateWithoutWorkspaceInput> | DocumentCreateWithoutWorkspaceInput[] | DocumentUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutWorkspaceInput | DocumentCreateOrConnectWithoutWorkspaceInput[]
    createMany?: DocumentCreateManyWorkspaceInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput> | DocumentAnalyserTaskCreateWithoutWorkspaceInput[] | DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput | DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput[]
    createMany?: DocumentAnalyserTaskCreateManyWorkspaceInputEnvelope
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
  }

  export type EntityUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<EntityCreateWithoutWorkspaceInput, EntityUncheckedCreateWithoutWorkspaceInput> | EntityCreateWithoutWorkspaceInput[] | EntityUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutWorkspaceInput | EntityCreateOrConnectWithoutWorkspaceInput[]
    createMany?: EntityCreateManyWorkspaceInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<InvitationCreateWithoutWorkspaceInput, InvitationUncheckedCreateWithoutWorkspaceInput> | InvitationCreateWithoutWorkspaceInput[] | InvitationUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutWorkspaceInput | InvitationCreateOrConnectWithoutWorkspaceInput[]
    createMany?: InvitationCreateManyWorkspaceInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput = {
    create?: XOR<UserCreateWithoutActiveWorkspaceInput, UserUncheckedCreateWithoutActiveWorkspaceInput> | UserCreateWithoutActiveWorkspaceInput[] | UserUncheckedCreateWithoutActiveWorkspaceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutActiveWorkspaceInput | UserCreateOrConnectWithoutActiveWorkspaceInput[]
    createMany?: UserCreateManyActiveWorkspaceInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceUserCreateWithoutWorkspaceInput, WorkspaceUserUncheckedCreateWithoutWorkspaceInput> | WorkspaceUserCreateWithoutWorkspaceInput[] | WorkspaceUserUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutWorkspaceInput | WorkspaceUserCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceUserCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput> | BusinessRiskReportTaskCreateWithoutWorkspaceInput[] | BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput | BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutWorkspaceInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: BusinessRiskReportTaskCreateManyWorkspaceInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutWorkspaceInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutWorkspaceInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutWorkspaceInput, ChatAgentTaskUncheckedCreateWithoutWorkspaceInput> | ChatAgentTaskCreateWithoutWorkspaceInput[] | ChatAgentTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutWorkspaceInput | ChatAgentTaskCreateOrConnectWithoutWorkspaceInput[]
    upsert?: ChatAgentTaskUpsertWithWhereUniqueWithoutWorkspaceInput | ChatAgentTaskUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: ChatAgentTaskCreateManyWorkspaceInputEnvelope
    set?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    disconnect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    delete?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    update?: ChatAgentTaskUpdateWithWhereUniqueWithoutWorkspaceInput | ChatAgentTaskUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: ChatAgentTaskUpdateManyWithWhereWithoutWorkspaceInput | ChatAgentTaskUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<DocumentCreateWithoutWorkspaceInput, DocumentUncheckedCreateWithoutWorkspaceInput> | DocumentCreateWithoutWorkspaceInput[] | DocumentUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutWorkspaceInput | DocumentCreateOrConnectWithoutWorkspaceInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutWorkspaceInput | DocumentUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: DocumentCreateManyWorkspaceInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutWorkspaceInput | DocumentUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutWorkspaceInput | DocumentUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput> | DocumentAnalyserTaskCreateWithoutWorkspaceInput[] | DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput | DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput[]
    upsert?: DocumentAnalyserTaskUpsertWithWhereUniqueWithoutWorkspaceInput | DocumentAnalyserTaskUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: DocumentAnalyserTaskCreateManyWorkspaceInputEnvelope
    set?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    disconnect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    delete?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    update?: DocumentAnalyserTaskUpdateWithWhereUniqueWithoutWorkspaceInput | DocumentAnalyserTaskUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: DocumentAnalyserTaskUpdateManyWithWhereWithoutWorkspaceInput | DocumentAnalyserTaskUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: DocumentAnalyserTaskScalarWhereInput | DocumentAnalyserTaskScalarWhereInput[]
  }

  export type EntityUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<EntityCreateWithoutWorkspaceInput, EntityUncheckedCreateWithoutWorkspaceInput> | EntityCreateWithoutWorkspaceInput[] | EntityUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutWorkspaceInput | EntityCreateOrConnectWithoutWorkspaceInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutWorkspaceInput | EntityUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: EntityCreateManyWorkspaceInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutWorkspaceInput | EntityUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutWorkspaceInput | EntityUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<InvitationCreateWithoutWorkspaceInput, InvitationUncheckedCreateWithoutWorkspaceInput> | InvitationCreateWithoutWorkspaceInput[] | InvitationUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutWorkspaceInput | InvitationCreateOrConnectWithoutWorkspaceInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutWorkspaceInput | InvitationUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: InvitationCreateManyWorkspaceInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutWorkspaceInput | InvitationUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutWorkspaceInput | InvitationUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutWorkspaceInput | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutWorkspaceInput | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutWorkspaceInput | ProjectUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserUpdateManyWithoutActiveWorkspaceNestedInput = {
    create?: XOR<UserCreateWithoutActiveWorkspaceInput, UserUncheckedCreateWithoutActiveWorkspaceInput> | UserCreateWithoutActiveWorkspaceInput[] | UserUncheckedCreateWithoutActiveWorkspaceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutActiveWorkspaceInput | UserCreateOrConnectWithoutActiveWorkspaceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutActiveWorkspaceInput | UserUpsertWithWhereUniqueWithoutActiveWorkspaceInput[]
    createMany?: UserCreateManyActiveWorkspaceInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutActiveWorkspaceInput | UserUpdateWithWhereUniqueWithoutActiveWorkspaceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutActiveWorkspaceInput | UserUpdateManyWithWhereWithoutActiveWorkspaceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WorkspaceUserUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceUserCreateWithoutWorkspaceInput, WorkspaceUserUncheckedCreateWithoutWorkspaceInput> | WorkspaceUserCreateWithoutWorkspaceInput[] | WorkspaceUserUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutWorkspaceInput | WorkspaceUserCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceUserUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceUserUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceUserCreateManyWorkspaceInputEnvelope
    set?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    disconnect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    delete?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    update?: WorkspaceUserUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceUserUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceUserUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceUserUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceUserScalarWhereInput | WorkspaceUserScalarWhereInput[]
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput> | BusinessRiskReportTaskCreateWithoutWorkspaceInput[] | BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput | BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutWorkspaceInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: BusinessRiskReportTaskCreateManyWorkspaceInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutWorkspaceInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutWorkspaceInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutWorkspaceInput, ChatAgentTaskUncheckedCreateWithoutWorkspaceInput> | ChatAgentTaskCreateWithoutWorkspaceInput[] | ChatAgentTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutWorkspaceInput | ChatAgentTaskCreateOrConnectWithoutWorkspaceInput[]
    upsert?: ChatAgentTaskUpsertWithWhereUniqueWithoutWorkspaceInput | ChatAgentTaskUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: ChatAgentTaskCreateManyWorkspaceInputEnvelope
    set?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    disconnect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    delete?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    update?: ChatAgentTaskUpdateWithWhereUniqueWithoutWorkspaceInput | ChatAgentTaskUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: ChatAgentTaskUpdateManyWithWhereWithoutWorkspaceInput | ChatAgentTaskUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<DocumentCreateWithoutWorkspaceInput, DocumentUncheckedCreateWithoutWorkspaceInput> | DocumentCreateWithoutWorkspaceInput[] | DocumentUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutWorkspaceInput | DocumentCreateOrConnectWithoutWorkspaceInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutWorkspaceInput | DocumentUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: DocumentCreateManyWorkspaceInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutWorkspaceInput | DocumentUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutWorkspaceInput | DocumentUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput> | DocumentAnalyserTaskCreateWithoutWorkspaceInput[] | DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput | DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput[]
    upsert?: DocumentAnalyserTaskUpsertWithWhereUniqueWithoutWorkspaceInput | DocumentAnalyserTaskUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: DocumentAnalyserTaskCreateManyWorkspaceInputEnvelope
    set?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    disconnect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    delete?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    update?: DocumentAnalyserTaskUpdateWithWhereUniqueWithoutWorkspaceInput | DocumentAnalyserTaskUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: DocumentAnalyserTaskUpdateManyWithWhereWithoutWorkspaceInput | DocumentAnalyserTaskUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: DocumentAnalyserTaskScalarWhereInput | DocumentAnalyserTaskScalarWhereInput[]
  }

  export type EntityUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<EntityCreateWithoutWorkspaceInput, EntityUncheckedCreateWithoutWorkspaceInput> | EntityCreateWithoutWorkspaceInput[] | EntityUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutWorkspaceInput | EntityCreateOrConnectWithoutWorkspaceInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutWorkspaceInput | EntityUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: EntityCreateManyWorkspaceInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutWorkspaceInput | EntityUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutWorkspaceInput | EntityUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<InvitationCreateWithoutWorkspaceInput, InvitationUncheckedCreateWithoutWorkspaceInput> | InvitationCreateWithoutWorkspaceInput[] | InvitationUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutWorkspaceInput | InvitationCreateOrConnectWithoutWorkspaceInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutWorkspaceInput | InvitationUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: InvitationCreateManyWorkspaceInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutWorkspaceInput | InvitationUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutWorkspaceInput | InvitationUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput> | ProjectCreateWithoutWorkspaceInput[] | ProjectUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspaceInput | ProjectCreateOrConnectWithoutWorkspaceInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutWorkspaceInput | ProjectUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: ProjectCreateManyWorkspaceInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutWorkspaceInput | ProjectUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutWorkspaceInput | ProjectUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput = {
    create?: XOR<UserCreateWithoutActiveWorkspaceInput, UserUncheckedCreateWithoutActiveWorkspaceInput> | UserCreateWithoutActiveWorkspaceInput[] | UserUncheckedCreateWithoutActiveWorkspaceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutActiveWorkspaceInput | UserCreateOrConnectWithoutActiveWorkspaceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutActiveWorkspaceInput | UserUpsertWithWhereUniqueWithoutActiveWorkspaceInput[]
    createMany?: UserCreateManyActiveWorkspaceInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutActiveWorkspaceInput | UserUpdateWithWhereUniqueWithoutActiveWorkspaceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutActiveWorkspaceInput | UserUpdateManyWithWhereWithoutActiveWorkspaceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceUserCreateWithoutWorkspaceInput, WorkspaceUserUncheckedCreateWithoutWorkspaceInput> | WorkspaceUserCreateWithoutWorkspaceInput[] | WorkspaceUserUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceUserCreateOrConnectWithoutWorkspaceInput | WorkspaceUserCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceUserUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceUserUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceUserCreateManyWorkspaceInputEnvelope
    set?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    disconnect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    delete?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    connect?: WorkspaceUserWhereUniqueInput | WorkspaceUserWhereUniqueInput[]
    update?: WorkspaceUserUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceUserUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceUserUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceUserUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceUserScalarWhereInput | WorkspaceUserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWorkspaceUsersInput = {
    create?: XOR<UserCreateWithoutWorkspaceUsersInput, UserUncheckedCreateWithoutWorkspaceUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceUsersInput
    connect?: UserWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutWorkspaceUsersInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceUsersInput, WorkspaceUncheckedCreateWithoutWorkspaceUsersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceUsersInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type EnumWorkspaceRoleFieldUpdateOperationsInput = {
    set?: $Enums.WorkspaceRole
  }

  export type UserUpdateOneRequiredWithoutWorkspaceUsersNestedInput = {
    create?: XOR<UserCreateWithoutWorkspaceUsersInput, UserUncheckedCreateWithoutWorkspaceUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceUsersInput
    upsert?: UserUpsertWithoutWorkspaceUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkspaceUsersInput, UserUpdateWithoutWorkspaceUsersInput>, UserUncheckedUpdateWithoutWorkspaceUsersInput>
  }

  export type WorkspaceUpdateOneRequiredWithoutWorkspaceUsersNestedInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceUsersInput, WorkspaceUncheckedCreateWithoutWorkspaceUsersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceUsersInput
    upsert?: WorkspaceUpsertWithoutWorkspaceUsersInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutWorkspaceUsersInput, WorkspaceUpdateWithoutWorkspaceUsersInput>, WorkspaceUncheckedUpdateWithoutWorkspaceUsersInput>
  }

  export type WorkspaceCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<WorkspaceCreateWithoutInvitationsInput, WorkspaceUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutInvitationsInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type WorkspaceUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<WorkspaceCreateWithoutInvitationsInput, WorkspaceUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutInvitationsInput
    upsert?: WorkspaceUpsertWithoutInvitationsInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutInvitationsInput, WorkspaceUpdateWithoutInvitationsInput>, WorkspaceUncheckedUpdateWithoutInvitationsInput>
  }

  export type BusinessRiskReportTaskCreatenextStepsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutBusinessRiskReportTasksInput = {
    create?: XOR<UserCreateWithoutBusinessRiskReportTasksInput, UserUncheckedCreateWithoutBusinessRiskReportTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessRiskReportTasksInput
    connect?: UserWhereUniqueInput
  }

  export type EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput = {
    create?: XOR<EntityCreateWithoutMainBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutMainBusinessRiskReportTasksInput>
    connectOrCreate?: EntityCreateOrConnectWithoutMainBusinessRiskReportTasksInput
    connect?: EntityWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput = {
    create?: XOR<ProjectCreateWithoutBusinessRiskReportTasksInput, ProjectUncheckedCreateWithoutBusinessRiskReportTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutBusinessRiskReportTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput = {
    create?: XOR<WorkspaceCreateWithoutBusinessRiskReportTasksInput, WorkspaceUncheckedCreateWithoutBusinessRiskReportTasksInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutBusinessRiskReportTasksInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput = {
    create?: XOR<ObservationCreateWithoutBusinessRiskReportTaskInput, ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput> | ObservationCreateWithoutBusinessRiskReportTaskInput[] | ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput | ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    createMany?: ObservationCreateManyBusinessRiskReportTaskInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput = {
    create?: XOR<ReferenceCreateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput> | ReferenceCreateWithoutBusinessRiskReportTaskInput[] | ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput | ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    createMany?: ReferenceCreateManyBusinessRiskReportTaskInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput = {
    create?: XOR<EntityCreateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput> | EntityCreateWithoutRelatedBusinessRiskReportTasksInput[] | EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput | EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput = {
    create?: XOR<ObservationCreateWithoutBusinessRiskReportTaskInput, ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput> | ObservationCreateWithoutBusinessRiskReportTaskInput[] | ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput | ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    createMany?: ObservationCreateManyBusinessRiskReportTaskInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput = {
    create?: XOR<ReferenceCreateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput> | ReferenceCreateWithoutBusinessRiskReportTaskInput[] | ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput | ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    createMany?: ReferenceCreateManyBusinessRiskReportTaskInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput = {
    create?: XOR<EntityCreateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput> | EntityCreateWithoutRelatedBusinessRiskReportTasksInput[] | EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput | EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUpdatenextStepsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.BusinessRiskReportTaskStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput = {
    create?: XOR<UserCreateWithoutBusinessRiskReportTasksInput, UserUncheckedCreateWithoutBusinessRiskReportTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessRiskReportTasksInput
    upsert?: UserUpsertWithoutBusinessRiskReportTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBusinessRiskReportTasksInput, UserUpdateWithoutBusinessRiskReportTasksInput>, UserUncheckedUpdateWithoutBusinessRiskReportTasksInput>
  }

  export type EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput = {
    create?: XOR<EntityCreateWithoutMainBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutMainBusinessRiskReportTasksInput>
    connectOrCreate?: EntityCreateOrConnectWithoutMainBusinessRiskReportTasksInput
    upsert?: EntityUpsertWithoutMainBusinessRiskReportTasksInput
    disconnect?: EntityWhereInput | boolean
    delete?: EntityWhereInput | boolean
    connect?: EntityWhereUniqueInput
    update?: XOR<XOR<EntityUpdateToOneWithWhereWithoutMainBusinessRiskReportTasksInput, EntityUpdateWithoutMainBusinessRiskReportTasksInput>, EntityUncheckedUpdateWithoutMainBusinessRiskReportTasksInput>
  }

  export type ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutBusinessRiskReportTasksInput, ProjectUncheckedCreateWithoutBusinessRiskReportTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutBusinessRiskReportTasksInput
    upsert?: ProjectUpsertWithoutBusinessRiskReportTasksInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutBusinessRiskReportTasksInput, ProjectUpdateWithoutBusinessRiskReportTasksInput>, ProjectUncheckedUpdateWithoutBusinessRiskReportTasksInput>
  }

  export type WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput = {
    create?: XOR<WorkspaceCreateWithoutBusinessRiskReportTasksInput, WorkspaceUncheckedCreateWithoutBusinessRiskReportTasksInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutBusinessRiskReportTasksInput
    upsert?: WorkspaceUpsertWithoutBusinessRiskReportTasksInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutBusinessRiskReportTasksInput, WorkspaceUpdateWithoutBusinessRiskReportTasksInput>, WorkspaceUncheckedUpdateWithoutBusinessRiskReportTasksInput>
  }

  export type ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput = {
    create?: XOR<ObservationCreateWithoutBusinessRiskReportTaskInput, ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput> | ObservationCreateWithoutBusinessRiskReportTaskInput[] | ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput | ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput | ObservationUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    createMany?: ObservationCreateManyBusinessRiskReportTaskInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput | ObservationUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutBusinessRiskReportTaskInput | ObservationUpdateManyWithWhereWithoutBusinessRiskReportTaskInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput = {
    create?: XOR<ReferenceCreateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput> | ReferenceCreateWithoutBusinessRiskReportTaskInput[] | ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput | ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput | ReferenceUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    createMany?: ReferenceCreateManyBusinessRiskReportTaskInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput | ReferenceUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutBusinessRiskReportTaskInput | ReferenceUpdateManyWithWhereWithoutBusinessRiskReportTaskInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput = {
    create?: XOR<EntityCreateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput> | EntityCreateWithoutRelatedBusinessRiskReportTasksInput[] | EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput | EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput | EntityUpsertWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput[]
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput | EntityUpdateWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutRelatedBusinessRiskReportTasksInput | EntityUpdateManyWithWhereWithoutRelatedBusinessRiskReportTasksInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput = {
    create?: XOR<ObservationCreateWithoutBusinessRiskReportTaskInput, ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput> | ObservationCreateWithoutBusinessRiskReportTaskInput[] | ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput | ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput | ObservationUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    createMany?: ObservationCreateManyBusinessRiskReportTaskInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput | ObservationUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutBusinessRiskReportTaskInput | ObservationUpdateManyWithWhereWithoutBusinessRiskReportTaskInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput = {
    create?: XOR<ReferenceCreateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput> | ReferenceCreateWithoutBusinessRiskReportTaskInput[] | ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput | ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput | ReferenceUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    createMany?: ReferenceCreateManyBusinessRiskReportTaskInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput | ReferenceUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutBusinessRiskReportTaskInput | ReferenceUpdateManyWithWhereWithoutBusinessRiskReportTaskInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput = {
    create?: XOR<EntityCreateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput> | EntityCreateWithoutRelatedBusinessRiskReportTasksInput[] | EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput | EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput | EntityUpsertWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput[]
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput | EntityUpdateWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutRelatedBusinessRiskReportTasksInput | EntityUpdateManyWithWhereWithoutRelatedBusinessRiskReportTasksInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type EntityCreatesocialLinksInput = {
    set: string[]
  }

  export type BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput> | BusinessRiskReportTaskCreateWithoutMainEntityInput[] | BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput | BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput[]
    createMany?: BusinessRiskReportTaskCreateManyMainEntityInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutEntitiesInput, DocumentAnalyserTaskUncheckedCreateWithoutEntitiesInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutEntitiesInput
    connect?: DocumentAnalyserTaskWhereUniqueInput
  }

  export type DocumentCreateNestedOneWithoutEntityInput = {
    create?: XOR<DocumentCreateWithoutEntityInput, DocumentUncheckedCreateWithoutEntityInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutEntityInput
    connect?: DocumentWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutEntitiesInput = {
    create?: XOR<ProjectCreateWithoutEntitiesInput, ProjectUncheckedCreateWithoutEntitiesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutEntitiesInput
    connect?: ProjectWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutEntitiesInput = {
    create?: XOR<WorkspaceCreateWithoutEntitiesInput, WorkspaceUncheckedCreateWithoutEntitiesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutEntitiesInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutEntitiesInput = {
    create?: XOR<DocumentCreateWithoutEntitiesInput, DocumentUncheckedCreateWithoutEntitiesInput> | DocumentCreateWithoutEntitiesInput[] | DocumentUncheckedCreateWithoutEntitiesInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutEntitiesInput | DocumentCreateOrConnectWithoutEntitiesInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput> | BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput[] | BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput | BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput> | BusinessRiskReportTaskCreateWithoutMainEntityInput[] | BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput | BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput[]
    createMany?: BusinessRiskReportTaskCreateManyMainEntityInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutEntitiesInput = {
    create?: XOR<DocumentCreateWithoutEntitiesInput, DocumentUncheckedCreateWithoutEntitiesInput> | DocumentCreateWithoutEntitiesInput[] | DocumentUncheckedCreateWithoutEntitiesInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutEntitiesInput | DocumentCreateOrConnectWithoutEntitiesInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput> | BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput[] | BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput | BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type EnumEntityTypeFieldUpdateOperationsInput = {
    set?: $Enums.EntityType
  }

  export type EntityUpdatesocialLinksInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput> | BusinessRiskReportTaskCreateWithoutMainEntityInput[] | BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput | BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutMainEntityInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutMainEntityInput[]
    createMany?: BusinessRiskReportTaskCreateManyMainEntityInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutMainEntityInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutMainEntityInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutMainEntityInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutMainEntityInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutEntitiesInput, DocumentAnalyserTaskUncheckedCreateWithoutEntitiesInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutEntitiesInput
    upsert?: DocumentAnalyserTaskUpsertWithoutEntitiesInput
    disconnect?: DocumentAnalyserTaskWhereInput | boolean
    delete?: DocumentAnalyserTaskWhereInput | boolean
    connect?: DocumentAnalyserTaskWhereUniqueInput
    update?: XOR<XOR<DocumentAnalyserTaskUpdateToOneWithWhereWithoutEntitiesInput, DocumentAnalyserTaskUpdateWithoutEntitiesInput>, DocumentAnalyserTaskUncheckedUpdateWithoutEntitiesInput>
  }

  export type DocumentUpdateOneWithoutEntityNestedInput = {
    create?: XOR<DocumentCreateWithoutEntityInput, DocumentUncheckedCreateWithoutEntityInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutEntityInput
    upsert?: DocumentUpsertWithoutEntityInput
    disconnect?: DocumentWhereInput | boolean
    delete?: DocumentWhereInput | boolean
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutEntityInput, DocumentUpdateWithoutEntityInput>, DocumentUncheckedUpdateWithoutEntityInput>
  }

  export type ProjectUpdateOneWithoutEntitiesNestedInput = {
    create?: XOR<ProjectCreateWithoutEntitiesInput, ProjectUncheckedCreateWithoutEntitiesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutEntitiesInput
    upsert?: ProjectUpsertWithoutEntitiesInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutEntitiesInput, ProjectUpdateWithoutEntitiesInput>, ProjectUncheckedUpdateWithoutEntitiesInput>
  }

  export type WorkspaceUpdateOneWithoutEntitiesNestedInput = {
    create?: XOR<WorkspaceCreateWithoutEntitiesInput, WorkspaceUncheckedCreateWithoutEntitiesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutEntitiesInput
    upsert?: WorkspaceUpsertWithoutEntitiesInput
    disconnect?: WorkspaceWhereInput | boolean
    delete?: WorkspaceWhereInput | boolean
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutEntitiesInput, WorkspaceUpdateWithoutEntitiesInput>, WorkspaceUncheckedUpdateWithoutEntitiesInput>
  }

  export type DocumentUpdateManyWithoutEntitiesNestedInput = {
    create?: XOR<DocumentCreateWithoutEntitiesInput, DocumentUncheckedCreateWithoutEntitiesInput> | DocumentCreateWithoutEntitiesInput[] | DocumentUncheckedCreateWithoutEntitiesInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutEntitiesInput | DocumentCreateOrConnectWithoutEntitiesInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutEntitiesInput | DocumentUpsertWithWhereUniqueWithoutEntitiesInput[]
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutEntitiesInput | DocumentUpdateWithWhereUniqueWithoutEntitiesInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutEntitiesInput | DocumentUpdateManyWithWhereWithoutEntitiesInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput> | BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput[] | BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput | BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutRelatedEntitiesInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutRelatedEntitiesInput[]
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutRelatedEntitiesInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutRelatedEntitiesInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutRelatedEntitiesInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutRelatedEntitiesInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput> | BusinessRiskReportTaskCreateWithoutMainEntityInput[] | BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput | BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutMainEntityInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutMainEntityInput[]
    createMany?: BusinessRiskReportTaskCreateManyMainEntityInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutMainEntityInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutMainEntityInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutMainEntityInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutMainEntityInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutEntitiesNestedInput = {
    create?: XOR<DocumentCreateWithoutEntitiesInput, DocumentUncheckedCreateWithoutEntitiesInput> | DocumentCreateWithoutEntitiesInput[] | DocumentUncheckedCreateWithoutEntitiesInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutEntitiesInput | DocumentCreateOrConnectWithoutEntitiesInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutEntitiesInput | DocumentUpsertWithWhereUniqueWithoutEntitiesInput[]
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutEntitiesInput | DocumentUpdateWithWhereUniqueWithoutEntitiesInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutEntitiesInput | DocumentUpdateManyWithWhereWithoutEntitiesInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput> | BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput[] | BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput | BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutRelatedEntitiesInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutRelatedEntitiesInput[]
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutRelatedEntitiesInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutRelatedEntitiesInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutRelatedEntitiesInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutRelatedEntitiesInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type BusinessRiskReportTaskCreateNestedOneWithoutObservationsInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutObservationsInput, BusinessRiskReportTaskUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutObservationsInput
    connect?: BusinessRiskReportTaskWhereUniqueInput
  }

  export type DocumentAnalyserTaskCreateNestedOneWithoutObservationsInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutObservationsInput, DocumentAnalyserTaskUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutObservationsInput
    connect?: DocumentAnalyserTaskWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutObservationsInput = {
    create?: XOR<ProjectCreateWithoutObservationsInput, ProjectUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutObservationsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ReferenceCreateNestedManyWithoutObservationInput = {
    create?: XOR<ReferenceCreateWithoutObservationInput, ReferenceUncheckedCreateWithoutObservationInput> | ReferenceCreateWithoutObservationInput[] | ReferenceUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutObservationInput | ReferenceCreateOrConnectWithoutObservationInput[]
    createMany?: ReferenceCreateManyObservationInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type ReferenceUncheckedCreateNestedManyWithoutObservationInput = {
    create?: XOR<ReferenceCreateWithoutObservationInput, ReferenceUncheckedCreateWithoutObservationInput> | ReferenceCreateWithoutObservationInput[] | ReferenceUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutObservationInput | ReferenceCreateOrConnectWithoutObservationInput[]
    createMany?: ReferenceCreateManyObservationInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUpdateOneWithoutObservationsNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutObservationsInput, BusinessRiskReportTaskUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutObservationsInput
    upsert?: BusinessRiskReportTaskUpsertWithoutObservationsInput
    disconnect?: BusinessRiskReportTaskWhereInput | boolean
    delete?: BusinessRiskReportTaskWhereInput | boolean
    connect?: BusinessRiskReportTaskWhereUniqueInput
    update?: XOR<XOR<BusinessRiskReportTaskUpdateToOneWithWhereWithoutObservationsInput, BusinessRiskReportTaskUpdateWithoutObservationsInput>, BusinessRiskReportTaskUncheckedUpdateWithoutObservationsInput>
  }

  export type DocumentAnalyserTaskUpdateOneWithoutObservationsNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutObservationsInput, DocumentAnalyserTaskUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutObservationsInput
    upsert?: DocumentAnalyserTaskUpsertWithoutObservationsInput
    disconnect?: DocumentAnalyserTaskWhereInput | boolean
    delete?: DocumentAnalyserTaskWhereInput | boolean
    connect?: DocumentAnalyserTaskWhereUniqueInput
    update?: XOR<XOR<DocumentAnalyserTaskUpdateToOneWithWhereWithoutObservationsInput, DocumentAnalyserTaskUpdateWithoutObservationsInput>, DocumentAnalyserTaskUncheckedUpdateWithoutObservationsInput>
  }

  export type ProjectUpdateOneWithoutObservationsNestedInput = {
    create?: XOR<ProjectCreateWithoutObservationsInput, ProjectUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutObservationsInput
    upsert?: ProjectUpsertWithoutObservationsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutObservationsInput, ProjectUpdateWithoutObservationsInput>, ProjectUncheckedUpdateWithoutObservationsInput>
  }

  export type ReferenceUpdateManyWithoutObservationNestedInput = {
    create?: XOR<ReferenceCreateWithoutObservationInput, ReferenceUncheckedCreateWithoutObservationInput> | ReferenceCreateWithoutObservationInput[] | ReferenceUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutObservationInput | ReferenceCreateOrConnectWithoutObservationInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutObservationInput | ReferenceUpsertWithWhereUniqueWithoutObservationInput[]
    createMany?: ReferenceCreateManyObservationInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutObservationInput | ReferenceUpdateWithWhereUniqueWithoutObservationInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutObservationInput | ReferenceUpdateManyWithWhereWithoutObservationInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type ReferenceUncheckedUpdateManyWithoutObservationNestedInput = {
    create?: XOR<ReferenceCreateWithoutObservationInput, ReferenceUncheckedCreateWithoutObservationInput> | ReferenceCreateWithoutObservationInput[] | ReferenceUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutObservationInput | ReferenceCreateOrConnectWithoutObservationInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutObservationInput | ReferenceUpsertWithWhereUniqueWithoutObservationInput[]
    createMany?: ReferenceCreateManyObservationInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutObservationInput | ReferenceUpdateWithWhereUniqueWithoutObservationInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutObservationInput | ReferenceUpdateManyWithWhereWithoutObservationInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type DocumentAnalyserTaskCreateNestedOneWithoutReferencesInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutReferencesInput, DocumentAnalyserTaskUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutReferencesInput
    connect?: DocumentAnalyserTaskWhereUniqueInput
  }

  export type BusinessRiskReportTaskCreateNestedOneWithoutReferencesInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutReferencesInput, BusinessRiskReportTaskUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutReferencesInput
    connect?: BusinessRiskReportTaskWhereUniqueInput
  }

  export type ObservationCreateNestedOneWithoutReferencesInput = {
    create?: XOR<ObservationCreateWithoutReferencesInput, ObservationUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: ObservationCreateOrConnectWithoutReferencesInput
    connect?: ObservationWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutReferencesInput = {
    create?: XOR<ProjectCreateWithoutReferencesInput, ProjectUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReferencesInput
    connect?: ProjectWhereUniqueInput
  }

  export type DocumentAnalyserTaskUpdateOneWithoutReferencesNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutReferencesInput, DocumentAnalyserTaskUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutReferencesInput
    upsert?: DocumentAnalyserTaskUpsertWithoutReferencesInput
    disconnect?: DocumentAnalyserTaskWhereInput | boolean
    delete?: DocumentAnalyserTaskWhereInput | boolean
    connect?: DocumentAnalyserTaskWhereUniqueInput
    update?: XOR<XOR<DocumentAnalyserTaskUpdateToOneWithWhereWithoutReferencesInput, DocumentAnalyserTaskUpdateWithoutReferencesInput>, DocumentAnalyserTaskUncheckedUpdateWithoutReferencesInput>
  }

  export type BusinessRiskReportTaskUpdateOneWithoutReferencesNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutReferencesInput, BusinessRiskReportTaskUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutReferencesInput
    upsert?: BusinessRiskReportTaskUpsertWithoutReferencesInput
    disconnect?: BusinessRiskReportTaskWhereInput | boolean
    delete?: BusinessRiskReportTaskWhereInput | boolean
    connect?: BusinessRiskReportTaskWhereUniqueInput
    update?: XOR<XOR<BusinessRiskReportTaskUpdateToOneWithWhereWithoutReferencesInput, BusinessRiskReportTaskUpdateWithoutReferencesInput>, BusinessRiskReportTaskUncheckedUpdateWithoutReferencesInput>
  }

  export type ObservationUpdateOneWithoutReferencesNestedInput = {
    create?: XOR<ObservationCreateWithoutReferencesInput, ObservationUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: ObservationCreateOrConnectWithoutReferencesInput
    upsert?: ObservationUpsertWithoutReferencesInput
    disconnect?: ObservationWhereInput | boolean
    delete?: ObservationWhereInput | boolean
    connect?: ObservationWhereUniqueInput
    update?: XOR<XOR<ObservationUpdateToOneWithWhereWithoutReferencesInput, ObservationUpdateWithoutReferencesInput>, ObservationUncheckedUpdateWithoutReferencesInput>
  }

  export type ProjectUpdateOneWithoutReferencesNestedInput = {
    create?: XOR<ProjectCreateWithoutReferencesInput, ProjectUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReferencesInput
    upsert?: ProjectUpsertWithoutReferencesInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutReferencesInput, ProjectUpdateWithoutReferencesInput>, ProjectUncheckedUpdateWithoutReferencesInput>
  }

  export type ProjectCreatepotentialFraudTypesInput = {
    set: string[]
  }

  export type BusinessRiskReportTaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutProjectInput, BusinessRiskReportTaskUncheckedCreateWithoutProjectInput> | BusinessRiskReportTaskCreateWithoutProjectInput[] | BusinessRiskReportTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutProjectInput | BusinessRiskReportTaskCreateOrConnectWithoutProjectInput[]
    createMany?: BusinessRiskReportTaskCreateManyProjectInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type ChatAgentTaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<ChatAgentTaskCreateWithoutProjectInput, ChatAgentTaskUncheckedCreateWithoutProjectInput> | ChatAgentTaskCreateWithoutProjectInput[] | ChatAgentTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutProjectInput | ChatAgentTaskCreateOrConnectWithoutProjectInput[]
    createMany?: ChatAgentTaskCreateManyProjectInputEnvelope
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentAnalyserTaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutProjectInput, DocumentAnalyserTaskUncheckedCreateWithoutProjectInput> | DocumentAnalyserTaskCreateWithoutProjectInput[] | DocumentAnalyserTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutProjectInput | DocumentAnalyserTaskCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentAnalyserTaskCreateManyProjectInputEnvelope
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
  }

  export type EntityCreateNestedManyWithoutProjectInput = {
    create?: XOR<EntityCreateWithoutProjectInput, EntityUncheckedCreateWithoutProjectInput> | EntityCreateWithoutProjectInput[] | EntityUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutProjectInput | EntityCreateOrConnectWithoutProjectInput[]
    createMany?: EntityCreateManyProjectInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type FolderCreateNestedManyWithoutProjectInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type ObservationCreateNestedManyWithoutProjectInput = {
    create?: XOR<ObservationCreateWithoutProjectInput, ObservationUncheckedCreateWithoutProjectInput> | ObservationCreateWithoutProjectInput[] | ObservationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutProjectInput | ObservationCreateOrConnectWithoutProjectInput[]
    createMany?: ObservationCreateManyProjectInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type WorkspaceCreateNestedOneWithoutProjectsInput = {
    create?: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectsInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type ReferenceCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReferenceCreateWithoutProjectInput, ReferenceUncheckedCreateWithoutProjectInput> | ReferenceCreateWithoutProjectInput[] | ReferenceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutProjectInput | ReferenceCreateOrConnectWithoutProjectInput[]
    createMany?: ReferenceCreateManyProjectInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutProjectInput, BusinessRiskReportTaskUncheckedCreateWithoutProjectInput> | BusinessRiskReportTaskCreateWithoutProjectInput[] | BusinessRiskReportTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutProjectInput | BusinessRiskReportTaskCreateOrConnectWithoutProjectInput[]
    createMany?: BusinessRiskReportTaskCreateManyProjectInputEnvelope
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
  }

  export type ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ChatAgentTaskCreateWithoutProjectInput, ChatAgentTaskUncheckedCreateWithoutProjectInput> | ChatAgentTaskCreateWithoutProjectInput[] | ChatAgentTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutProjectInput | ChatAgentTaskCreateOrConnectWithoutProjectInput[]
    createMany?: ChatAgentTaskCreateManyProjectInputEnvelope
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutProjectInput, DocumentAnalyserTaskUncheckedCreateWithoutProjectInput> | DocumentAnalyserTaskCreateWithoutProjectInput[] | DocumentAnalyserTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutProjectInput | DocumentAnalyserTaskCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentAnalyserTaskCreateManyProjectInputEnvelope
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
  }

  export type EntityUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<EntityCreateWithoutProjectInput, EntityUncheckedCreateWithoutProjectInput> | EntityCreateWithoutProjectInput[] | EntityUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutProjectInput | EntityCreateOrConnectWithoutProjectInput[]
    createMany?: EntityCreateManyProjectInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type ObservationUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ObservationCreateWithoutProjectInput, ObservationUncheckedCreateWithoutProjectInput> | ObservationCreateWithoutProjectInput[] | ObservationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutProjectInput | ObservationCreateOrConnectWithoutProjectInput[]
    createMany?: ObservationCreateManyProjectInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type ReferenceUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReferenceCreateWithoutProjectInput, ReferenceUncheckedCreateWithoutProjectInput> | ReferenceCreateWithoutProjectInput[] | ReferenceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutProjectInput | ReferenceCreateOrConnectWithoutProjectInput[]
    createMany?: ReferenceCreateManyProjectInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProjectUpdatepotentialFraudTypesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus
  }

  export type BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutProjectInput, BusinessRiskReportTaskUncheckedCreateWithoutProjectInput> | BusinessRiskReportTaskCreateWithoutProjectInput[] | BusinessRiskReportTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutProjectInput | BusinessRiskReportTaskCreateOrConnectWithoutProjectInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutProjectInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: BusinessRiskReportTaskCreateManyProjectInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutProjectInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutProjectInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type ChatAgentTaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutProjectInput, ChatAgentTaskUncheckedCreateWithoutProjectInput> | ChatAgentTaskCreateWithoutProjectInput[] | ChatAgentTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutProjectInput | ChatAgentTaskCreateOrConnectWithoutProjectInput[]
    upsert?: ChatAgentTaskUpsertWithWhereUniqueWithoutProjectInput | ChatAgentTaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ChatAgentTaskCreateManyProjectInputEnvelope
    set?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    disconnect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    delete?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    update?: ChatAgentTaskUpdateWithWhereUniqueWithoutProjectInput | ChatAgentTaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ChatAgentTaskUpdateManyWithWhereWithoutProjectInput | ChatAgentTaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutProjectInput | DocumentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutProjectInput | DocumentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutProjectInput | DocumentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutProjectInput, DocumentAnalyserTaskUncheckedCreateWithoutProjectInput> | DocumentAnalyserTaskCreateWithoutProjectInput[] | DocumentAnalyserTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutProjectInput | DocumentAnalyserTaskCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentAnalyserTaskUpsertWithWhereUniqueWithoutProjectInput | DocumentAnalyserTaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentAnalyserTaskCreateManyProjectInputEnvelope
    set?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    disconnect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    delete?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    update?: DocumentAnalyserTaskUpdateWithWhereUniqueWithoutProjectInput | DocumentAnalyserTaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentAnalyserTaskUpdateManyWithWhereWithoutProjectInput | DocumentAnalyserTaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentAnalyserTaskScalarWhereInput | DocumentAnalyserTaskScalarWhereInput[]
  }

  export type EntityUpdateManyWithoutProjectNestedInput = {
    create?: XOR<EntityCreateWithoutProjectInput, EntityUncheckedCreateWithoutProjectInput> | EntityCreateWithoutProjectInput[] | EntityUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutProjectInput | EntityCreateOrConnectWithoutProjectInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutProjectInput | EntityUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: EntityCreateManyProjectInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutProjectInput | EntityUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutProjectInput | EntityUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type FolderUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutProjectInput | FolderUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutProjectInput | FolderUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutProjectInput | FolderUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type ObservationUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ObservationCreateWithoutProjectInput, ObservationUncheckedCreateWithoutProjectInput> | ObservationCreateWithoutProjectInput[] | ObservationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutProjectInput | ObservationCreateOrConnectWithoutProjectInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutProjectInput | ObservationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ObservationCreateManyProjectInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutProjectInput | ObservationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutProjectInput | ObservationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type WorkspaceUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectsInput
    upsert?: WorkspaceUpsertWithoutProjectsInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutProjectsInput, WorkspaceUpdateWithoutProjectsInput>, WorkspaceUncheckedUpdateWithoutProjectsInput>
  }

  export type ReferenceUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReferenceCreateWithoutProjectInput, ReferenceUncheckedCreateWithoutProjectInput> | ReferenceCreateWithoutProjectInput[] | ReferenceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutProjectInput | ReferenceCreateOrConnectWithoutProjectInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutProjectInput | ReferenceUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReferenceCreateManyProjectInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutProjectInput | ReferenceUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutProjectInput | ReferenceUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<BusinessRiskReportTaskCreateWithoutProjectInput, BusinessRiskReportTaskUncheckedCreateWithoutProjectInput> | BusinessRiskReportTaskCreateWithoutProjectInput[] | BusinessRiskReportTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BusinessRiskReportTaskCreateOrConnectWithoutProjectInput | BusinessRiskReportTaskCreateOrConnectWithoutProjectInput[]
    upsert?: BusinessRiskReportTaskUpsertWithWhereUniqueWithoutProjectInput | BusinessRiskReportTaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: BusinessRiskReportTaskCreateManyProjectInputEnvelope
    set?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    disconnect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    delete?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    connect?: BusinessRiskReportTaskWhereUniqueInput | BusinessRiskReportTaskWhereUniqueInput[]
    update?: BusinessRiskReportTaskUpdateWithWhereUniqueWithoutProjectInput | BusinessRiskReportTaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: BusinessRiskReportTaskUpdateManyWithWhereWithoutProjectInput | BusinessRiskReportTaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
  }

  export type ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutProjectInput, ChatAgentTaskUncheckedCreateWithoutProjectInput> | ChatAgentTaskCreateWithoutProjectInput[] | ChatAgentTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutProjectInput | ChatAgentTaskCreateOrConnectWithoutProjectInput[]
    upsert?: ChatAgentTaskUpsertWithWhereUniqueWithoutProjectInput | ChatAgentTaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ChatAgentTaskCreateManyProjectInputEnvelope
    set?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    disconnect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    delete?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    connect?: ChatAgentTaskWhereUniqueInput | ChatAgentTaskWhereUniqueInput[]
    update?: ChatAgentTaskUpdateWithWhereUniqueWithoutProjectInput | ChatAgentTaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ChatAgentTaskUpdateManyWithWhereWithoutProjectInput | ChatAgentTaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput> | DocumentCreateWithoutProjectInput[] | DocumentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProjectInput | DocumentCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutProjectInput | DocumentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentCreateManyProjectInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutProjectInput | DocumentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutProjectInput | DocumentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutProjectInput, DocumentAnalyserTaskUncheckedCreateWithoutProjectInput> | DocumentAnalyserTaskCreateWithoutProjectInput[] | DocumentAnalyserTaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutProjectInput | DocumentAnalyserTaskCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentAnalyserTaskUpsertWithWhereUniqueWithoutProjectInput | DocumentAnalyserTaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentAnalyserTaskCreateManyProjectInputEnvelope
    set?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    disconnect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    delete?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    connect?: DocumentAnalyserTaskWhereUniqueInput | DocumentAnalyserTaskWhereUniqueInput[]
    update?: DocumentAnalyserTaskUpdateWithWhereUniqueWithoutProjectInput | DocumentAnalyserTaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentAnalyserTaskUpdateManyWithWhereWithoutProjectInput | DocumentAnalyserTaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentAnalyserTaskScalarWhereInput | DocumentAnalyserTaskScalarWhereInput[]
  }

  export type EntityUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<EntityCreateWithoutProjectInput, EntityUncheckedCreateWithoutProjectInput> | EntityCreateWithoutProjectInput[] | EntityUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutProjectInput | EntityCreateOrConnectWithoutProjectInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutProjectInput | EntityUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: EntityCreateManyProjectInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutProjectInput | EntityUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutProjectInput | EntityUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutProjectInput | FolderUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutProjectInput | FolderUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutProjectInput | FolderUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type ObservationUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ObservationCreateWithoutProjectInput, ObservationUncheckedCreateWithoutProjectInput> | ObservationCreateWithoutProjectInput[] | ObservationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutProjectInput | ObservationCreateOrConnectWithoutProjectInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutProjectInput | ObservationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ObservationCreateManyProjectInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutProjectInput | ObservationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutProjectInput | ObservationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type ReferenceUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReferenceCreateWithoutProjectInput, ReferenceUncheckedCreateWithoutProjectInput> | ReferenceCreateWithoutProjectInput[] | ReferenceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutProjectInput | ReferenceCreateOrConnectWithoutProjectInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutProjectInput | ReferenceUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReferenceCreateManyProjectInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutProjectInput | ReferenceUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutProjectInput | ReferenceUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput = {
    create?: XOR<ChatAgentTaskCreateWithoutContextDocumentsInput, ChatAgentTaskUncheckedCreateWithoutContextDocumentsInput>
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutContextDocumentsInput
    connect?: ChatAgentTaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDocumentInput = {
    create?: XOR<UserCreateWithoutDocumentInput, UserUncheckedCreateWithoutDocumentInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutInputDocumentsInput, DocumentAnalyserTaskUncheckedCreateWithoutInputDocumentsInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutInputDocumentsInput
    connect?: DocumentAnalyserTaskWhereUniqueInput
  }

  export type FolderCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<FolderCreateWithoutDocumentsInput, FolderUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: FolderCreateOrConnectWithoutDocumentsInput
    connect?: FolderWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<WorkspaceCreateWithoutDocumentsInput, WorkspaceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutDocumentsInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type DocumentPageCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentPageCreateWithoutDocumentInput, DocumentPageUncheckedCreateWithoutDocumentInput> | DocumentPageCreateWithoutDocumentInput[] | DocumentPageUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPageCreateOrConnectWithoutDocumentInput | DocumentPageCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentPageCreateManyDocumentInputEnvelope
    connect?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
  }

  export type EntityCreateNestedManyWithoutDocumentInput = {
    create?: XOR<EntityCreateWithoutDocumentInput, EntityUncheckedCreateWithoutDocumentInput> | EntityCreateWithoutDocumentInput[] | EntityUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentInput | EntityCreateOrConnectWithoutDocumentInput[]
    createMany?: EntityCreateManyDocumentInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type EntityCreateNestedManyWithoutDocumentsInput = {
    create?: XOR<EntityCreateWithoutDocumentsInput, EntityUncheckedCreateWithoutDocumentsInput> | EntityCreateWithoutDocumentsInput[] | EntityUncheckedCreateWithoutDocumentsInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentsInput | EntityCreateOrConnectWithoutDocumentsInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type DocumentPageUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentPageCreateWithoutDocumentInput, DocumentPageUncheckedCreateWithoutDocumentInput> | DocumentPageCreateWithoutDocumentInput[] | DocumentPageUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPageCreateOrConnectWithoutDocumentInput | DocumentPageCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentPageCreateManyDocumentInputEnvelope
    connect?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
  }

  export type EntityUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<EntityCreateWithoutDocumentInput, EntityUncheckedCreateWithoutDocumentInput> | EntityCreateWithoutDocumentInput[] | EntityUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentInput | EntityCreateOrConnectWithoutDocumentInput[]
    createMany?: EntityCreateManyDocumentInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type EntityUncheckedCreateNestedManyWithoutDocumentsInput = {
    create?: XOR<EntityCreateWithoutDocumentsInput, EntityUncheckedCreateWithoutDocumentsInput> | EntityCreateWithoutDocumentsInput[] | EntityUncheckedCreateWithoutDocumentsInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentsInput | EntityCreateOrConnectWithoutDocumentsInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type EnumDocumentPreprocessStatusFieldUpdateOperationsInput = {
    set?: $Enums.DocumentPreprocessStatus
  }

  export type ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutContextDocumentsInput, ChatAgentTaskUncheckedCreateWithoutContextDocumentsInput>
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutContextDocumentsInput
    upsert?: ChatAgentTaskUpsertWithoutContextDocumentsInput
    disconnect?: ChatAgentTaskWhereInput | boolean
    delete?: ChatAgentTaskWhereInput | boolean
    connect?: ChatAgentTaskWhereUniqueInput
    update?: XOR<XOR<ChatAgentTaskUpdateToOneWithWhereWithoutContextDocumentsInput, ChatAgentTaskUpdateWithoutContextDocumentsInput>, ChatAgentTaskUncheckedUpdateWithoutContextDocumentsInput>
  }

  export type UserUpdateOneRequiredWithoutDocumentNestedInput = {
    create?: XOR<UserCreateWithoutDocumentInput, UserUncheckedCreateWithoutDocumentInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentInput
    upsert?: UserUpsertWithoutDocumentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentInput, UserUpdateWithoutDocumentInput>, UserUncheckedUpdateWithoutDocumentInput>
  }

  export type DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput = {
    create?: XOR<DocumentAnalyserTaskCreateWithoutInputDocumentsInput, DocumentAnalyserTaskUncheckedCreateWithoutInputDocumentsInput>
    connectOrCreate?: DocumentAnalyserTaskCreateOrConnectWithoutInputDocumentsInput
    upsert?: DocumentAnalyserTaskUpsertWithoutInputDocumentsInput
    disconnect?: DocumentAnalyserTaskWhereInput | boolean
    delete?: DocumentAnalyserTaskWhereInput | boolean
    connect?: DocumentAnalyserTaskWhereUniqueInput
    update?: XOR<XOR<DocumentAnalyserTaskUpdateToOneWithWhereWithoutInputDocumentsInput, DocumentAnalyserTaskUpdateWithoutInputDocumentsInput>, DocumentAnalyserTaskUncheckedUpdateWithoutInputDocumentsInput>
  }

  export type FolderUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<FolderCreateWithoutDocumentsInput, FolderUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: FolderCreateOrConnectWithoutDocumentsInput
    upsert?: FolderUpsertWithoutDocumentsInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutDocumentsInput, FolderUpdateWithoutDocumentsInput>, FolderUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProjectUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentsInput
    upsert?: ProjectUpsertWithoutDocumentsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDocumentsInput, ProjectUpdateWithoutDocumentsInput>, ProjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type WorkspaceUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<WorkspaceCreateWithoutDocumentsInput, WorkspaceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutDocumentsInput
    upsert?: WorkspaceUpsertWithoutDocumentsInput
    disconnect?: WorkspaceWhereInput | boolean
    delete?: WorkspaceWhereInput | boolean
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutDocumentsInput, WorkspaceUpdateWithoutDocumentsInput>, WorkspaceUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentPageUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentPageCreateWithoutDocumentInput, DocumentPageUncheckedCreateWithoutDocumentInput> | DocumentPageCreateWithoutDocumentInput[] | DocumentPageUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPageCreateOrConnectWithoutDocumentInput | DocumentPageCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentPageUpsertWithWhereUniqueWithoutDocumentInput | DocumentPageUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentPageCreateManyDocumentInputEnvelope
    set?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    disconnect?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    delete?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    connect?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    update?: DocumentPageUpdateWithWhereUniqueWithoutDocumentInput | DocumentPageUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentPageUpdateManyWithWhereWithoutDocumentInput | DocumentPageUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentPageScalarWhereInput | DocumentPageScalarWhereInput[]
  }

  export type EntityUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<EntityCreateWithoutDocumentInput, EntityUncheckedCreateWithoutDocumentInput> | EntityCreateWithoutDocumentInput[] | EntityUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentInput | EntityCreateOrConnectWithoutDocumentInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutDocumentInput | EntityUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: EntityCreateManyDocumentInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutDocumentInput | EntityUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutDocumentInput | EntityUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type EntityUpdateManyWithoutDocumentsNestedInput = {
    create?: XOR<EntityCreateWithoutDocumentsInput, EntityUncheckedCreateWithoutDocumentsInput> | EntityCreateWithoutDocumentsInput[] | EntityUncheckedCreateWithoutDocumentsInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentsInput | EntityCreateOrConnectWithoutDocumentsInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutDocumentsInput | EntityUpsertWithWhereUniqueWithoutDocumentsInput[]
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutDocumentsInput | EntityUpdateWithWhereUniqueWithoutDocumentsInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutDocumentsInput | EntityUpdateManyWithWhereWithoutDocumentsInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentPageCreateWithoutDocumentInput, DocumentPageUncheckedCreateWithoutDocumentInput> | DocumentPageCreateWithoutDocumentInput[] | DocumentPageUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPageCreateOrConnectWithoutDocumentInput | DocumentPageCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentPageUpsertWithWhereUniqueWithoutDocumentInput | DocumentPageUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentPageCreateManyDocumentInputEnvelope
    set?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    disconnect?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    delete?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    connect?: DocumentPageWhereUniqueInput | DocumentPageWhereUniqueInput[]
    update?: DocumentPageUpdateWithWhereUniqueWithoutDocumentInput | DocumentPageUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentPageUpdateManyWithWhereWithoutDocumentInput | DocumentPageUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentPageScalarWhereInput | DocumentPageScalarWhereInput[]
  }

  export type EntityUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<EntityCreateWithoutDocumentInput, EntityUncheckedCreateWithoutDocumentInput> | EntityCreateWithoutDocumentInput[] | EntityUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentInput | EntityCreateOrConnectWithoutDocumentInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutDocumentInput | EntityUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: EntityCreateManyDocumentInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutDocumentInput | EntityUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutDocumentInput | EntityUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type EntityUncheckedUpdateManyWithoutDocumentsNestedInput = {
    create?: XOR<EntityCreateWithoutDocumentsInput, EntityUncheckedCreateWithoutDocumentsInput> | EntityCreateWithoutDocumentsInput[] | EntityUncheckedCreateWithoutDocumentsInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentsInput | EntityCreateOrConnectWithoutDocumentsInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutDocumentsInput | EntityUpsertWithWhereUniqueWithoutDocumentsInput[]
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutDocumentsInput | EntityUpdateWithWhereUniqueWithoutDocumentsInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutDocumentsInput | EntityUpdateManyWithWhereWithoutDocumentsInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type DocumentCreateNestedOneWithoutDocumentPageInput = {
    create?: XOR<DocumentCreateWithoutDocumentPageInput, DocumentUncheckedCreateWithoutDocumentPageInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentPageInput
    connect?: DocumentWhereUniqueInput
  }

  export type DocumentUpdateOneRequiredWithoutDocumentPageNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentPageInput, DocumentUncheckedCreateWithoutDocumentPageInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentPageInput
    upsert?: DocumentUpsertWithoutDocumentPageInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutDocumentPageInput, DocumentUpdateWithoutDocumentPageInput>, DocumentUncheckedUpdateWithoutDocumentPageInput>
  }

  export type DocumentCreateNestedManyWithoutFolderInput = {
    create?: XOR<DocumentCreateWithoutFolderInput, DocumentUncheckedCreateWithoutFolderInput> | DocumentCreateWithoutFolderInput[] | DocumentUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutFolderInput | DocumentCreateOrConnectWithoutFolderInput[]
    createMany?: DocumentCreateManyFolderInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutFolderInput = {
    create?: XOR<UserCreateWithoutFolderInput, UserUncheckedCreateWithoutFolderInput>
    connectOrCreate?: UserCreateOrConnectWithoutFolderInput
    connect?: UserWhereUniqueInput
  }

  export type FolderCreateNestedOneWithoutSubfoldersInput = {
    create?: XOR<FolderCreateWithoutSubfoldersInput, FolderUncheckedCreateWithoutSubfoldersInput>
    connectOrCreate?: FolderCreateOrConnectWithoutSubfoldersInput
    connect?: FolderWhereUniqueInput
  }

  export type FolderCreateNestedManyWithoutParentFolderInput = {
    create?: XOR<FolderCreateWithoutParentFolderInput, FolderUncheckedCreateWithoutParentFolderInput> | FolderCreateWithoutParentFolderInput[] | FolderUncheckedCreateWithoutParentFolderInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentFolderInput | FolderCreateOrConnectWithoutParentFolderInput[]
    createMany?: FolderCreateManyParentFolderInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type ProjectCreateNestedOneWithoutFoldersInput = {
    create?: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFoldersInput
    connect?: ProjectWhereUniqueInput
  }

  export type DocumentUncheckedCreateNestedManyWithoutFolderInput = {
    create?: XOR<DocumentCreateWithoutFolderInput, DocumentUncheckedCreateWithoutFolderInput> | DocumentCreateWithoutFolderInput[] | DocumentUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutFolderInput | DocumentCreateOrConnectWithoutFolderInput[]
    createMany?: DocumentCreateManyFolderInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutParentFolderInput = {
    create?: XOR<FolderCreateWithoutParentFolderInput, FolderUncheckedCreateWithoutParentFolderInput> | FolderCreateWithoutParentFolderInput[] | FolderUncheckedCreateWithoutParentFolderInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentFolderInput | FolderCreateOrConnectWithoutParentFolderInput[]
    createMany?: FolderCreateManyParentFolderInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type DocumentUpdateManyWithoutFolderNestedInput = {
    create?: XOR<DocumentCreateWithoutFolderInput, DocumentUncheckedCreateWithoutFolderInput> | DocumentCreateWithoutFolderInput[] | DocumentUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutFolderInput | DocumentCreateOrConnectWithoutFolderInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutFolderInput | DocumentUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: DocumentCreateManyFolderInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutFolderInput | DocumentUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutFolderInput | DocumentUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutFolderNestedInput = {
    create?: XOR<UserCreateWithoutFolderInput, UserUncheckedCreateWithoutFolderInput>
    connectOrCreate?: UserCreateOrConnectWithoutFolderInput
    upsert?: UserUpsertWithoutFolderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFolderInput, UserUpdateWithoutFolderInput>, UserUncheckedUpdateWithoutFolderInput>
  }

  export type FolderUpdateOneWithoutSubfoldersNestedInput = {
    create?: XOR<FolderCreateWithoutSubfoldersInput, FolderUncheckedCreateWithoutSubfoldersInput>
    connectOrCreate?: FolderCreateOrConnectWithoutSubfoldersInput
    upsert?: FolderUpsertWithoutSubfoldersInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutSubfoldersInput, FolderUpdateWithoutSubfoldersInput>, FolderUncheckedUpdateWithoutSubfoldersInput>
  }

  export type FolderUpdateManyWithoutParentFolderNestedInput = {
    create?: XOR<FolderCreateWithoutParentFolderInput, FolderUncheckedCreateWithoutParentFolderInput> | FolderCreateWithoutParentFolderInput[] | FolderUncheckedCreateWithoutParentFolderInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentFolderInput | FolderCreateOrConnectWithoutParentFolderInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentFolderInput | FolderUpsertWithWhereUniqueWithoutParentFolderInput[]
    createMany?: FolderCreateManyParentFolderInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentFolderInput | FolderUpdateWithWhereUniqueWithoutParentFolderInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentFolderInput | FolderUpdateManyWithWhereWithoutParentFolderInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type ProjectUpdateOneRequiredWithoutFoldersNestedInput = {
    create?: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFoldersInput
    upsert?: ProjectUpsertWithoutFoldersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutFoldersInput, ProjectUpdateWithoutFoldersInput>, ProjectUncheckedUpdateWithoutFoldersInput>
  }

  export type DocumentUncheckedUpdateManyWithoutFolderNestedInput = {
    create?: XOR<DocumentCreateWithoutFolderInput, DocumentUncheckedCreateWithoutFolderInput> | DocumentCreateWithoutFolderInput[] | DocumentUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutFolderInput | DocumentCreateOrConnectWithoutFolderInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutFolderInput | DocumentUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: DocumentCreateManyFolderInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutFolderInput | DocumentUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutFolderInput | DocumentUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutParentFolderNestedInput = {
    create?: XOR<FolderCreateWithoutParentFolderInput, FolderUncheckedCreateWithoutParentFolderInput> | FolderCreateWithoutParentFolderInput[] | FolderUncheckedCreateWithoutParentFolderInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentFolderInput | FolderCreateOrConnectWithoutParentFolderInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentFolderInput | FolderUpsertWithWhereUniqueWithoutParentFolderInput[]
    createMany?: FolderCreateManyParentFolderInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentFolderInput | FolderUpdateWithWhereUniqueWithoutParentFolderInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentFolderInput | FolderUpdateManyWithWhereWithoutParentFolderInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type DocumentAnalyserTaskCreatenextStepsInput = {
    set: string[]
  }

  export type DocumentCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<DocumentCreateWithoutDocumentAnalyserTaskInput, DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput> | DocumentCreateWithoutDocumentAnalyserTaskInput[] | DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput | DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: DocumentCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ProjectCreateNestedOneWithoutDocumentAnalyserTaskInput = {
    create?: XOR<ProjectCreateWithoutDocumentAnalyserTaskInput, ProjectUncheckedCreateWithoutDocumentAnalyserTaskInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentAnalyserTaskInput
    connect?: ProjectWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutDocumentAnalyserTaskInput = {
    create?: XOR<WorkspaceCreateWithoutDocumentAnalyserTaskInput, WorkspaceUncheckedCreateWithoutDocumentAnalyserTaskInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutDocumentAnalyserTaskInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type EntityCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<EntityCreateWithoutDocumentAnalyserTaskInput, EntityUncheckedCreateWithoutDocumentAnalyserTaskInput> | EntityCreateWithoutDocumentAnalyserTaskInput[] | EntityUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentAnalyserTaskInput | EntityCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: EntityCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type ObservationCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<ObservationCreateWithoutDocumentAnalyserTaskInput, ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput> | ObservationCreateWithoutDocumentAnalyserTaskInput[] | ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput | ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: ObservationCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type ReferenceCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<ReferenceCreateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput> | ReferenceCreateWithoutDocumentAnalyserTaskInput[] | ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput | ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: ReferenceCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<DocumentCreateWithoutDocumentAnalyserTaskInput, DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput> | DocumentCreateWithoutDocumentAnalyserTaskInput[] | DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput | DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: DocumentCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type EntityUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<EntityCreateWithoutDocumentAnalyserTaskInput, EntityUncheckedCreateWithoutDocumentAnalyserTaskInput> | EntityCreateWithoutDocumentAnalyserTaskInput[] | EntityUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentAnalyserTaskInput | EntityCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: EntityCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
  }

  export type ObservationUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<ObservationCreateWithoutDocumentAnalyserTaskInput, ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput> | ObservationCreateWithoutDocumentAnalyserTaskInput[] | ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput | ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: ObservationCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type ReferenceUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput = {
    create?: XOR<ReferenceCreateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput> | ReferenceCreateWithoutDocumentAnalyserTaskInput[] | ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput | ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    createMany?: ReferenceCreateManyDocumentAnalyserTaskInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type DocumentAnalyserTaskUpdatenextStepsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.DocumentAnalyserTaskStatus
  }

  export type DocumentUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentAnalyserTaskInput, DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput> | DocumentCreateWithoutDocumentAnalyserTaskInput[] | DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput | DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | DocumentUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: DocumentCreateManyDocumentAnalyserTaskInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | DocumentUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | DocumentUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ProjectUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<ProjectCreateWithoutDocumentAnalyserTaskInput, ProjectUncheckedCreateWithoutDocumentAnalyserTaskInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentAnalyserTaskInput
    upsert?: ProjectUpsertWithoutDocumentAnalyserTaskInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDocumentAnalyserTaskInput, ProjectUpdateWithoutDocumentAnalyserTaskInput>, ProjectUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type WorkspaceUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<WorkspaceCreateWithoutDocumentAnalyserTaskInput, WorkspaceUncheckedCreateWithoutDocumentAnalyserTaskInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutDocumentAnalyserTaskInput
    upsert?: WorkspaceUpsertWithoutDocumentAnalyserTaskInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutDocumentAnalyserTaskInput, WorkspaceUpdateWithoutDocumentAnalyserTaskInput>, WorkspaceUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type EntityUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<EntityCreateWithoutDocumentAnalyserTaskInput, EntityUncheckedCreateWithoutDocumentAnalyserTaskInput> | EntityCreateWithoutDocumentAnalyserTaskInput[] | EntityUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentAnalyserTaskInput | EntityCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | EntityUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: EntityCreateManyDocumentAnalyserTaskInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | EntityUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | EntityUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type ObservationUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<ObservationCreateWithoutDocumentAnalyserTaskInput, ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput> | ObservationCreateWithoutDocumentAnalyserTaskInput[] | ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput | ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | ObservationUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: ObservationCreateManyDocumentAnalyserTaskInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | ObservationUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | ObservationUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type ReferenceUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<ReferenceCreateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput> | ReferenceCreateWithoutDocumentAnalyserTaskInput[] | ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput | ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | ReferenceUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: ReferenceCreateManyDocumentAnalyserTaskInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | ReferenceUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | ReferenceUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentAnalyserTaskInput, DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput> | DocumentCreateWithoutDocumentAnalyserTaskInput[] | DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput | DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | DocumentUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: DocumentCreateManyDocumentAnalyserTaskInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | DocumentUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | DocumentUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<EntityCreateWithoutDocumentAnalyserTaskInput, EntityUncheckedCreateWithoutDocumentAnalyserTaskInput> | EntityCreateWithoutDocumentAnalyserTaskInput[] | EntityUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: EntityCreateOrConnectWithoutDocumentAnalyserTaskInput | EntityCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: EntityUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | EntityUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: EntityCreateManyDocumentAnalyserTaskInputEnvelope
    set?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    disconnect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    delete?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    connect?: EntityWhereUniqueInput | EntityWhereUniqueInput[]
    update?: EntityUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | EntityUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: EntityUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | EntityUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: EntityScalarWhereInput | EntityScalarWhereInput[]
  }

  export type ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<ObservationCreateWithoutDocumentAnalyserTaskInput, ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput> | ObservationCreateWithoutDocumentAnalyserTaskInput[] | ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput | ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | ObservationUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: ObservationCreateManyDocumentAnalyserTaskInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | ObservationUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | ObservationUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput = {
    create?: XOR<ReferenceCreateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput> | ReferenceCreateWithoutDocumentAnalyserTaskInput[] | ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput | ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput | ReferenceUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    createMany?: ReferenceCreateManyDocumentAnalyserTaskInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput | ReferenceUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutDocumentAnalyserTaskInput | ReferenceUpdateManyWithWhereWithoutDocumentAnalyserTaskInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutChatAgentInput = {
    create?: XOR<ProjectCreateWithoutChatAgentInput, ProjectUncheckedCreateWithoutChatAgentInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutChatAgentInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatAgentTaskInput = {
    create?: XOR<UserCreateWithoutChatAgentTaskInput, UserUncheckedCreateWithoutChatAgentTaskInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatAgentTaskInput
    connect?: UserWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutChatAgentTaskInput = {
    create?: XOR<WorkspaceCreateWithoutChatAgentTaskInput, WorkspaceUncheckedCreateWithoutChatAgentTaskInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutChatAgentTaskInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutChatAgentTaskInput = {
    create?: XOR<DocumentCreateWithoutChatAgentTaskInput, DocumentUncheckedCreateWithoutChatAgentTaskInput> | DocumentCreateWithoutChatAgentTaskInput[] | DocumentUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutChatAgentTaskInput | DocumentCreateOrConnectWithoutChatAgentTaskInput[]
    createMany?: DocumentCreateManyChatAgentTaskInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutChatAgentTaskInput = {
    create?: XOR<MessageCreateWithoutChatAgentTaskInput, MessageUncheckedCreateWithoutChatAgentTaskInput> | MessageCreateWithoutChatAgentTaskInput[] | MessageUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatAgentTaskInput | MessageCreateOrConnectWithoutChatAgentTaskInput[]
    createMany?: MessageCreateManyChatAgentTaskInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutChatAgentTaskInput = {
    create?: XOR<DocumentCreateWithoutChatAgentTaskInput, DocumentUncheckedCreateWithoutChatAgentTaskInput> | DocumentCreateWithoutChatAgentTaskInput[] | DocumentUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutChatAgentTaskInput | DocumentCreateOrConnectWithoutChatAgentTaskInput[]
    createMany?: DocumentCreateManyChatAgentTaskInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChatAgentTaskInput = {
    create?: XOR<MessageCreateWithoutChatAgentTaskInput, MessageUncheckedCreateWithoutChatAgentTaskInput> | MessageCreateWithoutChatAgentTaskInput[] | MessageUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatAgentTaskInput | MessageCreateOrConnectWithoutChatAgentTaskInput[]
    createMany?: MessageCreateManyChatAgentTaskInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutChatAgentNestedInput = {
    create?: XOR<ProjectCreateWithoutChatAgentInput, ProjectUncheckedCreateWithoutChatAgentInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutChatAgentInput
    upsert?: ProjectUpsertWithoutChatAgentInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutChatAgentInput, ProjectUpdateWithoutChatAgentInput>, ProjectUncheckedUpdateWithoutChatAgentInput>
  }

  export type UserUpdateOneRequiredWithoutChatAgentTaskNestedInput = {
    create?: XOR<UserCreateWithoutChatAgentTaskInput, UserUncheckedCreateWithoutChatAgentTaskInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatAgentTaskInput
    upsert?: UserUpsertWithoutChatAgentTaskInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatAgentTaskInput, UserUpdateWithoutChatAgentTaskInput>, UserUncheckedUpdateWithoutChatAgentTaskInput>
  }

  export type WorkspaceUpdateOneRequiredWithoutChatAgentTaskNestedInput = {
    create?: XOR<WorkspaceCreateWithoutChatAgentTaskInput, WorkspaceUncheckedCreateWithoutChatAgentTaskInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutChatAgentTaskInput
    upsert?: WorkspaceUpsertWithoutChatAgentTaskInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutChatAgentTaskInput, WorkspaceUpdateWithoutChatAgentTaskInput>, WorkspaceUncheckedUpdateWithoutChatAgentTaskInput>
  }

  export type DocumentUpdateManyWithoutChatAgentTaskNestedInput = {
    create?: XOR<DocumentCreateWithoutChatAgentTaskInput, DocumentUncheckedCreateWithoutChatAgentTaskInput> | DocumentCreateWithoutChatAgentTaskInput[] | DocumentUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutChatAgentTaskInput | DocumentCreateOrConnectWithoutChatAgentTaskInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutChatAgentTaskInput | DocumentUpsertWithWhereUniqueWithoutChatAgentTaskInput[]
    createMany?: DocumentCreateManyChatAgentTaskInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutChatAgentTaskInput | DocumentUpdateWithWhereUniqueWithoutChatAgentTaskInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutChatAgentTaskInput | DocumentUpdateManyWithWhereWithoutChatAgentTaskInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutChatAgentTaskNestedInput = {
    create?: XOR<MessageCreateWithoutChatAgentTaskInput, MessageUncheckedCreateWithoutChatAgentTaskInput> | MessageCreateWithoutChatAgentTaskInput[] | MessageUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatAgentTaskInput | MessageCreateOrConnectWithoutChatAgentTaskInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatAgentTaskInput | MessageUpsertWithWhereUniqueWithoutChatAgentTaskInput[]
    createMany?: MessageCreateManyChatAgentTaskInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatAgentTaskInput | MessageUpdateWithWhereUniqueWithoutChatAgentTaskInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatAgentTaskInput | MessageUpdateManyWithWhereWithoutChatAgentTaskInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutChatAgentTaskNestedInput = {
    create?: XOR<DocumentCreateWithoutChatAgentTaskInput, DocumentUncheckedCreateWithoutChatAgentTaskInput> | DocumentCreateWithoutChatAgentTaskInput[] | DocumentUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutChatAgentTaskInput | DocumentCreateOrConnectWithoutChatAgentTaskInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutChatAgentTaskInput | DocumentUpsertWithWhereUniqueWithoutChatAgentTaskInput[]
    createMany?: DocumentCreateManyChatAgentTaskInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutChatAgentTaskInput | DocumentUpdateWithWhereUniqueWithoutChatAgentTaskInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutChatAgentTaskInput | DocumentUpdateManyWithWhereWithoutChatAgentTaskInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChatAgentTaskNestedInput = {
    create?: XOR<MessageCreateWithoutChatAgentTaskInput, MessageUncheckedCreateWithoutChatAgentTaskInput> | MessageCreateWithoutChatAgentTaskInput[] | MessageUncheckedCreateWithoutChatAgentTaskInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatAgentTaskInput | MessageCreateOrConnectWithoutChatAgentTaskInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatAgentTaskInput | MessageUpsertWithWhereUniqueWithoutChatAgentTaskInput[]
    createMany?: MessageCreateManyChatAgentTaskInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatAgentTaskInput | MessageUpdateWithWhereUniqueWithoutChatAgentTaskInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatAgentTaskInput | MessageUpdateManyWithWhereWithoutChatAgentTaskInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatAgentTaskCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatAgentTaskCreateWithoutMessagesInput, ChatAgentTaskUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutMessagesInput
    connect?: ChatAgentTaskWhereUniqueInput
  }

  export type MessageActionCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageActionCreateWithoutMessageInput, MessageActionUncheckedCreateWithoutMessageInput> | MessageActionCreateWithoutMessageInput[] | MessageActionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageActionCreateOrConnectWithoutMessageInput | MessageActionCreateOrConnectWithoutMessageInput[]
    createMany?: MessageActionCreateManyMessageInputEnvelope
    connect?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
  }

  export type MessageActionUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageActionCreateWithoutMessageInput, MessageActionUncheckedCreateWithoutMessageInput> | MessageActionCreateWithoutMessageInput[] | MessageActionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageActionCreateOrConnectWithoutMessageInput | MessageActionCreateOrConnectWithoutMessageInput[]
    createMany?: MessageActionCreateManyMessageInputEnvelope
    connect?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
  }

  export type EnumMessageSenderFieldUpdateOperationsInput = {
    set?: $Enums.MessageSender
  }

  export type ChatAgentTaskUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatAgentTaskCreateWithoutMessagesInput, ChatAgentTaskUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatAgentTaskCreateOrConnectWithoutMessagesInput
    upsert?: ChatAgentTaskUpsertWithoutMessagesInput
    connect?: ChatAgentTaskWhereUniqueInput
    update?: XOR<XOR<ChatAgentTaskUpdateToOneWithWhereWithoutMessagesInput, ChatAgentTaskUpdateWithoutMessagesInput>, ChatAgentTaskUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageActionUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageActionCreateWithoutMessageInput, MessageActionUncheckedCreateWithoutMessageInput> | MessageActionCreateWithoutMessageInput[] | MessageActionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageActionCreateOrConnectWithoutMessageInput | MessageActionCreateOrConnectWithoutMessageInput[]
    upsert?: MessageActionUpsertWithWhereUniqueWithoutMessageInput | MessageActionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageActionCreateManyMessageInputEnvelope
    set?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    disconnect?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    delete?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    connect?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    update?: MessageActionUpdateWithWhereUniqueWithoutMessageInput | MessageActionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageActionUpdateManyWithWhereWithoutMessageInput | MessageActionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageActionScalarWhereInput | MessageActionScalarWhereInput[]
  }

  export type MessageActionUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageActionCreateWithoutMessageInput, MessageActionUncheckedCreateWithoutMessageInput> | MessageActionCreateWithoutMessageInput[] | MessageActionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageActionCreateOrConnectWithoutMessageInput | MessageActionCreateOrConnectWithoutMessageInput[]
    upsert?: MessageActionUpsertWithWhereUniqueWithoutMessageInput | MessageActionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageActionCreateManyMessageInputEnvelope
    set?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    disconnect?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    delete?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    connect?: MessageActionWhereUniqueInput | MessageActionWhereUniqueInput[]
    update?: MessageActionUpdateWithWhereUniqueWithoutMessageInput | MessageActionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageActionUpdateManyWithWhereWithoutMessageInput | MessageActionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageActionScalarWhereInput | MessageActionScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutMessageActionsInput = {
    create?: XOR<MessageCreateWithoutMessageActionsInput, MessageUncheckedCreateWithoutMessageActionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutMessageActionsInput
    connect?: MessageWhereUniqueInput
  }

  export type EnumMessageActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.MessageActionType
  }

  export type MessageUpdateOneRequiredWithoutMessageActionsNestedInput = {
    create?: XOR<MessageCreateWithoutMessageActionsInput, MessageUncheckedCreateWithoutMessageActionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutMessageActionsInput
    upsert?: MessageUpsertWithoutMessageActionsInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutMessageActionsInput, MessageUpdateWithoutMessageActionsInput>, MessageUncheckedUpdateWithoutMessageActionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumWorkspaceRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleFilter<$PrismaModel> | $Enums.WorkspaceRole
  }

  export type NestedEnumWorkspaceRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
  }

  export type NestedEnumBusinessRiskReportTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRiskReportTaskStatus | EnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRiskReportTaskStatusFilter<$PrismaModel> | $Enums.BusinessRiskReportTaskStatus
  }

  export type NestedEnumBusinessRiskReportTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRiskReportTaskStatus | EnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRiskReportTaskStatus[] | ListEnumBusinessRiskReportTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRiskReportTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.BusinessRiskReportTaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessRiskReportTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumBusinessRiskReportTaskStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeFilter<$PrismaModel> | $Enums.EntityType
  }

  export type NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntityType[] | ListEnumEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumEntityTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type NestedEnumDocumentPreprocessStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentPreprocessStatus | EnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentPreprocessStatusFilter<$PrismaModel> | $Enums.DocumentPreprocessStatus
  }

  export type NestedEnumDocumentPreprocessStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentPreprocessStatus | EnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentPreprocessStatus[] | ListEnumDocumentPreprocessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentPreprocessStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocumentPreprocessStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentPreprocessStatusFilter<$PrismaModel>
    _max?: NestedEnumDocumentPreprocessStatusFilter<$PrismaModel>
  }

  export type NestedEnumDocumentAnalyserTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentAnalyserTaskStatus | EnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentAnalyserTaskStatusFilter<$PrismaModel> | $Enums.DocumentAnalyserTaskStatus
  }

  export type NestedEnumDocumentAnalyserTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentAnalyserTaskStatus | EnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentAnalyserTaskStatus[] | ListEnumDocumentAnalyserTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentAnalyserTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocumentAnalyserTaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentAnalyserTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumDocumentAnalyserTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumMessageSenderFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderFilter<$PrismaModel> | $Enums.MessageSender
  }

  export type NestedEnumMessageSenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderWithAggregatesFilter<$PrismaModel> | $Enums.MessageSender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageSenderFilter<$PrismaModel>
    _max?: NestedEnumMessageSenderFilter<$PrismaModel>
  }

  export type NestedEnumMessageActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageActionType | EnumMessageActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageActionTypeFilter<$PrismaModel> | $Enums.MessageActionType
  }

  export type NestedEnumMessageActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageActionType | EnumMessageActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageActionType[] | ListEnumMessageActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.MessageActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageActionTypeFilter<$PrismaModel>
    _max?: NestedEnumMessageActionTypeFilter<$PrismaModel>
  }

  export type BusinessRiskReportTaskCreateWithoutCreatedByInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    mainEntity?: EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput
    project?: ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput
    workspace: WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput
    observations?: ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
    observations?: ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskCreateOrConnectWithoutCreatedByInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    create: XOR<BusinessRiskReportTaskCreateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput>
  }

  export type BusinessRiskReportTaskCreateManyCreatedByInputEnvelope = {
    data: BusinessRiskReportTaskCreateManyCreatedByInput | BusinessRiskReportTaskCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ChatAgentTaskCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutChatAgentInput
    workspace: WorkspaceCreateNestedOneWithoutChatAgentTaskInput
    contextDocuments?: DocumentCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    contextDocuments?: DocumentUncheckedCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskCreateOrConnectWithoutUserInput = {
    where: ChatAgentTaskWhereUniqueInput
    create: XOR<ChatAgentTaskCreateWithoutUserInput, ChatAgentTaskUncheckedCreateWithoutUserInput>
  }

  export type ChatAgentTaskCreateManyUserInputEnvelope = {
    data: ChatAgentTaskCreateManyUserInput | ChatAgentTaskCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutCreatedByInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentCreateManyCreatedByInputEnvelope = {
    data: DocumentCreateManyCreatedByInput | DocumentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type FolderCreateWithoutCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutFolderInput
    parentFolder?: FolderCreateNestedOneWithoutSubfoldersInput
    subfolders?: FolderCreateNestedManyWithoutParentFolderInput
    project: ProjectCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    projectId: string
    documents?: DocumentUncheckedCreateNestedManyWithoutFolderInput
    subfolders?: FolderUncheckedCreateNestedManyWithoutParentFolderInput
  }

  export type FolderCreateOrConnectWithoutCreatedByInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutCreatedByInput, FolderUncheckedCreateWithoutCreatedByInput>
  }

  export type FolderCreateManyCreatedByInputEnvelope = {
    data: FolderCreateManyCreatedByInput | FolderCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutUsersInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutUsersInput, WorkspaceUncheckedCreateWithoutUsersInput>
  }

  export type WorkspaceUserCreateWithoutUserInput = {
    id?: string
    role: $Enums.WorkspaceRole
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceUsersInput
  }

  export type WorkspaceUserUncheckedCreateWithoutUserInput = {
    id?: string
    workspaceId: string
    role: $Enums.WorkspaceRole
  }

  export type WorkspaceUserCreateOrConnectWithoutUserInput = {
    where: WorkspaceUserWhereUniqueInput
    create: XOR<WorkspaceUserCreateWithoutUserInput, WorkspaceUserUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceUserCreateManyUserInputEnvelope = {
    data: WorkspaceUserCreateManyUserInput | WorkspaceUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BusinessRiskReportTaskUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    update: XOR<BusinessRiskReportTaskUpdateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedUpdateWithoutCreatedByInput>
    create: XOR<BusinessRiskReportTaskCreateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedCreateWithoutCreatedByInput>
  }

  export type BusinessRiskReportTaskUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    data: XOR<BusinessRiskReportTaskUpdateWithoutCreatedByInput, BusinessRiskReportTaskUncheckedUpdateWithoutCreatedByInput>
  }

  export type BusinessRiskReportTaskUpdateManyWithWhereWithoutCreatedByInput = {
    where: BusinessRiskReportTaskScalarWhereInput
    data: XOR<BusinessRiskReportTaskUpdateManyMutationInput, BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type BusinessRiskReportTaskScalarWhereInput = {
    AND?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
    OR?: BusinessRiskReportTaskScalarWhereInput[]
    NOT?: BusinessRiskReportTaskScalarWhereInput | BusinessRiskReportTaskScalarWhereInput[]
    id?: StringFilter<"BusinessRiskReportTask"> | string
    reportName?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    generalDescription?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    natureOfBusiness?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    geography?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    riskOverview?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    nextSteps?: StringNullableListFilter<"BusinessRiskReportTask">
    inputUrl?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    createdById?: StringFilter<"BusinessRiskReportTask"> | string
    workspaceId?: StringFilter<"BusinessRiskReportTask"> | string
    createdAt?: DateTimeFilter<"BusinessRiskReportTask"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessRiskReportTask"> | Date | string
    status?: EnumBusinessRiskReportTaskStatusFilter<"BusinessRiskReportTask"> | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
    displayId?: IntFilter<"BusinessRiskReportTask"> | number
    projectId?: StringNullableFilter<"BusinessRiskReportTask"> | string | null
  }

  export type ChatAgentTaskUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatAgentTaskWhereUniqueInput
    update: XOR<ChatAgentTaskUpdateWithoutUserInput, ChatAgentTaskUncheckedUpdateWithoutUserInput>
    create: XOR<ChatAgentTaskCreateWithoutUserInput, ChatAgentTaskUncheckedCreateWithoutUserInput>
  }

  export type ChatAgentTaskUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatAgentTaskWhereUniqueInput
    data: XOR<ChatAgentTaskUpdateWithoutUserInput, ChatAgentTaskUncheckedUpdateWithoutUserInput>
  }

  export type ChatAgentTaskUpdateManyWithWhereWithoutUserInput = {
    where: ChatAgentTaskScalarWhereInput
    data: XOR<ChatAgentTaskUpdateManyMutationInput, ChatAgentTaskUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatAgentTaskScalarWhereInput = {
    AND?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
    OR?: ChatAgentTaskScalarWhereInput[]
    NOT?: ChatAgentTaskScalarWhereInput | ChatAgentTaskScalarWhereInput[]
    id?: StringFilter<"ChatAgentTask"> | string
    name?: StringFilter<"ChatAgentTask"> | string
    createdAt?: DateTimeFilter<"ChatAgentTask"> | Date | string
    updatedAt?: DateTimeFilter<"ChatAgentTask"> | Date | string
    workspaceId?: StringFilter<"ChatAgentTask"> | string
    projectId?: StringFilter<"ChatAgentTask"> | string
    userId?: StringFilter<"ChatAgentTask"> | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutCreatedByInput, DocumentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutCreatedByInput, DocumentUncheckedUpdateWithoutCreatedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutCreatedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    filename?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    workspaceId?: StringNullableFilter<"Document"> | string | null
    author?: StringNullableFilter<"Document"> | string | null
    chatAgentTaskId?: StringNullableFilter<"Document"> | string | null
    createdById?: StringFilter<"Document"> | string
    dateOrPeriod?: StringNullableFilter<"Document"> | string | null
    description?: StringNullableFilter<"Document"> | string | null
    documentAnalyserTaskId?: StringNullableFilter<"Document"> | string | null
    fileType?: StringFilter<"Document"> | string
    folderId?: StringNullableFilter<"Document"> | string | null
    fullText?: StringNullableFilter<"Document"> | string | null
    language?: StringNullableFilter<"Document"> | string | null
    metadata?: StringNullableFilter<"Document"> | string | null
    projectId?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    fileSize?: IntNullableFilter<"Document"> | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFilter<"Document"> | $Enums.DocumentPreprocessStatus
  }

  export type FolderUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutCreatedByInput, FolderUncheckedUpdateWithoutCreatedByInput>
    create: XOR<FolderCreateWithoutCreatedByInput, FolderUncheckedCreateWithoutCreatedByInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutCreatedByInput, FolderUncheckedUpdateWithoutCreatedByInput>
  }

  export type FolderUpdateManyWithWhereWithoutCreatedByInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type FolderScalarWhereInput = {
    AND?: FolderScalarWhereInput | FolderScalarWhereInput[]
    OR?: FolderScalarWhereInput[]
    NOT?: FolderScalarWhereInput | FolderScalarWhereInput[]
    id?: StringFilter<"Folder"> | string
    name?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    parentFolderId?: StringNullableFilter<"Folder"> | string | null
    projectId?: StringFilter<"Folder"> | string
    createdById?: StringFilter<"Folder"> | string
  }

  export type WorkspaceUpsertWithoutUsersInput = {
    update: XOR<WorkspaceUpdateWithoutUsersInput, WorkspaceUncheckedUpdateWithoutUsersInput>
    create: XOR<WorkspaceCreateWithoutUsersInput, WorkspaceUncheckedCreateWithoutUsersInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutUsersInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutUsersInput, WorkspaceUncheckedUpdateWithoutUsersInput>
  }

  export type WorkspaceUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUserUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkspaceUserWhereUniqueInput
    update: XOR<WorkspaceUserUpdateWithoutUserInput, WorkspaceUserUncheckedUpdateWithoutUserInput>
    create: XOR<WorkspaceUserCreateWithoutUserInput, WorkspaceUserUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceUserUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkspaceUserWhereUniqueInput
    data: XOR<WorkspaceUserUpdateWithoutUserInput, WorkspaceUserUncheckedUpdateWithoutUserInput>
  }

  export type WorkspaceUserUpdateManyWithWhereWithoutUserInput = {
    where: WorkspaceUserScalarWhereInput
    data: XOR<WorkspaceUserUpdateManyMutationInput, WorkspaceUserUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkspaceUserScalarWhereInput = {
    AND?: WorkspaceUserScalarWhereInput | WorkspaceUserScalarWhereInput[]
    OR?: WorkspaceUserScalarWhereInput[]
    NOT?: WorkspaceUserScalarWhereInput | WorkspaceUserScalarWhereInput[]
    id?: StringFilter<"WorkspaceUser"> | string
    workspaceId?: StringFilter<"WorkspaceUser"> | string
    userId?: StringFilter<"WorkspaceUser"> | string
    role?: EnumWorkspaceRoleFilter<"WorkspaceUser"> | $Enums.WorkspaceRole
  }

  export type BusinessRiskReportTaskCreateWithoutWorkspaceInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    createdBy: UserCreateNestedOneWithoutBusinessRiskReportTasksInput
    mainEntity?: EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput
    project?: ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput
    observations?: ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
    observations?: ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskCreateOrConnectWithoutWorkspaceInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    create: XOR<BusinessRiskReportTaskCreateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput>
  }

  export type BusinessRiskReportTaskCreateManyWorkspaceInputEnvelope = {
    data: BusinessRiskReportTaskCreateManyWorkspaceInput | BusinessRiskReportTaskCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type ChatAgentTaskCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutChatAgentInput
    user: UserCreateNestedOneWithoutChatAgentTaskInput
    contextDocuments?: DocumentCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    userId: string
    contextDocuments?: DocumentUncheckedCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskCreateOrConnectWithoutWorkspaceInput = {
    where: ChatAgentTaskWhereUniqueInput
    create: XOR<ChatAgentTaskCreateWithoutWorkspaceInput, ChatAgentTaskUncheckedCreateWithoutWorkspaceInput>
  }

  export type ChatAgentTaskCreateManyWorkspaceInputEnvelope = {
    data: ChatAgentTaskCreateManyWorkspaceInput | ChatAgentTaskCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutWorkspaceInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutWorkspaceInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutWorkspaceInput, DocumentUncheckedCreateWithoutWorkspaceInput>
  }

  export type DocumentCreateManyWorkspaceInputEnvelope = {
    data: DocumentCreateManyWorkspaceInput | DocumentCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type DocumentAnalyserTaskCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentCreateNestedManyWithoutDocumentAnalyserTaskInput
    project: ProjectCreateNestedOneWithoutDocumentAnalyserTaskInput
    entities?: EntityCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskCreateOrConnectWithoutWorkspaceInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    create: XOR<DocumentAnalyserTaskCreateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput>
  }

  export type DocumentAnalyserTaskCreateManyWorkspaceInputEnvelope = {
    data: DocumentAnalyserTaskCreateManyWorkspaceInput | DocumentAnalyserTaskCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type EntityCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput
    Document?: DocumentCreateNestedOneWithoutEntityInput
    project?: ProjectCreateNestedOneWithoutEntitiesInput
    documents?: DocumentCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    projectId?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityCreateOrConnectWithoutWorkspaceInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutWorkspaceInput, EntityUncheckedCreateWithoutWorkspaceInput>
  }

  export type EntityCreateManyWorkspaceInputEnvelope = {
    data: EntityCreateManyWorkspaceInput | EntityCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutWorkspaceInput = {
    id?: string
    email: string
    role: $Enums.WorkspaceRole
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    accepted?: boolean
  }

  export type InvitationUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    email: string
    role: $Enums.WorkspaceRole
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    accepted?: boolean
  }

  export type InvitationCreateOrConnectWithoutWorkspaceInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutWorkspaceInput, InvitationUncheckedCreateWithoutWorkspaceInput>
  }

  export type InvitationCreateManyWorkspaceInputEnvelope = {
    data: InvitationCreateManyWorkspaceInput | InvitationCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput>
  }

  export type ProjectCreateManyWorkspaceInputEnvelope = {
    data: ProjectCreateManyWorkspaceInput | ProjectCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutActiveWorkspaceInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskCreateNestedManyWithoutUserInput
    Document?: DocumentCreateNestedManyWithoutCreatedByInput
    Folder?: FolderCreateNestedManyWithoutCreatedByInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActiveWorkspaceInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutUserInput
    Document?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    Folder?: FolderUncheckedCreateNestedManyWithoutCreatedByInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActiveWorkspaceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActiveWorkspaceInput, UserUncheckedCreateWithoutActiveWorkspaceInput>
  }

  export type UserCreateManyActiveWorkspaceInputEnvelope = {
    data: UserCreateManyActiveWorkspaceInput | UserCreateManyActiveWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceUserCreateWithoutWorkspaceInput = {
    id?: string
    role: $Enums.WorkspaceRole
    user: UserCreateNestedOneWithoutWorkspaceUsersInput
  }

  export type WorkspaceUserUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    userId: string
    role: $Enums.WorkspaceRole
  }

  export type WorkspaceUserCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceUserWhereUniqueInput
    create: XOR<WorkspaceUserCreateWithoutWorkspaceInput, WorkspaceUserUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceUserCreateManyWorkspaceInputEnvelope = {
    data: WorkspaceUserCreateManyWorkspaceInput | WorkspaceUserCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type BusinessRiskReportTaskUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    update: XOR<BusinessRiskReportTaskUpdateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<BusinessRiskReportTaskCreateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedCreateWithoutWorkspaceInput>
  }

  export type BusinessRiskReportTaskUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    data: XOR<BusinessRiskReportTaskUpdateWithoutWorkspaceInput, BusinessRiskReportTaskUncheckedUpdateWithoutWorkspaceInput>
  }

  export type BusinessRiskReportTaskUpdateManyWithWhereWithoutWorkspaceInput = {
    where: BusinessRiskReportTaskScalarWhereInput
    data: XOR<BusinessRiskReportTaskUpdateManyMutationInput, BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type ChatAgentTaskUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: ChatAgentTaskWhereUniqueInput
    update: XOR<ChatAgentTaskUpdateWithoutWorkspaceInput, ChatAgentTaskUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<ChatAgentTaskCreateWithoutWorkspaceInput, ChatAgentTaskUncheckedCreateWithoutWorkspaceInput>
  }

  export type ChatAgentTaskUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: ChatAgentTaskWhereUniqueInput
    data: XOR<ChatAgentTaskUpdateWithoutWorkspaceInput, ChatAgentTaskUncheckedUpdateWithoutWorkspaceInput>
  }

  export type ChatAgentTaskUpdateManyWithWhereWithoutWorkspaceInput = {
    where: ChatAgentTaskScalarWhereInput
    data: XOR<ChatAgentTaskUpdateManyMutationInput, ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutWorkspaceInput, DocumentUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<DocumentCreateWithoutWorkspaceInput, DocumentUncheckedCreateWithoutWorkspaceInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutWorkspaceInput, DocumentUncheckedUpdateWithoutWorkspaceInput>
  }

  export type DocumentUpdateManyWithWhereWithoutWorkspaceInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type DocumentAnalyserTaskUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    update: XOR<DocumentAnalyserTaskUpdateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<DocumentAnalyserTaskCreateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedCreateWithoutWorkspaceInput>
  }

  export type DocumentAnalyserTaskUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    data: XOR<DocumentAnalyserTaskUpdateWithoutWorkspaceInput, DocumentAnalyserTaskUncheckedUpdateWithoutWorkspaceInput>
  }

  export type DocumentAnalyserTaskUpdateManyWithWhereWithoutWorkspaceInput = {
    where: DocumentAnalyserTaskScalarWhereInput
    data: XOR<DocumentAnalyserTaskUpdateManyMutationInput, DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type DocumentAnalyserTaskScalarWhereInput = {
    AND?: DocumentAnalyserTaskScalarWhereInput | DocumentAnalyserTaskScalarWhereInput[]
    OR?: DocumentAnalyserTaskScalarWhereInput[]
    NOT?: DocumentAnalyserTaskScalarWhereInput | DocumentAnalyserTaskScalarWhereInput[]
    id?: StringFilter<"DocumentAnalyserTask"> | string
    name?: StringFilter<"DocumentAnalyserTask"> | string
    createdAt?: DateTimeFilter<"DocumentAnalyserTask"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentAnalyserTask"> | Date | string
    workspaceId?: StringFilter<"DocumentAnalyserTask"> | string
    projectId?: StringFilter<"DocumentAnalyserTask"> | string
    nextSteps?: StringNullableListFilter<"DocumentAnalyserTask">
    status?: EnumDocumentAnalyserTaskStatusFilter<"DocumentAnalyserTask"> | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: StringNullableFilter<"DocumentAnalyserTask"> | string | null
    inputContext?: StringNullableFilter<"DocumentAnalyserTask"> | string | null
  }

  export type EntityUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: EntityWhereUniqueInput
    update: XOR<EntityUpdateWithoutWorkspaceInput, EntityUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<EntityCreateWithoutWorkspaceInput, EntityUncheckedCreateWithoutWorkspaceInput>
  }

  export type EntityUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: EntityWhereUniqueInput
    data: XOR<EntityUpdateWithoutWorkspaceInput, EntityUncheckedUpdateWithoutWorkspaceInput>
  }

  export type EntityUpdateManyWithWhereWithoutWorkspaceInput = {
    where: EntityScalarWhereInput
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type EntityScalarWhereInput = {
    AND?: EntityScalarWhereInput | EntityScalarWhereInput[]
    OR?: EntityScalarWhereInput[]
    NOT?: EntityScalarWhereInput | EntityScalarWhereInput[]
    id?: StringFilter<"Entity"> | string
    name?: StringFilter<"Entity"> | string
    description?: StringNullableFilter<"Entity"> | string | null
    createdAt?: DateTimeFilter<"Entity"> | Date | string
    updatedAt?: DateTimeFilter<"Entity"> | Date | string
    type?: EnumEntityTypeFilter<"Entity"> | $Enums.EntityType
    socialLinks?: StringNullableListFilter<"Entity">
    country?: StringNullableFilter<"Entity"> | string | null
    city?: StringNullableFilter<"Entity"> | string | null
    state?: StringNullableFilter<"Entity"> | string | null
    streetAddress?: StringNullableFilter<"Entity"> | string | null
    zipCode?: StringNullableFilter<"Entity"> | string | null
    phoneNumber?: StringNullableFilter<"Entity"> | string | null
    email?: StringNullableFilter<"Entity"> | string | null
    website?: StringNullableFilter<"Entity"> | string | null
    workspaceId?: StringNullableFilter<"Entity"> | string | null
    industry?: StringNullableFilter<"Entity"> | string | null
    role?: StringNullableFilter<"Entity"> | string | null
    DocumentAnalyserTaskId?: StringNullableFilter<"Entity"> | string | null
    documentId?: StringNullableFilter<"Entity"> | string | null
    projectId?: StringNullableFilter<"Entity"> | string | null
  }

  export type InvitationUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutWorkspaceInput, InvitationUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<InvitationCreateWithoutWorkspaceInput, InvitationUncheckedCreateWithoutWorkspaceInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutWorkspaceInput, InvitationUncheckedUpdateWithoutWorkspaceInput>
  }

  export type InvitationUpdateManyWithWhereWithoutWorkspaceInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type InvitationScalarWhereInput = {
    AND?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    OR?: InvitationScalarWhereInput[]
    NOT?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    id?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    workspaceId?: StringFilter<"Invitation"> | string
    role?: EnumWorkspaceRoleFilter<"Invitation"> | $Enums.WorkspaceRole
    token?: StringFilter<"Invitation"> | string
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    accepted?: BoolFilter<"Invitation"> | boolean
  }

  export type ProjectUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutWorkspaceInput, ProjectUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<ProjectCreateWithoutWorkspaceInput, ProjectUncheckedCreateWithoutWorkspaceInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutWorkspaceInput, ProjectUncheckedUpdateWithoutWorkspaceInput>
  }

  export type ProjectUpdateManyWithWhereWithoutWorkspaceInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    workspaceId?: StringFilter<"Project"> | string
    budget?: IntNullableFilter<"Project"> | number | null
    city?: StringNullableFilter<"Project"> | string | null
    country?: StringNullableFilter<"Project"> | string | null
    endDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    fundingType?: StringNullableFilter<"Project"> | string | null
    potentialFraudDescription?: StringNullableFilter<"Project"> | string | null
    potentialFraudTypes?: StringNullableListFilter<"Project">
    projectType?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
  }

  export type UserUpsertWithWhereUniqueWithoutActiveWorkspaceInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutActiveWorkspaceInput, UserUncheckedUpdateWithoutActiveWorkspaceInput>
    create: XOR<UserCreateWithoutActiveWorkspaceInput, UserUncheckedCreateWithoutActiveWorkspaceInput>
  }

  export type UserUpdateWithWhereUniqueWithoutActiveWorkspaceInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutActiveWorkspaceInput, UserUncheckedUpdateWithoutActiveWorkspaceInput>
  }

  export type UserUpdateManyWithWhereWithoutActiveWorkspaceInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutActiveWorkspaceInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    activeWorkspaceId?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    hasVerifiedEmail?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
  }

  export type WorkspaceUserUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceUserWhereUniqueInput
    update: XOR<WorkspaceUserUpdateWithoutWorkspaceInput, WorkspaceUserUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspaceUserCreateWithoutWorkspaceInput, WorkspaceUserUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceUserUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceUserWhereUniqueInput
    data: XOR<WorkspaceUserUpdateWithoutWorkspaceInput, WorkspaceUserUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceUserUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceUserScalarWhereInput
    data: XOR<WorkspaceUserUpdateManyMutationInput, WorkspaceUserUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type UserCreateWithoutWorkspaceUsersInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskCreateNestedManyWithoutUserInput
    Document?: DocumentCreateNestedManyWithoutCreatedByInput
    Folder?: FolderCreateNestedManyWithoutCreatedByInput
    activeWorkspace?: WorkspaceCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutWorkspaceUsersInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWorkspaceId?: string | null
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutUserInput
    Document?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    Folder?: FolderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutWorkspaceUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkspaceUsersInput, UserUncheckedCreateWithoutWorkspaceUsersInput>
  }

  export type WorkspaceCreateWithoutWorkspaceUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutWorkspaceUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutWorkspaceUsersInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutWorkspaceUsersInput, WorkspaceUncheckedCreateWithoutWorkspaceUsersInput>
  }

  export type UserUpsertWithoutWorkspaceUsersInput = {
    update: XOR<UserUpdateWithoutWorkspaceUsersInput, UserUncheckedUpdateWithoutWorkspaceUsersInput>
    create: XOR<UserCreateWithoutWorkspaceUsersInput, UserUncheckedCreateWithoutWorkspaceUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkspaceUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkspaceUsersInput, UserUncheckedUpdateWithoutWorkspaceUsersInput>
  }

  export type UserUpdateWithoutWorkspaceUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUpdateManyWithoutUserNestedInput
    Document?: DocumentUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUpdateManyWithoutCreatedByNestedInput
    activeWorkspace?: WorkspaceUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkspaceUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWorkspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutUserNestedInput
    Document?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type WorkspaceUpsertWithoutWorkspaceUsersInput = {
    update: XOR<WorkspaceUpdateWithoutWorkspaceUsersInput, WorkspaceUncheckedUpdateWithoutWorkspaceUsersInput>
    create: XOR<WorkspaceCreateWithoutWorkspaceUsersInput, WorkspaceUncheckedCreateWithoutWorkspaceUsersInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutWorkspaceUsersInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutWorkspaceUsersInput, WorkspaceUncheckedUpdateWithoutWorkspaceUsersInput>
  }

  export type WorkspaceUpdateWithoutWorkspaceUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutWorkspaceUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
  }

  export type WorkspaceCreateWithoutInvitationsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutInvitationsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutInvitationsInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutInvitationsInput, WorkspaceUncheckedCreateWithoutInvitationsInput>
  }

  export type WorkspaceUpsertWithoutInvitationsInput = {
    update: XOR<WorkspaceUpdateWithoutInvitationsInput, WorkspaceUncheckedUpdateWithoutInvitationsInput>
    create: XOR<WorkspaceCreateWithoutInvitationsInput, WorkspaceUncheckedCreateWithoutInvitationsInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutInvitationsInput, WorkspaceUncheckedUpdateWithoutInvitationsInput>
  }

  export type WorkspaceUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type UserCreateWithoutBusinessRiskReportTasksInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    ChatAgentTask?: ChatAgentTaskCreateNestedManyWithoutUserInput
    Document?: DocumentCreateNestedManyWithoutCreatedByInput
    Folder?: FolderCreateNestedManyWithoutCreatedByInput
    activeWorkspace?: WorkspaceCreateNestedOneWithoutUsersInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBusinessRiskReportTasksInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWorkspaceId?: string | null
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    ChatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutUserInput
    Document?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    Folder?: FolderUncheckedCreateNestedManyWithoutCreatedByInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBusinessRiskReportTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBusinessRiskReportTasksInput, UserUncheckedCreateWithoutBusinessRiskReportTasksInput>
  }

  export type EntityCreateWithoutMainBusinessRiskReportTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput
    Document?: DocumentCreateNestedOneWithoutEntityInput
    project?: ProjectCreateNestedOneWithoutEntitiesInput
    workspace?: WorkspaceCreateNestedOneWithoutEntitiesInput
    documents?: DocumentCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUncheckedCreateWithoutMainBusinessRiskReportTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    projectId?: string | null
    documents?: DocumentUncheckedCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityCreateOrConnectWithoutMainBusinessRiskReportTasksInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutMainBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutMainBusinessRiskReportTasksInput>
  }

  export type ProjectCreateWithoutBusinessRiskReportTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutBusinessRiskReportTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutBusinessRiskReportTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutBusinessRiskReportTasksInput, ProjectUncheckedCreateWithoutBusinessRiskReportTasksInput>
  }

  export type WorkspaceCreateWithoutBusinessRiskReportTasksInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutBusinessRiskReportTasksInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutBusinessRiskReportTasksInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutBusinessRiskReportTasksInput, WorkspaceUncheckedCreateWithoutBusinessRiskReportTasksInput>
  }

  export type ObservationCreateWithoutBusinessRiskReportTaskInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutObservationsInput
    project?: ProjectCreateNestedOneWithoutObservationsInput
    references?: ReferenceCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    projectId?: string | null
    documentAnalyserTaskId?: string | null
    references?: ReferenceUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutBusinessRiskReportTaskInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutBusinessRiskReportTaskInput, ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput>
  }

  export type ObservationCreateManyBusinessRiskReportTaskInputEnvelope = {
    data: ObservationCreateManyBusinessRiskReportTaskInput | ObservationCreateManyBusinessRiskReportTaskInput[]
    skipDuplicates?: boolean
  }

  export type ReferenceCreateWithoutBusinessRiskReportTaskInput = {
    id?: string
    url: string
    title?: string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutReferencesInput
    observation?: ObservationCreateNestedOneWithoutReferencesInput
    project?: ProjectCreateNestedOneWithoutReferencesInput
  }

  export type ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput = {
    id?: string
    url: string
    title?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
    observationId?: string | null
  }

  export type ReferenceCreateOrConnectWithoutBusinessRiskReportTaskInput = {
    where: ReferenceWhereUniqueInput
    create: XOR<ReferenceCreateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput>
  }

  export type ReferenceCreateManyBusinessRiskReportTaskInputEnvelope = {
    data: ReferenceCreateManyBusinessRiskReportTaskInput | ReferenceCreateManyBusinessRiskReportTaskInput[]
    skipDuplicates?: boolean
  }

  export type EntityCreateWithoutRelatedBusinessRiskReportTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput
    Document?: DocumentCreateNestedOneWithoutEntityInput
    project?: ProjectCreateNestedOneWithoutEntitiesInput
    workspace?: WorkspaceCreateNestedOneWithoutEntitiesInput
    documents?: DocumentCreateNestedManyWithoutEntitiesInput
  }

  export type EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    projectId?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutEntitiesInput
  }

  export type EntityCreateOrConnectWithoutRelatedBusinessRiskReportTasksInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput>
  }

  export type UserUpsertWithoutBusinessRiskReportTasksInput = {
    update: XOR<UserUpdateWithoutBusinessRiskReportTasksInput, UserUncheckedUpdateWithoutBusinessRiskReportTasksInput>
    create: XOR<UserCreateWithoutBusinessRiskReportTasksInput, UserUncheckedCreateWithoutBusinessRiskReportTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBusinessRiskReportTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBusinessRiskReportTasksInput, UserUncheckedUpdateWithoutBusinessRiskReportTasksInput>
  }

  export type UserUpdateWithoutBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    ChatAgentTask?: ChatAgentTaskUpdateManyWithoutUserNestedInput
    Document?: DocumentUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUpdateManyWithoutCreatedByNestedInput
    activeWorkspace?: WorkspaceUpdateOneWithoutUsersNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWorkspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    ChatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutUserNestedInput
    Document?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUncheckedUpdateManyWithoutCreatedByNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EntityUpsertWithoutMainBusinessRiskReportTasksInput = {
    update: XOR<EntityUpdateWithoutMainBusinessRiskReportTasksInput, EntityUncheckedUpdateWithoutMainBusinessRiskReportTasksInput>
    create: XOR<EntityCreateWithoutMainBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutMainBusinessRiskReportTasksInput>
    where?: EntityWhereInput
  }

  export type EntityUpdateToOneWithWhereWithoutMainBusinessRiskReportTasksInput = {
    where?: EntityWhereInput
    data: XOR<EntityUpdateWithoutMainBusinessRiskReportTasksInput, EntityUncheckedUpdateWithoutMainBusinessRiskReportTasksInput>
  }

  export type EntityUpdateWithoutMainBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput
    Document?: DocumentUpdateOneWithoutEntityNestedInput
    project?: ProjectUpdateOneWithoutEntitiesNestedInput
    workspace?: WorkspaceUpdateOneWithoutEntitiesNestedInput
    documents?: DocumentUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateWithoutMainBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: DocumentUncheckedUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type ProjectUpsertWithoutBusinessRiskReportTasksInput = {
    update: XOR<ProjectUpdateWithoutBusinessRiskReportTasksInput, ProjectUncheckedUpdateWithoutBusinessRiskReportTasksInput>
    create: XOR<ProjectCreateWithoutBusinessRiskReportTasksInput, ProjectUncheckedCreateWithoutBusinessRiskReportTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutBusinessRiskReportTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutBusinessRiskReportTasksInput, ProjectUncheckedUpdateWithoutBusinessRiskReportTasksInput>
  }

  export type ProjectUpdateWithoutBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type WorkspaceUpsertWithoutBusinessRiskReportTasksInput = {
    update: XOR<WorkspaceUpdateWithoutBusinessRiskReportTasksInput, WorkspaceUncheckedUpdateWithoutBusinessRiskReportTasksInput>
    create: XOR<WorkspaceCreateWithoutBusinessRiskReportTasksInput, WorkspaceUncheckedCreateWithoutBusinessRiskReportTasksInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutBusinessRiskReportTasksInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutBusinessRiskReportTasksInput, WorkspaceUncheckedUpdateWithoutBusinessRiskReportTasksInput>
  }

  export type WorkspaceUpdateWithoutBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type ObservationUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput = {
    where: ObservationWhereUniqueInput
    update: XOR<ObservationUpdateWithoutBusinessRiskReportTaskInput, ObservationUncheckedUpdateWithoutBusinessRiskReportTaskInput>
    create: XOR<ObservationCreateWithoutBusinessRiskReportTaskInput, ObservationUncheckedCreateWithoutBusinessRiskReportTaskInput>
  }

  export type ObservationUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput = {
    where: ObservationWhereUniqueInput
    data: XOR<ObservationUpdateWithoutBusinessRiskReportTaskInput, ObservationUncheckedUpdateWithoutBusinessRiskReportTaskInput>
  }

  export type ObservationUpdateManyWithWhereWithoutBusinessRiskReportTaskInput = {
    where: ObservationScalarWhereInput
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskInput>
  }

  export type ObservationScalarWhereInput = {
    AND?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
    OR?: ObservationScalarWhereInput[]
    NOT?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
    id?: StringFilter<"Observation"> | string
    title?: StringFilter<"Observation"> | string
    description?: StringFilter<"Observation"> | string
    riskGrade?: IntFilter<"Observation"> | number
    type?: StringNullableFilter<"Observation"> | string | null
    businessRiskReportTaskId?: StringNullableFilter<"Observation"> | string | null
    projectId?: StringNullableFilter<"Observation"> | string | null
    documentAnalyserTaskId?: StringNullableFilter<"Observation"> | string | null
  }

  export type ReferenceUpsertWithWhereUniqueWithoutBusinessRiskReportTaskInput = {
    where: ReferenceWhereUniqueInput
    update: XOR<ReferenceUpdateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedUpdateWithoutBusinessRiskReportTaskInput>
    create: XOR<ReferenceCreateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedCreateWithoutBusinessRiskReportTaskInput>
  }

  export type ReferenceUpdateWithWhereUniqueWithoutBusinessRiskReportTaskInput = {
    where: ReferenceWhereUniqueInput
    data: XOR<ReferenceUpdateWithoutBusinessRiskReportTaskInput, ReferenceUncheckedUpdateWithoutBusinessRiskReportTaskInput>
  }

  export type ReferenceUpdateManyWithWhereWithoutBusinessRiskReportTaskInput = {
    where: ReferenceScalarWhereInput
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskInput>
  }

  export type ReferenceScalarWhereInput = {
    AND?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
    OR?: ReferenceScalarWhereInput[]
    NOT?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
    id?: StringFilter<"Reference"> | string
    url?: StringFilter<"Reference"> | string
    title?: StringNullableFilter<"Reference"> | string | null
    businessRiskReportTaskId?: StringNullableFilter<"Reference"> | string | null
    DocumentAnalyserTaskId?: StringNullableFilter<"Reference"> | string | null
    projectId?: StringNullableFilter<"Reference"> | string | null
    observationId?: StringNullableFilter<"Reference"> | string | null
  }

  export type EntityUpsertWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput = {
    where: EntityWhereUniqueInput
    update: XOR<EntityUpdateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedUpdateWithoutRelatedBusinessRiskReportTasksInput>
    create: XOR<EntityCreateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedCreateWithoutRelatedBusinessRiskReportTasksInput>
  }

  export type EntityUpdateWithWhereUniqueWithoutRelatedBusinessRiskReportTasksInput = {
    where: EntityWhereUniqueInput
    data: XOR<EntityUpdateWithoutRelatedBusinessRiskReportTasksInput, EntityUncheckedUpdateWithoutRelatedBusinessRiskReportTasksInput>
  }

  export type EntityUpdateManyWithWhereWithoutRelatedBusinessRiskReportTasksInput = {
    where: EntityScalarWhereInput
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksInput>
  }

  export type BusinessRiskReportTaskCreateWithoutMainEntityInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    createdBy: UserCreateNestedOneWithoutBusinessRiskReportTasksInput
    project?: ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput
    workspace: WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput
    observations?: ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    projectId?: string | null
    observations?: ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskCreateOrConnectWithoutMainEntityInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    create: XOR<BusinessRiskReportTaskCreateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput>
  }

  export type BusinessRiskReportTaskCreateManyMainEntityInputEnvelope = {
    data: BusinessRiskReportTaskCreateManyMainEntityInput | BusinessRiskReportTaskCreateManyMainEntityInput[]
    skipDuplicates?: boolean
  }

  export type DocumentAnalyserTaskCreateWithoutEntitiesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentCreateNestedManyWithoutDocumentAnalyserTaskInput
    project: ProjectCreateNestedOneWithoutDocumentAnalyserTaskInput
    workspace: WorkspaceCreateNestedOneWithoutDocumentAnalyserTaskInput
    observations?: ObservationCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUncheckedCreateWithoutEntitiesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskCreateOrConnectWithoutEntitiesInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    create: XOR<DocumentAnalyserTaskCreateWithoutEntitiesInput, DocumentAnalyserTaskUncheckedCreateWithoutEntitiesInput>
  }

  export type DocumentCreateWithoutEntityInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutEntityInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutEntityInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutEntityInput, DocumentUncheckedCreateWithoutEntityInput>
  }

  export type ProjectCreateWithoutEntitiesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutEntitiesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutEntitiesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutEntitiesInput, ProjectUncheckedCreateWithoutEntitiesInput>
  }

  export type WorkspaceCreateWithoutEntitiesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutEntitiesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutEntitiesInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutEntitiesInput, WorkspaceUncheckedCreateWithoutEntitiesInput>
  }

  export type DocumentCreateWithoutEntitiesInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutEntitiesInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutEntitiesInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutEntitiesInput, DocumentUncheckedCreateWithoutEntitiesInput>
  }

  export type BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    createdBy: UserCreateNestedOneWithoutBusinessRiskReportTasksInput
    mainEntity?: EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput
    project?: ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput
    workspace: WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput
    observations?: ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput
  }

  export type BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
    observations?: ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
  }

  export type BusinessRiskReportTaskCreateOrConnectWithoutRelatedEntitiesInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    create: XOR<BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput>
  }

  export type BusinessRiskReportTaskUpsertWithWhereUniqueWithoutMainEntityInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    update: XOR<BusinessRiskReportTaskUpdateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedUpdateWithoutMainEntityInput>
    create: XOR<BusinessRiskReportTaskCreateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedCreateWithoutMainEntityInput>
  }

  export type BusinessRiskReportTaskUpdateWithWhereUniqueWithoutMainEntityInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    data: XOR<BusinessRiskReportTaskUpdateWithoutMainEntityInput, BusinessRiskReportTaskUncheckedUpdateWithoutMainEntityInput>
  }

  export type BusinessRiskReportTaskUpdateManyWithWhereWithoutMainEntityInput = {
    where: BusinessRiskReportTaskScalarWhereInput
    data: XOR<BusinessRiskReportTaskUpdateManyMutationInput, BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityInput>
  }

  export type DocumentAnalyserTaskUpsertWithoutEntitiesInput = {
    update: XOR<DocumentAnalyserTaskUpdateWithoutEntitiesInput, DocumentAnalyserTaskUncheckedUpdateWithoutEntitiesInput>
    create: XOR<DocumentAnalyserTaskCreateWithoutEntitiesInput, DocumentAnalyserTaskUncheckedCreateWithoutEntitiesInput>
    where?: DocumentAnalyserTaskWhereInput
  }

  export type DocumentAnalyserTaskUpdateToOneWithWhereWithoutEntitiesInput = {
    where?: DocumentAnalyserTaskWhereInput
    data: XOR<DocumentAnalyserTaskUpdateWithoutEntitiesInput, DocumentAnalyserTaskUncheckedUpdateWithoutEntitiesInput>
  }

  export type DocumentAnalyserTaskUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUpdateManyWithoutDocumentAnalyserTaskNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentUpsertWithoutEntityInput = {
    update: XOR<DocumentUpdateWithoutEntityInput, DocumentUncheckedUpdateWithoutEntityInput>
    create: XOR<DocumentCreateWithoutEntityInput, DocumentUncheckedCreateWithoutEntityInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutEntityInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutEntityInput, DocumentUncheckedUpdateWithoutEntityInput>
  }

  export type DocumentUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type ProjectUpsertWithoutEntitiesInput = {
    update: XOR<ProjectUpdateWithoutEntitiesInput, ProjectUncheckedUpdateWithoutEntitiesInput>
    create: XOR<ProjectCreateWithoutEntitiesInput, ProjectUncheckedCreateWithoutEntitiesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutEntitiesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutEntitiesInput, ProjectUncheckedUpdateWithoutEntitiesInput>
  }

  export type ProjectUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type WorkspaceUpsertWithoutEntitiesInput = {
    update: XOR<WorkspaceUpdateWithoutEntitiesInput, WorkspaceUncheckedUpdateWithoutEntitiesInput>
    create: XOR<WorkspaceCreateWithoutEntitiesInput, WorkspaceUncheckedCreateWithoutEntitiesInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutEntitiesInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutEntitiesInput, WorkspaceUncheckedUpdateWithoutEntitiesInput>
  }

  export type WorkspaceUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutEntitiesInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutEntitiesInput, DocumentUncheckedUpdateWithoutEntitiesInput>
    create: XOR<DocumentCreateWithoutEntitiesInput, DocumentUncheckedCreateWithoutEntitiesInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutEntitiesInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutEntitiesInput, DocumentUncheckedUpdateWithoutEntitiesInput>
  }

  export type DocumentUpdateManyWithWhereWithoutEntitiesInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutEntitiesInput>
  }

  export type BusinessRiskReportTaskUpsertWithWhereUniqueWithoutRelatedEntitiesInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    update: XOR<BusinessRiskReportTaskUpdateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedUpdateWithoutRelatedEntitiesInput>
    create: XOR<BusinessRiskReportTaskCreateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedCreateWithoutRelatedEntitiesInput>
  }

  export type BusinessRiskReportTaskUpdateWithWhereUniqueWithoutRelatedEntitiesInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    data: XOR<BusinessRiskReportTaskUpdateWithoutRelatedEntitiesInput, BusinessRiskReportTaskUncheckedUpdateWithoutRelatedEntitiesInput>
  }

  export type BusinessRiskReportTaskUpdateManyWithWhereWithoutRelatedEntitiesInput = {
    where: BusinessRiskReportTaskScalarWhereInput
    data: XOR<BusinessRiskReportTaskUpdateManyMutationInput, BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesInput>
  }

  export type BusinessRiskReportTaskCreateWithoutObservationsInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    createdBy: UserCreateNestedOneWithoutBusinessRiskReportTasksInput
    mainEntity?: EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput
    project?: ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput
    workspace: WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput
    references?: ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUncheckedCreateWithoutObservationsInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
    references?: ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskCreateOrConnectWithoutObservationsInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    create: XOR<BusinessRiskReportTaskCreateWithoutObservationsInput, BusinessRiskReportTaskUncheckedCreateWithoutObservationsInput>
  }

  export type DocumentAnalyserTaskCreateWithoutObservationsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentCreateNestedManyWithoutDocumentAnalyserTaskInput
    project: ProjectCreateNestedOneWithoutDocumentAnalyserTaskInput
    workspace: WorkspaceCreateNestedOneWithoutDocumentAnalyserTaskInput
    entities?: EntityCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUncheckedCreateWithoutObservationsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskCreateOrConnectWithoutObservationsInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    create: XOR<DocumentAnalyserTaskCreateWithoutObservationsInput, DocumentAnalyserTaskUncheckedCreateWithoutObservationsInput>
  }

  export type ProjectCreateWithoutObservationsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutObservationsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutObservationsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutObservationsInput, ProjectUncheckedCreateWithoutObservationsInput>
  }

  export type ReferenceCreateWithoutObservationInput = {
    id?: string
    url: string
    title?: string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutReferencesInput
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutReferencesInput
    project?: ProjectCreateNestedOneWithoutReferencesInput
  }

  export type ReferenceUncheckedCreateWithoutObservationInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
  }

  export type ReferenceCreateOrConnectWithoutObservationInput = {
    where: ReferenceWhereUniqueInput
    create: XOR<ReferenceCreateWithoutObservationInput, ReferenceUncheckedCreateWithoutObservationInput>
  }

  export type ReferenceCreateManyObservationInputEnvelope = {
    data: ReferenceCreateManyObservationInput | ReferenceCreateManyObservationInput[]
    skipDuplicates?: boolean
  }

  export type BusinessRiskReportTaskUpsertWithoutObservationsInput = {
    update: XOR<BusinessRiskReportTaskUpdateWithoutObservationsInput, BusinessRiskReportTaskUncheckedUpdateWithoutObservationsInput>
    create: XOR<BusinessRiskReportTaskCreateWithoutObservationsInput, BusinessRiskReportTaskUncheckedCreateWithoutObservationsInput>
    where?: BusinessRiskReportTaskWhereInput
  }

  export type BusinessRiskReportTaskUpdateToOneWithWhereWithoutObservationsInput = {
    where?: BusinessRiskReportTaskWhereInput
    data: XOR<BusinessRiskReportTaskUpdateWithoutObservationsInput, BusinessRiskReportTaskUncheckedUpdateWithoutObservationsInput>
  }

  export type BusinessRiskReportTaskUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    mainEntity?: EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput
    project?: ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    references?: ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    references?: ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type DocumentAnalyserTaskUpsertWithoutObservationsInput = {
    update: XOR<DocumentAnalyserTaskUpdateWithoutObservationsInput, DocumentAnalyserTaskUncheckedUpdateWithoutObservationsInput>
    create: XOR<DocumentAnalyserTaskCreateWithoutObservationsInput, DocumentAnalyserTaskUncheckedCreateWithoutObservationsInput>
    where?: DocumentAnalyserTaskWhereInput
  }

  export type DocumentAnalyserTaskUpdateToOneWithWhereWithoutObservationsInput = {
    where?: DocumentAnalyserTaskWhereInput
    data: XOR<DocumentAnalyserTaskUpdateWithoutObservationsInput, DocumentAnalyserTaskUncheckedUpdateWithoutObservationsInput>
  }

  export type DocumentAnalyserTaskUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUpdateManyWithoutDocumentAnalyserTaskNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type ProjectUpsertWithoutObservationsInput = {
    update: XOR<ProjectUpdateWithoutObservationsInput, ProjectUncheckedUpdateWithoutObservationsInput>
    create: XOR<ProjectCreateWithoutObservationsInput, ProjectUncheckedCreateWithoutObservationsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutObservationsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutObservationsInput, ProjectUncheckedUpdateWithoutObservationsInput>
  }

  export type ProjectUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ReferenceUpsertWithWhereUniqueWithoutObservationInput = {
    where: ReferenceWhereUniqueInput
    update: XOR<ReferenceUpdateWithoutObservationInput, ReferenceUncheckedUpdateWithoutObservationInput>
    create: XOR<ReferenceCreateWithoutObservationInput, ReferenceUncheckedCreateWithoutObservationInput>
  }

  export type ReferenceUpdateWithWhereUniqueWithoutObservationInput = {
    where: ReferenceWhereUniqueInput
    data: XOR<ReferenceUpdateWithoutObservationInput, ReferenceUncheckedUpdateWithoutObservationInput>
  }

  export type ReferenceUpdateManyWithWhereWithoutObservationInput = {
    where: ReferenceScalarWhereInput
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyWithoutObservationInput>
  }

  export type DocumentAnalyserTaskCreateWithoutReferencesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentCreateNestedManyWithoutDocumentAnalyserTaskInput
    project: ProjectCreateNestedOneWithoutDocumentAnalyserTaskInput
    workspace: WorkspaceCreateNestedOneWithoutDocumentAnalyserTaskInput
    entities?: EntityCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUncheckedCreateWithoutReferencesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskCreateOrConnectWithoutReferencesInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    create: XOR<DocumentAnalyserTaskCreateWithoutReferencesInput, DocumentAnalyserTaskUncheckedCreateWithoutReferencesInput>
  }

  export type BusinessRiskReportTaskCreateWithoutReferencesInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    createdBy: UserCreateNestedOneWithoutBusinessRiskReportTasksInput
    mainEntity?: EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput
    project?: ProjectCreateNestedOneWithoutBusinessRiskReportTasksInput
    workspace: WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput
    observations?: ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUncheckedCreateWithoutReferencesInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
    observations?: ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskCreateOrConnectWithoutReferencesInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    create: XOR<BusinessRiskReportTaskCreateWithoutReferencesInput, BusinessRiskReportTaskUncheckedCreateWithoutReferencesInput>
  }

  export type ObservationCreateWithoutReferencesInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutObservationsInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutObservationsInput
    project?: ProjectCreateNestedOneWithoutObservationsInput
  }

  export type ObservationUncheckedCreateWithoutReferencesInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTaskId?: string | null
    projectId?: string | null
    documentAnalyserTaskId?: string | null
  }

  export type ObservationCreateOrConnectWithoutReferencesInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutReferencesInput, ObservationUncheckedCreateWithoutReferencesInput>
  }

  export type ProjectCreateWithoutReferencesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutReferencesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutReferencesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutReferencesInput, ProjectUncheckedCreateWithoutReferencesInput>
  }

  export type DocumentAnalyserTaskUpsertWithoutReferencesInput = {
    update: XOR<DocumentAnalyserTaskUpdateWithoutReferencesInput, DocumentAnalyserTaskUncheckedUpdateWithoutReferencesInput>
    create: XOR<DocumentAnalyserTaskCreateWithoutReferencesInput, DocumentAnalyserTaskUncheckedCreateWithoutReferencesInput>
    where?: DocumentAnalyserTaskWhereInput
  }

  export type DocumentAnalyserTaskUpdateToOneWithWhereWithoutReferencesInput = {
    where?: DocumentAnalyserTaskWhereInput
    data: XOR<DocumentAnalyserTaskUpdateWithoutReferencesInput, DocumentAnalyserTaskUncheckedUpdateWithoutReferencesInput>
  }

  export type DocumentAnalyserTaskUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUpdateManyWithoutDocumentAnalyserTaskNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type BusinessRiskReportTaskUpsertWithoutReferencesInput = {
    update: XOR<BusinessRiskReportTaskUpdateWithoutReferencesInput, BusinessRiskReportTaskUncheckedUpdateWithoutReferencesInput>
    create: XOR<BusinessRiskReportTaskCreateWithoutReferencesInput, BusinessRiskReportTaskUncheckedCreateWithoutReferencesInput>
    where?: BusinessRiskReportTaskWhereInput
  }

  export type BusinessRiskReportTaskUpdateToOneWithWhereWithoutReferencesInput = {
    where?: BusinessRiskReportTaskWhereInput
    data: XOR<BusinessRiskReportTaskUpdateWithoutReferencesInput, BusinessRiskReportTaskUncheckedUpdateWithoutReferencesInput>
  }

  export type BusinessRiskReportTaskUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    mainEntity?: EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput
    project?: ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    observations?: ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type ObservationUpsertWithoutReferencesInput = {
    update: XOR<ObservationUpdateWithoutReferencesInput, ObservationUncheckedUpdateWithoutReferencesInput>
    create: XOR<ObservationCreateWithoutReferencesInput, ObservationUncheckedCreateWithoutReferencesInput>
    where?: ObservationWhereInput
  }

  export type ObservationUpdateToOneWithWhereWithoutReferencesInput = {
    where?: ObservationWhereInput
    data: XOR<ObservationUpdateWithoutReferencesInput, ObservationUncheckedUpdateWithoutReferencesInput>
  }

  export type ObservationUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutObservationsNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutObservationsNestedInput
    project?: ProjectUpdateOneWithoutObservationsNestedInput
  }

  export type ObservationUncheckedUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUpsertWithoutReferencesInput = {
    update: XOR<ProjectUpdateWithoutReferencesInput, ProjectUncheckedUpdateWithoutReferencesInput>
    create: XOR<ProjectCreateWithoutReferencesInput, ProjectUncheckedCreateWithoutReferencesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutReferencesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutReferencesInput, ProjectUncheckedUpdateWithoutReferencesInput>
  }

  export type ProjectUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type BusinessRiskReportTaskCreateWithoutProjectInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    createdBy: UserCreateNestedOneWithoutBusinessRiskReportTasksInput
    mainEntity?: EntityCreateNestedOneWithoutMainBusinessRiskReportTasksInput
    workspace: WorkspaceCreateNestedOneWithoutBusinessRiskReportTasksInput
    observations?: ObservationCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskUncheckedCreateWithoutProjectInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    observations?: ObservationUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutBusinessRiskReportTaskInput
    relatedEntities?: EntityUncheckedCreateNestedManyWithoutRelatedBusinessRiskReportTasksInput
  }

  export type BusinessRiskReportTaskCreateOrConnectWithoutProjectInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    create: XOR<BusinessRiskReportTaskCreateWithoutProjectInput, BusinessRiskReportTaskUncheckedCreateWithoutProjectInput>
  }

  export type BusinessRiskReportTaskCreateManyProjectInputEnvelope = {
    data: BusinessRiskReportTaskCreateManyProjectInput | BusinessRiskReportTaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ChatAgentTaskCreateWithoutProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatAgentTaskInput
    workspace: WorkspaceCreateNestedOneWithoutChatAgentTaskInput
    contextDocuments?: DocumentCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    userId: string
    contextDocuments?: DocumentUncheckedCreateNestedManyWithoutChatAgentTaskInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskCreateOrConnectWithoutProjectInput = {
    where: ChatAgentTaskWhereUniqueInput
    create: XOR<ChatAgentTaskCreateWithoutProjectInput, ChatAgentTaskUncheckedCreateWithoutProjectInput>
  }

  export type ChatAgentTaskCreateManyProjectInputEnvelope = {
    data: ChatAgentTaskCreateManyProjectInput | ChatAgentTaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutProjectInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutProjectInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutProjectInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput>
  }

  export type DocumentCreateManyProjectInputEnvelope = {
    data: DocumentCreateManyProjectInput | DocumentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type DocumentAnalyserTaskCreateWithoutProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentCreateNestedManyWithoutDocumentAnalyserTaskInput
    workspace: WorkspaceCreateNestedOneWithoutDocumentAnalyserTaskInput
    entities?: EntityCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    inputDocuments?: DocumentUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskCreateOrConnectWithoutProjectInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    create: XOR<DocumentAnalyserTaskCreateWithoutProjectInput, DocumentAnalyserTaskUncheckedCreateWithoutProjectInput>
  }

  export type DocumentAnalyserTaskCreateManyProjectInputEnvelope = {
    data: DocumentAnalyserTaskCreateManyProjectInput | DocumentAnalyserTaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type EntityCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput
    Document?: DocumentCreateNestedOneWithoutEntityInput
    workspace?: WorkspaceCreateNestedOneWithoutEntitiesInput
    documents?: DocumentCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityCreateOrConnectWithoutProjectInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutProjectInput, EntityUncheckedCreateWithoutProjectInput>
  }

  export type EntityCreateManyProjectInputEnvelope = {
    data: EntityCreateManyProjectInput | EntityCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type FolderCreateWithoutProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutFolderInput
    createdBy: UserCreateNestedOneWithoutFolderInput
    parentFolder?: FolderCreateNestedOneWithoutSubfoldersInput
    subfolders?: FolderCreateNestedManyWithoutParentFolderInput
  }

  export type FolderUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    createdById: string
    documents?: DocumentUncheckedCreateNestedManyWithoutFolderInput
    subfolders?: FolderUncheckedCreateNestedManyWithoutParentFolderInput
  }

  export type FolderCreateOrConnectWithoutProjectInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput>
  }

  export type FolderCreateManyProjectInputEnvelope = {
    data: FolderCreateManyProjectInput | FolderCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ObservationCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutObservationsInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutObservationsInput
    references?: ReferenceCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTaskId?: string | null
    documentAnalyserTaskId?: string | null
    references?: ReferenceUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutProjectInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutProjectInput, ObservationUncheckedCreateWithoutProjectInput>
  }

  export type ObservationCreateManyProjectInputEnvelope = {
    data: ObservationCreateManyProjectInput | ObservationCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceCreateWithoutProjectsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutProjectsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutProjectsInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
  }

  export type ReferenceCreateWithoutProjectInput = {
    id?: string
    url: string
    title?: string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutReferencesInput
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutReferencesInput
    observation?: ObservationCreateNestedOneWithoutReferencesInput
  }

  export type ReferenceUncheckedCreateWithoutProjectInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    DocumentAnalyserTaskId?: string | null
    observationId?: string | null
  }

  export type ReferenceCreateOrConnectWithoutProjectInput = {
    where: ReferenceWhereUniqueInput
    create: XOR<ReferenceCreateWithoutProjectInput, ReferenceUncheckedCreateWithoutProjectInput>
  }

  export type ReferenceCreateManyProjectInputEnvelope = {
    data: ReferenceCreateManyProjectInput | ReferenceCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type BusinessRiskReportTaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    update: XOR<BusinessRiskReportTaskUpdateWithoutProjectInput, BusinessRiskReportTaskUncheckedUpdateWithoutProjectInput>
    create: XOR<BusinessRiskReportTaskCreateWithoutProjectInput, BusinessRiskReportTaskUncheckedCreateWithoutProjectInput>
  }

  export type BusinessRiskReportTaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: BusinessRiskReportTaskWhereUniqueInput
    data: XOR<BusinessRiskReportTaskUpdateWithoutProjectInput, BusinessRiskReportTaskUncheckedUpdateWithoutProjectInput>
  }

  export type BusinessRiskReportTaskUpdateManyWithWhereWithoutProjectInput = {
    where: BusinessRiskReportTaskScalarWhereInput
    data: XOR<BusinessRiskReportTaskUpdateManyMutationInput, BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type ChatAgentTaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: ChatAgentTaskWhereUniqueInput
    update: XOR<ChatAgentTaskUpdateWithoutProjectInput, ChatAgentTaskUncheckedUpdateWithoutProjectInput>
    create: XOR<ChatAgentTaskCreateWithoutProjectInput, ChatAgentTaskUncheckedCreateWithoutProjectInput>
  }

  export type ChatAgentTaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: ChatAgentTaskWhereUniqueInput
    data: XOR<ChatAgentTaskUpdateWithoutProjectInput, ChatAgentTaskUncheckedUpdateWithoutProjectInput>
  }

  export type ChatAgentTaskUpdateManyWithWhereWithoutProjectInput = {
    where: ChatAgentTaskScalarWhereInput
    data: XOR<ChatAgentTaskUpdateManyMutationInput, ChatAgentTaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutProjectInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutProjectInput, DocumentUncheckedUpdateWithoutProjectInput>
    create: XOR<DocumentCreateWithoutProjectInput, DocumentUncheckedCreateWithoutProjectInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutProjectInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutProjectInput, DocumentUncheckedUpdateWithoutProjectInput>
  }

  export type DocumentUpdateManyWithWhereWithoutProjectInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutProjectInput>
  }

  export type DocumentAnalyserTaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    update: XOR<DocumentAnalyserTaskUpdateWithoutProjectInput, DocumentAnalyserTaskUncheckedUpdateWithoutProjectInput>
    create: XOR<DocumentAnalyserTaskCreateWithoutProjectInput, DocumentAnalyserTaskUncheckedCreateWithoutProjectInput>
  }

  export type DocumentAnalyserTaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    data: XOR<DocumentAnalyserTaskUpdateWithoutProjectInput, DocumentAnalyserTaskUncheckedUpdateWithoutProjectInput>
  }

  export type DocumentAnalyserTaskUpdateManyWithWhereWithoutProjectInput = {
    where: DocumentAnalyserTaskScalarWhereInput
    data: XOR<DocumentAnalyserTaskUpdateManyMutationInput, DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type EntityUpsertWithWhereUniqueWithoutProjectInput = {
    where: EntityWhereUniqueInput
    update: XOR<EntityUpdateWithoutProjectInput, EntityUncheckedUpdateWithoutProjectInput>
    create: XOR<EntityCreateWithoutProjectInput, EntityUncheckedCreateWithoutProjectInput>
  }

  export type EntityUpdateWithWhereUniqueWithoutProjectInput = {
    where: EntityWhereUniqueInput
    data: XOR<EntityUpdateWithoutProjectInput, EntityUncheckedUpdateWithoutProjectInput>
  }

  export type EntityUpdateManyWithWhereWithoutProjectInput = {
    where: EntityScalarWhereInput
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyWithoutProjectInput>
  }

  export type FolderUpsertWithWhereUniqueWithoutProjectInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutProjectInput, FolderUncheckedUpdateWithoutProjectInput>
    create: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutProjectInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutProjectInput, FolderUncheckedUpdateWithoutProjectInput>
  }

  export type FolderUpdateManyWithWhereWithoutProjectInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutProjectInput>
  }

  export type ObservationUpsertWithWhereUniqueWithoutProjectInput = {
    where: ObservationWhereUniqueInput
    update: XOR<ObservationUpdateWithoutProjectInput, ObservationUncheckedUpdateWithoutProjectInput>
    create: XOR<ObservationCreateWithoutProjectInput, ObservationUncheckedCreateWithoutProjectInput>
  }

  export type ObservationUpdateWithWhereUniqueWithoutProjectInput = {
    where: ObservationWhereUniqueInput
    data: XOR<ObservationUpdateWithoutProjectInput, ObservationUncheckedUpdateWithoutProjectInput>
  }

  export type ObservationUpdateManyWithWhereWithoutProjectInput = {
    where: ObservationScalarWhereInput
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyWithoutProjectInput>
  }

  export type WorkspaceUpsertWithoutProjectsInput = {
    update: XOR<WorkspaceUpdateWithoutProjectsInput, WorkspaceUncheckedUpdateWithoutProjectsInput>
    create: XOR<WorkspaceCreateWithoutProjectsInput, WorkspaceUncheckedCreateWithoutProjectsInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutProjectsInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutProjectsInput, WorkspaceUncheckedUpdateWithoutProjectsInput>
  }

  export type WorkspaceUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type ReferenceUpsertWithWhereUniqueWithoutProjectInput = {
    where: ReferenceWhereUniqueInput
    update: XOR<ReferenceUpdateWithoutProjectInput, ReferenceUncheckedUpdateWithoutProjectInput>
    create: XOR<ReferenceCreateWithoutProjectInput, ReferenceUncheckedCreateWithoutProjectInput>
  }

  export type ReferenceUpdateWithWhereUniqueWithoutProjectInput = {
    where: ReferenceWhereUniqueInput
    data: XOR<ReferenceUpdateWithoutProjectInput, ReferenceUncheckedUpdateWithoutProjectInput>
  }

  export type ReferenceUpdateManyWithWhereWithoutProjectInput = {
    where: ReferenceScalarWhereInput
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyWithoutProjectInput>
  }

  export type ChatAgentTaskCreateWithoutContextDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutChatAgentInput
    user: UserCreateNestedOneWithoutChatAgentTaskInput
    workspace: WorkspaceCreateNestedOneWithoutChatAgentTaskInput
    messages?: MessageCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskUncheckedCreateWithoutContextDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    userId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskCreateOrConnectWithoutContextDocumentsInput = {
    where: ChatAgentTaskWhereUniqueInput
    create: XOR<ChatAgentTaskCreateWithoutContextDocumentsInput, ChatAgentTaskUncheckedCreateWithoutContextDocumentsInput>
  }

  export type UserCreateWithoutDocumentInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskCreateNestedManyWithoutUserInput
    Folder?: FolderCreateNestedManyWithoutCreatedByInput
    activeWorkspace?: WorkspaceCreateNestedOneWithoutUsersInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWorkspaceId?: string | null
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutUserInput
    Folder?: FolderUncheckedCreateNestedManyWithoutCreatedByInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentInput, UserUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentAnalyserTaskCreateWithoutInputDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    project: ProjectCreateNestedOneWithoutDocumentAnalyserTaskInput
    workspace: WorkspaceCreateNestedOneWithoutDocumentAnalyserTaskInput
    entities?: EntityCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskUncheckedCreateWithoutInputDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    observations?: ObservationUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDocumentAnalyserTaskInput
  }

  export type DocumentAnalyserTaskCreateOrConnectWithoutInputDocumentsInput = {
    where: DocumentAnalyserTaskWhereUniqueInput
    create: XOR<DocumentAnalyserTaskCreateWithoutInputDocumentsInput, DocumentAnalyserTaskUncheckedCreateWithoutInputDocumentsInput>
  }

  export type FolderCreateWithoutDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutFolderInput
    parentFolder?: FolderCreateNestedOneWithoutSubfoldersInput
    subfolders?: FolderCreateNestedManyWithoutParentFolderInput
    project: ProjectCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    projectId: string
    createdById: string
    subfolders?: FolderUncheckedCreateNestedManyWithoutParentFolderInput
  }

  export type FolderCreateOrConnectWithoutDocumentsInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutDocumentsInput, FolderUncheckedCreateWithoutDocumentsInput>
  }

  export type ProjectCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDocumentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
  }

  export type WorkspaceCreateWithoutDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutDocumentsInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutDocumentsInput, WorkspaceUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentPageCreateWithoutDocumentInput = {
    id?: string
    pageNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imagePath?: string | null
  }

  export type DocumentPageUncheckedCreateWithoutDocumentInput = {
    id?: string
    pageNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imagePath?: string | null
  }

  export type DocumentPageCreateOrConnectWithoutDocumentInput = {
    where: DocumentPageWhereUniqueInput
    create: XOR<DocumentPageCreateWithoutDocumentInput, DocumentPageUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentPageCreateManyDocumentInputEnvelope = {
    data: DocumentPageCreateManyDocumentInput | DocumentPageCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type EntityCreateWithoutDocumentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput
    project?: ProjectCreateNestedOneWithoutEntitiesInput
    workspace?: WorkspaceCreateNestedOneWithoutEntitiesInput
    documents?: DocumentCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUncheckedCreateWithoutDocumentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityCreateOrConnectWithoutDocumentInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutDocumentInput, EntityUncheckedCreateWithoutDocumentInput>
  }

  export type EntityCreateManyDocumentInputEnvelope = {
    data: EntityCreateManyDocumentInput | EntityCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type EntityCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput
    DocumentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutEntitiesInput
    Document?: DocumentCreateNestedOneWithoutEntityInput
    project?: ProjectCreateNestedOneWithoutEntitiesInput
    workspace?: WorkspaceCreateNestedOneWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    projectId?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityCreateOrConnectWithoutDocumentsInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutDocumentsInput, EntityUncheckedCreateWithoutDocumentsInput>
  }

  export type ChatAgentTaskUpsertWithoutContextDocumentsInput = {
    update: XOR<ChatAgentTaskUpdateWithoutContextDocumentsInput, ChatAgentTaskUncheckedUpdateWithoutContextDocumentsInput>
    create: XOR<ChatAgentTaskCreateWithoutContextDocumentsInput, ChatAgentTaskUncheckedCreateWithoutContextDocumentsInput>
    where?: ChatAgentTaskWhereInput
  }

  export type ChatAgentTaskUpdateToOneWithWhereWithoutContextDocumentsInput = {
    where?: ChatAgentTaskWhereInput
    data: XOR<ChatAgentTaskUpdateWithoutContextDocumentsInput, ChatAgentTaskUncheckedUpdateWithoutContextDocumentsInput>
  }

  export type ChatAgentTaskUpdateWithoutContextDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutChatAgentNestedInput
    user?: UserUpdateOneRequiredWithoutChatAgentTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutChatAgentTaskNestedInput
    messages?: MessageUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateWithoutContextDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type UserUpsertWithoutDocumentInput = {
    update: XOR<UserUpdateWithoutDocumentInput, UserUncheckedUpdateWithoutDocumentInput>
    create: XOR<UserCreateWithoutDocumentInput, UserUncheckedCreateWithoutDocumentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentInput, UserUncheckedUpdateWithoutDocumentInput>
  }

  export type UserUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUpdateManyWithoutUserNestedInput
    Folder?: FolderUpdateManyWithoutCreatedByNestedInput
    activeWorkspace?: WorkspaceUpdateOneWithoutUsersNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWorkspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutUserNestedInput
    Folder?: FolderUncheckedUpdateManyWithoutCreatedByNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentAnalyserTaskUpsertWithoutInputDocumentsInput = {
    update: XOR<DocumentAnalyserTaskUpdateWithoutInputDocumentsInput, DocumentAnalyserTaskUncheckedUpdateWithoutInputDocumentsInput>
    create: XOR<DocumentAnalyserTaskCreateWithoutInputDocumentsInput, DocumentAnalyserTaskUncheckedCreateWithoutInputDocumentsInput>
    where?: DocumentAnalyserTaskWhereInput
  }

  export type DocumentAnalyserTaskUpdateToOneWithWhereWithoutInputDocumentsInput = {
    where?: DocumentAnalyserTaskWhereInput
    data: XOR<DocumentAnalyserTaskUpdateWithoutInputDocumentsInput, DocumentAnalyserTaskUncheckedUpdateWithoutInputDocumentsInput>
  }

  export type DocumentAnalyserTaskUpdateWithoutInputDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateWithoutInputDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    entities?: EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type FolderUpsertWithoutDocumentsInput = {
    update: XOR<FolderUpdateWithoutDocumentsInput, FolderUncheckedUpdateWithoutDocumentsInput>
    create: XOR<FolderCreateWithoutDocumentsInput, FolderUncheckedCreateWithoutDocumentsInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutDocumentsInput, FolderUncheckedUpdateWithoutDocumentsInput>
  }

  export type FolderUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutFolderNestedInput
    parentFolder?: FolderUpdateOneWithoutSubfoldersNestedInput
    subfolders?: FolderUpdateManyWithoutParentFolderNestedInput
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    subfolders?: FolderUncheckedUpdateManyWithoutParentFolderNestedInput
  }

  export type ProjectUpsertWithoutDocumentsInput = {
    update: XOR<ProjectUpdateWithoutDocumentsInput, ProjectUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDocumentsInput, ProjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProjectUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type WorkspaceUpsertWithoutDocumentsInput = {
    update: XOR<WorkspaceUpdateWithoutDocumentsInput, WorkspaceUncheckedUpdateWithoutDocumentsInput>
    create: XOR<WorkspaceCreateWithoutDocumentsInput, WorkspaceUncheckedCreateWithoutDocumentsInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutDocumentsInput, WorkspaceUncheckedUpdateWithoutDocumentsInput>
  }

  export type WorkspaceUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type DocumentPageUpsertWithWhereUniqueWithoutDocumentInput = {
    where: DocumentPageWhereUniqueInput
    update: XOR<DocumentPageUpdateWithoutDocumentInput, DocumentPageUncheckedUpdateWithoutDocumentInput>
    create: XOR<DocumentPageCreateWithoutDocumentInput, DocumentPageUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentPageUpdateWithWhereUniqueWithoutDocumentInput = {
    where: DocumentPageWhereUniqueInput
    data: XOR<DocumentPageUpdateWithoutDocumentInput, DocumentPageUncheckedUpdateWithoutDocumentInput>
  }

  export type DocumentPageUpdateManyWithWhereWithoutDocumentInput = {
    where: DocumentPageScalarWhereInput
    data: XOR<DocumentPageUpdateManyMutationInput, DocumentPageUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentPageScalarWhereInput = {
    AND?: DocumentPageScalarWhereInput | DocumentPageScalarWhereInput[]
    OR?: DocumentPageScalarWhereInput[]
    NOT?: DocumentPageScalarWhereInput | DocumentPageScalarWhereInput[]
    id?: StringFilter<"DocumentPage"> | string
    pageNumber?: IntFilter<"DocumentPage"> | number
    createdAt?: DateTimeFilter<"DocumentPage"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentPage"> | Date | string
    documentId?: StringFilter<"DocumentPage"> | string
    imagePath?: StringNullableFilter<"DocumentPage"> | string | null
  }

  export type EntityUpsertWithWhereUniqueWithoutDocumentInput = {
    where: EntityWhereUniqueInput
    update: XOR<EntityUpdateWithoutDocumentInput, EntityUncheckedUpdateWithoutDocumentInput>
    create: XOR<EntityCreateWithoutDocumentInput, EntityUncheckedCreateWithoutDocumentInput>
  }

  export type EntityUpdateWithWhereUniqueWithoutDocumentInput = {
    where: EntityWhereUniqueInput
    data: XOR<EntityUpdateWithoutDocumentInput, EntityUncheckedUpdateWithoutDocumentInput>
  }

  export type EntityUpdateManyWithWhereWithoutDocumentInput = {
    where: EntityScalarWhereInput
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyWithoutDocumentInput>
  }

  export type EntityUpsertWithWhereUniqueWithoutDocumentsInput = {
    where: EntityWhereUniqueInput
    update: XOR<EntityUpdateWithoutDocumentsInput, EntityUncheckedUpdateWithoutDocumentsInput>
    create: XOR<EntityCreateWithoutDocumentsInput, EntityUncheckedCreateWithoutDocumentsInput>
  }

  export type EntityUpdateWithWhereUniqueWithoutDocumentsInput = {
    where: EntityWhereUniqueInput
    data: XOR<EntityUpdateWithoutDocumentsInput, EntityUncheckedUpdateWithoutDocumentsInput>
  }

  export type EntityUpdateManyWithWhereWithoutDocumentsInput = {
    where: EntityScalarWhereInput
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyWithoutDocumentsInput>
  }

  export type DocumentCreateWithoutDocumentPageInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutDocumentPageInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutDocumentPageInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutDocumentPageInput, DocumentUncheckedCreateWithoutDocumentPageInput>
  }

  export type DocumentUpsertWithoutDocumentPageInput = {
    update: XOR<DocumentUpdateWithoutDocumentPageInput, DocumentUncheckedUpdateWithoutDocumentPageInput>
    create: XOR<DocumentCreateWithoutDocumentPageInput, DocumentUncheckedCreateWithoutDocumentPageInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutDocumentPageInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutDocumentPageInput, DocumentUncheckedUpdateWithoutDocumentPageInput>
  }

  export type DocumentUpdateWithoutDocumentPageInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutDocumentPageInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentCreateWithoutFolderInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutFolderInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutFolderInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutFolderInput, DocumentUncheckedCreateWithoutFolderInput>
  }

  export type DocumentCreateManyFolderInputEnvelope = {
    data: DocumentCreateManyFolderInput | DocumentCreateManyFolderInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutFolderInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskCreateNestedManyWithoutUserInput
    Document?: DocumentCreateNestedManyWithoutCreatedByInput
    activeWorkspace?: WorkspaceCreateNestedOneWithoutUsersInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFolderInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWorkspaceId?: string | null
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutCreatedByInput
    ChatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutUserInput
    Document?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFolderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFolderInput, UserUncheckedCreateWithoutFolderInput>
  }

  export type FolderCreateWithoutSubfoldersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutFolderInput
    createdBy: UserCreateNestedOneWithoutFolderInput
    parentFolder?: FolderCreateNestedOneWithoutSubfoldersInput
    project: ProjectCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutSubfoldersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    projectId: string
    createdById: string
    documents?: DocumentUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutSubfoldersInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutSubfoldersInput, FolderUncheckedCreateWithoutSubfoldersInput>
  }

  export type FolderCreateWithoutParentFolderInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutFolderInput
    createdBy: UserCreateNestedOneWithoutFolderInput
    subfolders?: FolderCreateNestedManyWithoutParentFolderInput
    project: ProjectCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutParentFolderInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    createdById: string
    documents?: DocumentUncheckedCreateNestedManyWithoutFolderInput
    subfolders?: FolderUncheckedCreateNestedManyWithoutParentFolderInput
  }

  export type FolderCreateOrConnectWithoutParentFolderInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutParentFolderInput, FolderUncheckedCreateWithoutParentFolderInput>
  }

  export type FolderCreateManyParentFolderInputEnvelope = {
    data: FolderCreateManyParentFolderInput | FolderCreateManyParentFolderInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutFoldersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutFoldersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutFoldersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutFolderInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutFolderInput, DocumentUncheckedUpdateWithoutFolderInput>
    create: XOR<DocumentCreateWithoutFolderInput, DocumentUncheckedCreateWithoutFolderInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutFolderInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutFolderInput, DocumentUncheckedUpdateWithoutFolderInput>
  }

  export type DocumentUpdateManyWithWhereWithoutFolderInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutFolderInput>
  }

  export type UserUpsertWithoutFolderInput = {
    update: XOR<UserUpdateWithoutFolderInput, UserUncheckedUpdateWithoutFolderInput>
    create: XOR<UserCreateWithoutFolderInput, UserUncheckedCreateWithoutFolderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFolderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFolderInput, UserUncheckedUpdateWithoutFolderInput>
  }

  export type UserUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUpdateManyWithoutUserNestedInput
    Document?: DocumentUpdateManyWithoutCreatedByNestedInput
    activeWorkspace?: WorkspaceUpdateOneWithoutUsersNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWorkspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutUserNestedInput
    Document?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FolderUpsertWithoutSubfoldersInput = {
    update: XOR<FolderUpdateWithoutSubfoldersInput, FolderUncheckedUpdateWithoutSubfoldersInput>
    create: XOR<FolderCreateWithoutSubfoldersInput, FolderUncheckedCreateWithoutSubfoldersInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutSubfoldersInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutSubfoldersInput, FolderUncheckedUpdateWithoutSubfoldersInput>
  }

  export type FolderUpdateWithoutSubfoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutFolderNestedInput
    createdBy?: UserUpdateOneRequiredWithoutFolderNestedInput
    parentFolder?: FolderUpdateOneWithoutSubfoldersNestedInput
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutSubfoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUpsertWithWhereUniqueWithoutParentFolderInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutParentFolderInput, FolderUncheckedUpdateWithoutParentFolderInput>
    create: XOR<FolderCreateWithoutParentFolderInput, FolderUncheckedCreateWithoutParentFolderInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutParentFolderInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutParentFolderInput, FolderUncheckedUpdateWithoutParentFolderInput>
  }

  export type FolderUpdateManyWithWhereWithoutParentFolderInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutParentFolderInput>
  }

  export type ProjectUpsertWithoutFoldersInput = {
    update: XOR<ProjectUpdateWithoutFoldersInput, ProjectUncheckedUpdateWithoutFoldersInput>
    create: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutFoldersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutFoldersInput, ProjectUncheckedUpdateWithoutFoldersInput>
  }

  export type ProjectUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type DocumentCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskCreateNestedOneWithoutContextDocumentsInput
    createdBy: UserCreateNestedOneWithoutDocumentInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutDocumentAnalyserTaskInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutDocumentAnalyserTaskInput, DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type DocumentCreateManyDocumentAnalyserTaskInputEnvelope = {
    data: DocumentCreateManyDocumentAnalyserTaskInput | DocumentCreateManyDocumentAnalyserTaskInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    chatAgent?: ChatAgentTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDocumentAnalyserTaskInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDocumentAnalyserTaskInput, ProjectUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type WorkspaceCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    chatAgentTask?: ChatAgentTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutDocumentAnalyserTaskInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutDocumentAnalyserTaskInput, WorkspaceUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type EntityCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutMainEntityInput
    Document?: DocumentCreateNestedOneWithoutEntityInput
    project?: ProjectCreateNestedOneWithoutEntitiesInput
    workspace?: WorkspaceCreateNestedOneWithoutEntitiesInput
    documents?: DocumentCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityUncheckedCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    documentId?: string | null
    projectId?: string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutMainEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutEntitiesInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutRelatedEntitiesInput
  }

  export type EntityCreateOrConnectWithoutDocumentAnalyserTaskInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutDocumentAnalyserTaskInput, EntityUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type EntityCreateManyDocumentAnalyserTaskInputEnvelope = {
    data: EntityCreateManyDocumentAnalyserTaskInput | EntityCreateManyDocumentAnalyserTaskInput[]
    skipDuplicates?: boolean
  }

  export type ObservationCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutObservationsInput
    project?: ProjectCreateNestedOneWithoutObservationsInput
    references?: ReferenceCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTaskId?: string | null
    projectId?: string | null
    references?: ReferenceUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutDocumentAnalyserTaskInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutDocumentAnalyserTaskInput, ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type ObservationCreateManyDocumentAnalyserTaskInputEnvelope = {
    data: ObservationCreateManyDocumentAnalyserTaskInput | ObservationCreateManyDocumentAnalyserTaskInput[]
    skipDuplicates?: boolean
  }

  export type ReferenceCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTask?: BusinessRiskReportTaskCreateNestedOneWithoutReferencesInput
    observation?: ObservationCreateNestedOneWithoutReferencesInput
    project?: ProjectCreateNestedOneWithoutReferencesInput
  }

  export type ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    projectId?: string | null
    observationId?: string | null
  }

  export type ReferenceCreateOrConnectWithoutDocumentAnalyserTaskInput = {
    where: ReferenceWhereUniqueInput
    create: XOR<ReferenceCreateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type ReferenceCreateManyDocumentAnalyserTaskInputEnvelope = {
    data: ReferenceCreateManyDocumentAnalyserTaskInput | ReferenceCreateManyDocumentAnalyserTaskInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutDocumentAnalyserTaskInput, DocumentUncheckedUpdateWithoutDocumentAnalyserTaskInput>
    create: XOR<DocumentCreateWithoutDocumentAnalyserTaskInput, DocumentUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutDocumentAnalyserTaskInput, DocumentUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type DocumentUpdateManyWithWhereWithoutDocumentAnalyserTaskInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskInput>
  }

  export type ProjectUpsertWithoutDocumentAnalyserTaskInput = {
    update: XOR<ProjectUpdateWithoutDocumentAnalyserTaskInput, ProjectUncheckedUpdateWithoutDocumentAnalyserTaskInput>
    create: XOR<ProjectCreateWithoutDocumentAnalyserTaskInput, ProjectUncheckedCreateWithoutDocumentAnalyserTaskInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDocumentAnalyserTaskInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDocumentAnalyserTaskInput, ProjectUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type ProjectUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type WorkspaceUpsertWithoutDocumentAnalyserTaskInput = {
    update: XOR<WorkspaceUpdateWithoutDocumentAnalyserTaskInput, WorkspaceUncheckedUpdateWithoutDocumentAnalyserTaskInput>
    create: XOR<WorkspaceCreateWithoutDocumentAnalyserTaskInput, WorkspaceUncheckedCreateWithoutDocumentAnalyserTaskInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutDocumentAnalyserTaskInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutDocumentAnalyserTaskInput, WorkspaceUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type WorkspaceUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    chatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type EntityUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: EntityWhereUniqueInput
    update: XOR<EntityUpdateWithoutDocumentAnalyserTaskInput, EntityUncheckedUpdateWithoutDocumentAnalyserTaskInput>
    create: XOR<EntityCreateWithoutDocumentAnalyserTaskInput, EntityUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type EntityUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: EntityWhereUniqueInput
    data: XOR<EntityUpdateWithoutDocumentAnalyserTaskInput, EntityUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type EntityUpdateManyWithWhereWithoutDocumentAnalyserTaskInput = {
    where: EntityScalarWhereInput
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskInput>
  }

  export type ObservationUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: ObservationWhereUniqueInput
    update: XOR<ObservationUpdateWithoutDocumentAnalyserTaskInput, ObservationUncheckedUpdateWithoutDocumentAnalyserTaskInput>
    create: XOR<ObservationCreateWithoutDocumentAnalyserTaskInput, ObservationUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type ObservationUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: ObservationWhereUniqueInput
    data: XOR<ObservationUpdateWithoutDocumentAnalyserTaskInput, ObservationUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type ObservationUpdateManyWithWhereWithoutDocumentAnalyserTaskInput = {
    where: ObservationScalarWhereInput
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskInput>
  }

  export type ReferenceUpsertWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: ReferenceWhereUniqueInput
    update: XOR<ReferenceUpdateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedUpdateWithoutDocumentAnalyserTaskInput>
    create: XOR<ReferenceCreateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedCreateWithoutDocumentAnalyserTaskInput>
  }

  export type ReferenceUpdateWithWhereUniqueWithoutDocumentAnalyserTaskInput = {
    where: ReferenceWhereUniqueInput
    data: XOR<ReferenceUpdateWithoutDocumentAnalyserTaskInput, ReferenceUncheckedUpdateWithoutDocumentAnalyserTaskInput>
  }

  export type ReferenceUpdateManyWithWhereWithoutDocumentAnalyserTaskInput = {
    where: ReferenceScalarWhereInput
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskInput>
  }

  export type ProjectCreateWithoutChatAgentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutProjectInput
    documents?: DocumentCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutProjectInput
    entities?: EntityCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    observations?: ObservationCreateNestedManyWithoutProjectInput
    workspace: WorkspaceCreateNestedOneWithoutProjectsInput
    references?: ReferenceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutChatAgentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProjectInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutProjectInput
    entities?: EntityUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    observations?: ObservationUncheckedCreateNestedManyWithoutProjectInput
    references?: ReferenceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutChatAgentInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutChatAgentInput, ProjectUncheckedCreateWithoutChatAgentInput>
  }

  export type UserCreateWithoutChatAgentTaskInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutCreatedByInput
    Document?: DocumentCreateNestedManyWithoutCreatedByInput
    Folder?: FolderCreateNestedManyWithoutCreatedByInput
    activeWorkspace?: WorkspaceCreateNestedOneWithoutUsersInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatAgentTaskInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWorkspaceId?: string | null
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutCreatedByInput
    Document?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    Folder?: FolderUncheckedCreateNestedManyWithoutCreatedByInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatAgentTaskInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatAgentTaskInput, UserUncheckedCreateWithoutChatAgentTaskInput>
  }

  export type WorkspaceCreateWithoutChatAgentTaskInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedManyWithoutWorkspaceInput
    entities?: EntityCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectCreateNestedManyWithoutWorkspaceInput
    users?: UserCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutChatAgentTaskInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    language?: string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    documents?: DocumentUncheckedCreateNestedManyWithoutWorkspaceInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedCreateNestedManyWithoutWorkspaceInput
    entities?: EntityUncheckedCreateNestedManyWithoutWorkspaceInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutWorkspaceInput
    projects?: ProjectUncheckedCreateNestedManyWithoutWorkspaceInput
    users?: UserUncheckedCreateNestedManyWithoutActiveWorkspaceInput
    workspaceUsers?: WorkspaceUserUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutChatAgentTaskInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutChatAgentTaskInput, WorkspaceUncheckedCreateWithoutChatAgentTaskInput>
  }

  export type DocumentCreateWithoutChatAgentTaskInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    createdBy: UserCreateNestedOneWithoutDocumentInput
    documentAnalyserTask?: DocumentAnalyserTaskCreateNestedOneWithoutInputDocumentsInput
    folder?: FolderCreateNestedOneWithoutDocumentsInput
    project: ProjectCreateNestedOneWithoutDocumentsInput
    workspace?: WorkspaceCreateNestedOneWithoutDocumentsInput
    DocumentPage?: DocumentPageCreateNestedManyWithoutDocumentInput
    entity?: EntityCreateNestedManyWithoutDocumentInput
    entities?: EntityCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutChatAgentTaskInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedCreateNestedManyWithoutDocumentInput
    entity?: EntityUncheckedCreateNestedManyWithoutDocumentInput
    entities?: EntityUncheckedCreateNestedManyWithoutDocumentsInput
  }

  export type DocumentCreateOrConnectWithoutChatAgentTaskInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutChatAgentTaskInput, DocumentUncheckedCreateWithoutChatAgentTaskInput>
  }

  export type DocumentCreateManyChatAgentTaskInputEnvelope = {
    data: DocumentCreateManyChatAgentTaskInput | DocumentCreateManyChatAgentTaskInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutChatAgentTaskInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messageActions?: MessageActionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutChatAgentTaskInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messageActions?: MessageActionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutChatAgentTaskInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatAgentTaskInput, MessageUncheckedCreateWithoutChatAgentTaskInput>
  }

  export type MessageCreateManyChatAgentTaskInputEnvelope = {
    data: MessageCreateManyChatAgentTaskInput | MessageCreateManyChatAgentTaskInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutChatAgentInput = {
    update: XOR<ProjectUpdateWithoutChatAgentInput, ProjectUncheckedUpdateWithoutChatAgentInput>
    create: XOR<ProjectCreateWithoutChatAgentInput, ProjectUncheckedCreateWithoutChatAgentInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutChatAgentInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutChatAgentInput, ProjectUncheckedUpdateWithoutChatAgentInput>
  }

  export type ProjectUpdateWithoutChatAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutProjectsNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutChatAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutChatAgentTaskInput = {
    update: XOR<UserUpdateWithoutChatAgentTaskInput, UserUncheckedUpdateWithoutChatAgentTaskInput>
    create: XOR<UserCreateWithoutChatAgentTaskInput, UserUncheckedCreateWithoutChatAgentTaskInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatAgentTaskInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatAgentTaskInput, UserUncheckedUpdateWithoutChatAgentTaskInput>
  }

  export type UserUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutCreatedByNestedInput
    Document?: DocumentUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUpdateManyWithoutCreatedByNestedInput
    activeWorkspace?: WorkspaceUpdateOneWithoutUsersNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWorkspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByNestedInput
    Document?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUncheckedUpdateManyWithoutCreatedByNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkspaceUpsertWithoutChatAgentTaskInput = {
    update: XOR<WorkspaceUpdateWithoutChatAgentTaskInput, WorkspaceUncheckedUpdateWithoutChatAgentTaskInput>
    create: XOR<WorkspaceCreateWithoutChatAgentTaskInput, WorkspaceUncheckedCreateWithoutChatAgentTaskInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutChatAgentTaskInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutChatAgentTaskInput, WorkspaceUncheckedUpdateWithoutChatAgentTaskInput>
  }

  export type WorkspaceUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUpdateManyWithoutWorkspaceNestedInput
    users?: UserUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutWorkspaceNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceNestedInput
    entities?: EntityUncheckedUpdateManyWithoutWorkspaceNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutWorkspaceNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutWorkspaceNestedInput
    users?: UserUncheckedUpdateManyWithoutActiveWorkspaceNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutChatAgentTaskInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutChatAgentTaskInput, DocumentUncheckedUpdateWithoutChatAgentTaskInput>
    create: XOR<DocumentCreateWithoutChatAgentTaskInput, DocumentUncheckedCreateWithoutChatAgentTaskInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutChatAgentTaskInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutChatAgentTaskInput, DocumentUncheckedUpdateWithoutChatAgentTaskInput>
  }

  export type DocumentUpdateManyWithWhereWithoutChatAgentTaskInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutChatAgentTaskInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutChatAgentTaskInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatAgentTaskInput, MessageUncheckedUpdateWithoutChatAgentTaskInput>
    create: XOR<MessageCreateWithoutChatAgentTaskInput, MessageUncheckedCreateWithoutChatAgentTaskInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatAgentTaskInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatAgentTaskInput, MessageUncheckedUpdateWithoutChatAgentTaskInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatAgentTaskInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatAgentTaskInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    messageSender?: EnumMessageSenderFilter<"Message"> | $Enums.MessageSender
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    chatAgentTaskId?: StringFilter<"Message"> | string
  }

  export type ChatAgentTaskCreateWithoutMessagesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutChatAgentInput
    user: UserCreateNestedOneWithoutChatAgentTaskInput
    workspace: WorkspaceCreateNestedOneWithoutChatAgentTaskInput
    contextDocuments?: DocumentCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskUncheckedCreateWithoutMessagesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
    userId: string
    contextDocuments?: DocumentUncheckedCreateNestedManyWithoutChatAgentTaskInput
  }

  export type ChatAgentTaskCreateOrConnectWithoutMessagesInput = {
    where: ChatAgentTaskWhereUniqueInput
    create: XOR<ChatAgentTaskCreateWithoutMessagesInput, ChatAgentTaskUncheckedCreateWithoutMessagesInput>
  }

  export type MessageActionCreateWithoutMessageInput = {
    id?: string
    title: string
    messageActionType: $Enums.MessageActionType
    documentId: string
  }

  export type MessageActionUncheckedCreateWithoutMessageInput = {
    id?: string
    title: string
    messageActionType: $Enums.MessageActionType
    documentId: string
  }

  export type MessageActionCreateOrConnectWithoutMessageInput = {
    where: MessageActionWhereUniqueInput
    create: XOR<MessageActionCreateWithoutMessageInput, MessageActionUncheckedCreateWithoutMessageInput>
  }

  export type MessageActionCreateManyMessageInputEnvelope = {
    data: MessageActionCreateManyMessageInput | MessageActionCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type ChatAgentTaskUpsertWithoutMessagesInput = {
    update: XOR<ChatAgentTaskUpdateWithoutMessagesInput, ChatAgentTaskUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatAgentTaskCreateWithoutMessagesInput, ChatAgentTaskUncheckedCreateWithoutMessagesInput>
    where?: ChatAgentTaskWhereInput
  }

  export type ChatAgentTaskUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatAgentTaskWhereInput
    data: XOR<ChatAgentTaskUpdateWithoutMessagesInput, ChatAgentTaskUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatAgentTaskUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutChatAgentNestedInput
    user?: UserUpdateOneRequiredWithoutChatAgentTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutChatAgentTaskNestedInput
    contextDocuments?: DocumentUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contextDocuments?: DocumentUncheckedUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type MessageActionUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageActionWhereUniqueInput
    update: XOR<MessageActionUpdateWithoutMessageInput, MessageActionUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageActionCreateWithoutMessageInput, MessageActionUncheckedCreateWithoutMessageInput>
  }

  export type MessageActionUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageActionWhereUniqueInput
    data: XOR<MessageActionUpdateWithoutMessageInput, MessageActionUncheckedUpdateWithoutMessageInput>
  }

  export type MessageActionUpdateManyWithWhereWithoutMessageInput = {
    where: MessageActionScalarWhereInput
    data: XOR<MessageActionUpdateManyMutationInput, MessageActionUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageActionScalarWhereInput = {
    AND?: MessageActionScalarWhereInput | MessageActionScalarWhereInput[]
    OR?: MessageActionScalarWhereInput[]
    NOT?: MessageActionScalarWhereInput | MessageActionScalarWhereInput[]
    id?: StringFilter<"MessageAction"> | string
    title?: StringFilter<"MessageAction"> | string
    messageId?: StringFilter<"MessageAction"> | string
    messageActionType?: EnumMessageActionTypeFilter<"MessageAction"> | $Enums.MessageActionType
    documentId?: StringFilter<"MessageAction"> | string
  }

  export type MessageCreateWithoutMessageActionsInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatAgentTask: ChatAgentTaskCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutMessageActionsInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatAgentTaskId: string
  }

  export type MessageCreateOrConnectWithoutMessageActionsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutMessageActionsInput, MessageUncheckedCreateWithoutMessageActionsInput>
  }

  export type MessageUpsertWithoutMessageActionsInput = {
    update: XOR<MessageUpdateWithoutMessageActionsInput, MessageUncheckedUpdateWithoutMessageActionsInput>
    create: XOR<MessageCreateWithoutMessageActionsInput, MessageUncheckedCreateWithoutMessageActionsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutMessageActionsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutMessageActionsInput, MessageUncheckedUpdateWithoutMessageActionsInput>
  }

  export type MessageUpdateWithoutMessageActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatAgentTask?: ChatAgentTaskUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutMessageActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatAgentTaskId?: StringFieldUpdateOperationsInput | string
  }

  export type BusinessRiskReportTaskCreateManyCreatedByInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
  }

  export type ChatAgentTaskCreateManyUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    projectId: string
  }

  export type DocumentCreateManyCreatedByInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
  }

  export type FolderCreateManyCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    projectId: string
  }

  export type WorkspaceUserCreateManyUserInput = {
    id?: string
    workspaceId: string
    role: $Enums.WorkspaceRole
  }

  export type BusinessRiskReportTaskUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    mainEntity?: EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput
    project?: ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    observations?: ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatAgentTaskUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutChatAgentNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutChatAgentTaskNestedInput
    contextDocuments?: DocumentUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    contextDocuments?: DocumentUncheckedUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type FolderUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutFolderNestedInput
    parentFolder?: FolderUpdateOneWithoutSubfoldersNestedInput
    subfolders?: FolderUpdateManyWithoutParentFolderNestedInput
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutFolderNestedInput
    subfolders?: FolderUncheckedUpdateManyWithoutParentFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkspaceUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceUsersNestedInput
  }

  export type WorkspaceUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
  }

  export type WorkspaceUserUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
  }

  export type BusinessRiskReportTaskCreateManyWorkspaceInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
    projectId?: string | null
  }

  export type ChatAgentTaskCreateManyWorkspaceInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    userId: string
  }

  export type DocumentCreateManyWorkspaceInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
  }

  export type DocumentAnalyserTaskCreateManyWorkspaceInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
  }

  export type EntityCreateManyWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
    projectId?: string | null
  }

  export type InvitationCreateManyWorkspaceInput = {
    id?: string
    email: string
    role: $Enums.WorkspaceRole
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    accepted?: boolean
  }

  export type ProjectCreateManyWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: number | null
    city?: string | null
    country?: string | null
    endDate?: Date | string | null
    fundingType?: string | null
    potentialFraudDescription?: string | null
    potentialFraudTypes?: ProjectCreatepotentialFraudTypesInput | string[]
    projectType?: string | null
    startDate?: Date | string | null
    status?: $Enums.ProjectStatus
  }

  export type UserCreateManyActiveWorkspaceInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profileImage?: string | null
    hasVerifiedEmail?: boolean
    verificationToken?: string | null
  }

  export type WorkspaceUserCreateManyWorkspaceInput = {
    id?: string
    userId: string
    role: $Enums.WorkspaceRole
  }

  export type BusinessRiskReportTaskUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    mainEntity?: EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput
    project?: ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput
    observations?: ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatAgentTaskUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutChatAgentNestedInput
    user?: UserUpdateOneRequiredWithoutChatAgentTaskNestedInput
    contextDocuments?: DocumentUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contextDocuments?: DocumentUncheckedUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type DocumentAnalyserTaskUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUpdateManyWithoutDocumentAnalyserTaskNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput
    Document?: DocumentUpdateOneWithoutEntityNestedInput
    project?: ProjectUpdateOneWithoutEntitiesNestedInput
    documents?: DocumentUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvitationUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProjectUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUpdateManyWithoutProjectNestedInput
    documents?: DocumentUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateManyWithoutProjectNestedInput
    entities?: EntityUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    observations?: ObservationUpdateManyWithoutProjectNestedInput
    references?: ReferenceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectNestedInput
    chatAgent?: ChatAgentTaskUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProjectNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectNestedInput
    entities?: EntityUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutProjectNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: NullableIntFieldUpdateOperationsInput | number | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fundingType?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudDescription?: NullableStringFieldUpdateOperationsInput | string | null
    potentialFraudTypes?: ProjectUpdatepotentialFraudTypesInput | string[]
    projectType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
  }

  export type UserUpdateWithoutActiveWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUpdateManyWithoutUserNestedInput
    Document?: DocumentUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUpdateManyWithoutCreatedByNestedInput
    workspaceUsers?: WorkspaceUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActiveWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutCreatedByNestedInput
    ChatAgentTask?: ChatAgentTaskUncheckedUpdateManyWithoutUserNestedInput
    Document?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    Folder?: FolderUncheckedUpdateManyWithoutCreatedByNestedInput
    workspaceUsers?: WorkspaceUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutActiveWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    hasVerifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkspaceUserUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    user?: UserUpdateOneRequiredWithoutWorkspaceUsersNestedInput
  }

  export type WorkspaceUserUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
  }

  export type WorkspaceUserUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
  }

  export type ObservationCreateManyBusinessRiskReportTaskInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    projectId?: string | null
    documentAnalyserTaskId?: string | null
  }

  export type ReferenceCreateManyBusinessRiskReportTaskInput = {
    id?: string
    url: string
    title?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
    observationId?: string | null
  }

  export type ObservationUpdateWithoutBusinessRiskReportTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutObservationsNestedInput
    project?: ProjectUpdateOneWithoutObservationsNestedInput
    references?: ReferenceUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutBusinessRiskReportTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    references?: ReferenceUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUpdateWithoutBusinessRiskReportTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutReferencesNestedInput
    observation?: ObservationUpdateOneWithoutReferencesNestedInput
    project?: ProjectUpdateOneWithoutReferencesNestedInput
  }

  export type ReferenceUncheckedUpdateWithoutBusinessRiskReportTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUpdateWithoutRelatedBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput
    Document?: DocumentUpdateOneWithoutEntityNestedInput
    project?: ProjectUpdateOneWithoutEntitiesNestedInput
    workspace?: WorkspaceUpdateOneWithoutEntitiesNestedInput
    documents?: DocumentUpdateManyWithoutEntitiesNestedInput
  }

  export type EntityUncheckedUpdateWithoutRelatedBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutEntitiesNestedInput
  }

  export type EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessRiskReportTaskCreateManyMainEntityInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    displayId?: number
    projectId?: string | null
  }

  export type BusinessRiskReportTaskUpdateWithoutMainEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    project?: ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    observations?: ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateWithoutMainEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type BusinessRiskReportTaskUpdateWithoutRelatedEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    mainEntity?: EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput
    project?: ProjectUpdateOneWithoutBusinessRiskReportTasksNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    observations?: ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateWithoutRelatedEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceCreateManyObservationInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
  }

  export type ReferenceUpdateWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutReferencesNestedInput
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutReferencesNestedInput
    project?: ProjectUpdateOneWithoutReferencesNestedInput
  }

  export type ReferenceUncheckedUpdateWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUncheckedUpdateManyWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessRiskReportTaskCreateManyProjectInput = {
    id?: string
    reportName?: string | null
    generalDescription?: string | null
    natureOfBusiness?: string | null
    geography?: string | null
    riskOverview?: string | null
    nextSteps?: BusinessRiskReportTaskCreatenextStepsInput | string[]
    inputUrl?: string | null
    createdById: string
    workspaceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: string | null
    displayId?: number
  }

  export type ChatAgentTaskCreateManyProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    userId: string
  }

  export type DocumentCreateManyProjectInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
  }

  export type DocumentAnalyserTaskCreateManyProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaceId: string
    nextSteps?: DocumentAnalyserTaskCreatenextStepsInput | string[]
    status?: $Enums.DocumentAnalyserTaskStatus
    outputDescription?: string | null
    inputContext?: string | null
  }

  export type EntityCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    documentId?: string | null
  }

  export type FolderCreateManyProjectInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parentFolderId?: string | null
    createdById: string
  }

  export type ObservationCreateManyProjectInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTaskId?: string | null
    documentAnalyserTaskId?: string | null
  }

  export type ReferenceCreateManyProjectInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    DocumentAnalyserTaskId?: string | null
    observationId?: string | null
  }

  export type BusinessRiskReportTaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    displayId?: IntFieldUpdateOperationsInput | number
    createdBy?: UserUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    mainEntity?: EntityUpdateOneWithoutMainBusinessRiskReportTasksNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBusinessRiskReportTasksNestedInput
    observations?: ObservationUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
    observations?: ObservationUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutBusinessRiskReportTaskNestedInput
    relatedEntities?: EntityUncheckedUpdateManyWithoutRelatedBusinessRiskReportTasksNestedInput
  }

  export type BusinessRiskReportTaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportName?: NullableStringFieldUpdateOperationsInput | string | null
    generalDescription?: NullableStringFieldUpdateOperationsInput | string | null
    natureOfBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    geography?: NullableStringFieldUpdateOperationsInput | string | null
    riskOverview?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: BusinessRiskReportTaskUpdatenextStepsInput | string[]
    inputUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBusinessRiskReportTaskStatusFieldUpdateOperationsInput | $Enums.BusinessRiskReportTaskStatus
    mainEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    displayId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatAgentTaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatAgentTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutChatAgentTaskNestedInput
    contextDocuments?: DocumentUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contextDocuments?: DocumentUncheckedUpdateManyWithoutChatAgentTaskNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatAgentTaskNestedInput
  }

  export type ChatAgentTaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type DocumentAnalyserTaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUpdateManyWithoutDocumentAnalyserTaskNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
    inputDocuments?: DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskNestedInput
  }

  export type DocumentAnalyserTaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    nextSteps?: DocumentAnalyserTaskUpdatenextStepsInput | string[]
    status?: EnumDocumentAnalyserTaskStatusFieldUpdateOperationsInput | $Enums.DocumentAnalyserTaskStatus
    outputDescription?: NullableStringFieldUpdateOperationsInput | string | null
    inputContext?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput
    Document?: DocumentUpdateOneWithoutEntityNestedInput
    workspace?: WorkspaceUpdateOneWithoutEntitiesNestedInput
    documents?: DocumentUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FolderUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutFolderNestedInput
    createdBy?: UserUpdateOneRequiredWithoutFolderNestedInput
    parentFolder?: FolderUpdateOneWithoutSubfoldersNestedInput
    subfolders?: FolderUpdateManyWithoutParentFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutFolderNestedInput
    subfolders?: FolderUncheckedUpdateManyWithoutParentFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ObservationUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutObservationsNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutObservationsNestedInput
    references?: ReferenceUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    references?: ReferenceUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutReferencesNestedInput
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutReferencesNestedInput
    observation?: ObservationUpdateOneWithoutReferencesNestedInput
  }

  export type ReferenceUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentPageCreateManyDocumentInput = {
    id?: string
    pageNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imagePath?: string | null
  }

  export type EntityCreateManyDocumentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    DocumentAnalyserTaskId?: string | null
    projectId?: string | null
  }

  export type DocumentPageUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentPageUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentPageUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput
    project?: ProjectUpdateOneWithoutEntitiesNestedInput
    workspace?: WorkspaceUpdateOneWithoutEntitiesNestedInput
    documents?: DocumentUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput
    DocumentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutEntitiesNestedInput
    Document?: DocumentUpdateOneWithoutEntityNestedInput
    project?: ProjectUpdateOneWithoutEntitiesNestedInput
    workspace?: WorkspaceUpdateOneWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateManyWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    DocumentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyFolderInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
  }

  export type FolderCreateManyParentFolderInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    createdById: string
  }

  export type DocumentUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type FolderUpdateWithoutParentFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutFolderNestedInput
    createdBy?: UserUpdateOneRequiredWithoutFolderNestedInput
    subfolders?: FolderUpdateManyWithoutParentFolderNestedInput
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutParentFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutFolderNestedInput
    subfolders?: FolderUncheckedUpdateManyWithoutParentFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutParentFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManyDocumentAnalyserTaskInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    chatAgentTaskId?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
  }

  export type EntityCreateManyDocumentAnalyserTaskInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.EntityType
    socialLinks?: EntityCreatesocialLinksInput | string[]
    country?: string | null
    city?: string | null
    state?: string | null
    streetAddress?: string | null
    zipCode?: string | null
    phoneNumber?: string | null
    email?: string | null
    website?: string | null
    workspaceId?: string | null
    industry?: string | null
    role?: string | null
    documentId?: string | null
    projectId?: string | null
  }

  export type ObservationCreateManyDocumentAnalyserTaskInput = {
    id?: string
    title: string
    description: string
    riskGrade: number
    type?: string | null
    businessRiskReportTaskId?: string | null
    projectId?: string | null
  }

  export type ReferenceCreateManyDocumentAnalyserTaskInput = {
    id?: string
    url: string
    title?: string | null
    businessRiskReportTaskId?: string | null
    projectId?: string | null
    observationId?: string | null
  }

  export type DocumentUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    chatAgentTask?: ChatAgentTaskUpdateOneWithoutContextDocumentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    chatAgentTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type EntityUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutMainEntityNestedInput
    Document?: DocumentUpdateOneWithoutEntityNestedInput
    project?: ProjectUpdateOneWithoutEntitiesNestedInput
    workspace?: WorkspaceUpdateOneWithoutEntitiesNestedInput
    documents?: DocumentUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    mainBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutMainEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutEntitiesNestedInput
    relatedBusinessRiskReportTasks?: BusinessRiskReportTaskUncheckedUpdateManyWithoutRelatedEntitiesNestedInput
  }

  export type EntityUncheckedUpdateManyWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    socialLinks?: EntityUpdatesocialLinksInput | string[]
    country?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    streetAddress?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ObservationUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutObservationsNestedInput
    project?: ProjectUpdateOneWithoutObservationsNestedInput
    references?: ReferenceUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    references?: ReferenceUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateManyWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    riskGrade?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTask?: BusinessRiskReportTaskUpdateOneWithoutReferencesNestedInput
    observation?: ObservationUpdateOneWithoutReferencesNestedInput
    project?: ProjectUpdateOneWithoutReferencesNestedInput
  }

  export type ReferenceUncheckedUpdateWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferenceUncheckedUpdateManyWithoutDocumentAnalyserTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    businessRiskReportTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyChatAgentTaskInput = {
    id?: string
    filename: string
    uploadedAt?: Date | string
    workspaceId?: string | null
    author?: string | null
    createdById: string
    dateOrPeriod?: string | null
    description?: string | null
    documentAnalyserTaskId?: string | null
    fileType: string
    folderId?: string | null
    fullText?: string | null
    language?: string | null
    metadata?: string | null
    projectId: string
    url: string
    fileSize?: number | null
    preprocessStatus?: $Enums.DocumentPreprocessStatus
  }

  export type MessageCreateManyChatAgentTaskInput = {
    id?: string
    messageSender: $Enums.MessageSender
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: NullableStringFieldUpdateOperationsInput | string | null
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    createdBy?: UserUpdateOneRequiredWithoutDocumentNestedInput
    documentAnalyserTask?: DocumentAnalyserTaskUpdateOneWithoutInputDocumentsNestedInput
    folder?: FolderUpdateOneWithoutDocumentsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
    workspace?: WorkspaceUpdateOneWithoutDocumentsNestedInput
    DocumentPage?: DocumentPageUpdateManyWithoutDocumentNestedInput
    entity?: EntityUpdateManyWithoutDocumentNestedInput
    entities?: EntityUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
    DocumentPage?: DocumentPageUncheckedUpdateManyWithoutDocumentNestedInput
    entity?: EntityUncheckedUpdateManyWithoutDocumentNestedInput
    entities?: EntityUncheckedUpdateManyWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaceId?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    dateOrPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    documentAnalyserTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    fileType?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    fullText?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    preprocessStatus?: EnumDocumentPreprocessStatusFieldUpdateOperationsInput | $Enums.DocumentPreprocessStatus
  }

  export type MessageUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageActions?: MessageActionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageActions?: MessageActionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutChatAgentTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageSender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageActionCreateManyMessageInput = {
    id?: string
    title: string
    messageActionType: $Enums.MessageActionType
    documentId: string
  }

  export type MessageActionUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    messageActionType?: EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageActionUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    messageActionType?: EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageActionUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    messageActionType?: EnumMessageActionTypeFieldUpdateOperationsInput | $Enums.MessageActionType
    documentId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkspaceCountOutputTypeDefaultArgs instead
     */
    export type WorkspaceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BusinessRiskReportTaskCountOutputTypeDefaultArgs instead
     */
    export type BusinessRiskReportTaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BusinessRiskReportTaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntityCountOutputTypeDefaultArgs instead
     */
    export type EntityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ObservationCountOutputTypeDefaultArgs instead
     */
    export type ObservationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObservationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentCountOutputTypeDefaultArgs instead
     */
    export type DocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FolderCountOutputTypeDefaultArgs instead
     */
    export type FolderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FolderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentAnalyserTaskCountOutputTypeDefaultArgs instead
     */
    export type DocumentAnalyserTaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentAnalyserTaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatAgentTaskCountOutputTypeDefaultArgs instead
     */
    export type ChatAgentTaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatAgentTaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageCountOutputTypeDefaultArgs instead
     */
    export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkspaceDefaultArgs instead
     */
    export type WorkspaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkspaceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkspaceUserDefaultArgs instead
     */
    export type WorkspaceUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkspaceUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvitationDefaultArgs instead
     */
    export type InvitationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvitationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BusinessRiskReportTaskDefaultArgs instead
     */
    export type BusinessRiskReportTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BusinessRiskReportTaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntityDefaultArgs instead
     */
    export type EntityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ObservationDefaultArgs instead
     */
    export type ObservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReferenceDefaultArgs instead
     */
    export type ReferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentPageDefaultArgs instead
     */
    export type DocumentPageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentPageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FolderDefaultArgs instead
     */
    export type FolderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FolderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentAnalyserTaskDefaultArgs instead
     */
    export type DocumentAnalyserTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentAnalyserTaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatAgentTaskDefaultArgs instead
     */
    export type ChatAgentTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatAgentTaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageActionDefaultArgs instead
     */
    export type MessageActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageActionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}